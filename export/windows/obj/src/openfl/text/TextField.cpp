// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_StyleSheet
#include <openfl/text/StyleSheet.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__internal_GlyphPosition
#include <openfl/text/_internal/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl_text__internal_HTMLParser
#include <openfl/text/_internal/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextEngine
#include <openfl/text/_internal/TextEngine.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextFormatRange
#include <openfl/text/_internal/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayoutGroup
#include <openfl/text/_internal/TextLayoutGroup.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_125_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",125,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_866_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",866,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_892_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",892,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_918_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",918,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_968_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",968,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1017_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",1017,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1049_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",1049,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1073_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",1073,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1106_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",1106,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1137_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",1137,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1163_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",1163,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1202_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",1202,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1241_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1241,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1337_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1337,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1358_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",1358,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1375_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1375,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1439_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1439,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1614___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1614,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1619___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1619,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1623___caretBeginningOfNextLine,"openfl.text.TextField","__caretBeginningOfNextLine",0x9988917c,"openfl.text.TextField.__caretBeginningOfNextLine","openfl/text/TextField.hx",1623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1637___caretBeginningOfPreviousLine,"openfl.text.TextField","__caretBeginningOfPreviousLine",0x6f5ad940,"openfl.text.TextField.__caretBeginningOfPreviousLine","openfl/text/TextField.hx",1637,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1656___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1656,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1671___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1671,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1678___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1678,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1689___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1689,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1696___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1696,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1707___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1707,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1721___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1721,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1751___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1751,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1798___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1798,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1803___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1803,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1817___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1817,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1849___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1849,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1886___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1886,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1902___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1902,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1951___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1951,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1983___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1983,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2007___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",2007,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2023___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2023,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2046___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2046,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2177___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2177,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2195___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2195,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2211___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2211,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2227___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2227,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2238___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2238,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2269___updateMouseDrag,"openfl.text.TextField","__updateMouseDrag",0x2a5075ac,"openfl.text.TextField.__updateMouseDrag","openfl/text/TextField.hx",2269,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2301___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2301,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2375___updateScrollV,"openfl.text.TextField","__updateScrollV",0x4ea991dc,"openfl.text.TextField.__updateScrollV","openfl/text/TextField.hx",2375,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2437___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2437,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2497___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2497,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2505_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",2505,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2509_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",2509,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2520_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",2520,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2524_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2524,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2537_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",2537,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2541_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",2541,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2553_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",2553,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2557_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",2557,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2569_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2569,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2573_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2573,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2585_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",2585,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2589_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2589,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2600_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2608_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2608,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2613_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2613,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2617_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2617,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2629_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2629,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2633_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2633,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2649_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2649,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2661_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2661,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2666_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2666,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2678_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2678,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2682_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2682,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2688_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2688,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2705_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2705,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2712_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2712,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2770_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2770,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2781_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2781,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2785_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2785,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2799_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2799,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2806_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2806,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2814_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2814,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2819_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2819,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2824_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2824,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2829_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2829,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2833_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2833,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2841_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2841,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2845_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2845,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2857_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2857,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2861_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2861,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2880_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2880,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2884_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2884,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2903_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2903,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2907_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2907,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2925_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2925,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2930_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2930,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2935_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2935,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2939_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2939,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2951_get_styleSheet,"openfl.text.TextField","get_styleSheet",0x260a431b,"openfl.text.TextField.get_styleSheet","openfl/text/TextField.hx",2951,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2955_set_styleSheet,"openfl.text.TextField","set_styleSheet",0x462a2b8f,"openfl.text.TextField.set_styleSheet","openfl/text/TextField.hx",2955,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2981_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2981,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2986_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2986,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2990_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2990,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3027_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",3027,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3031_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",3031,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3047_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",3047,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3053_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",3053,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3060_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",3060,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3064_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3064,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3101_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3101,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3107_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3107,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3123_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",3123,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3127_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3127,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3140_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3140,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3144_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3144,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3152_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3152,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3156_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3156,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3164_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3164,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3200_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3200,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3243_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3243,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3248_this_onEnterFrame,"openfl.text.TextField","this_onEnterFrame",0xf6c59f11,"openfl.text.TextField.this_onEnterFrame","openfl/text/TextField.hx",3248,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3254_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3254,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3265_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3265,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3283_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3283,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3294_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3294,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3321_this_onMouseWheel,"openfl.text.TextField","this_onMouseWheel",0xdbfcc352,"openfl.text.TextField.this_onMouseWheel","openfl/text/TextField.hx",3321,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3329_this_onDoubleClick,"openfl.text.TextField","this_onDoubleClick",0xbfe820db,"openfl.text.TextField.this_onDoubleClick","openfl/text/TextField.hx",3329,0xccf02094)
static const ::String _hx_array_data_efd5a8ca_158[] = {
	HX_("\n",0a,00,00,00),HX_(".",2e,00,00,00),HX_("!",21,00,00,00),HX_("?",3f,00,00,00),HX_(",",2c,00,00,00),HX_(" ",20,00,00,00),HX_(";",3b,00,00,00),HX_(":",3a,00,00,00),HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00),HX_("/",2f,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3382_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3382,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3608_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3608,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_128_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",128,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_125_new)
HXLINE( 683)		this->_hx___mouseScrollVCounter = 0;
HXLINE( 268)		this->condenseWhite = false;
HXLINE( 819)		super::__construct();
HXLINE( 821)		this->_hx___drawableType = 7;
HXLINE( 822)		this->_hx___caretIndex = -1;
HXLINE( 823)		this->_hx___selectionIndex = -1;
HXLINE( 824)		this->_hx___displayAsPassword = false;
HXLINE( 825)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 826)		this->_hx___textEngine =  ::openfl::text::_internal::TextEngine_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 827)		this->_hx___layoutDirty = true;
HXLINE( 828)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 829)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 830)		this->_hx___mouseWheelEnabled = true;
HXLINE( 831)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 833)		this->doubleClickEnabled = true;
HXLINE( 835)		if (::hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 837)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),12,0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),3,0,0,0,0);
HXLINE( 838)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = 0;
HXLINE( 839)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 840)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = 0;
HXLINE( 841)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 844)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 845)		{
HXLINE( 845)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 845)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,0,0));
            		}
HXLINE( 847)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 848)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 849)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 850)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
HXLINE( 851)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->this_onMouseWheel_dyn(),null(),null(),null());
HXLINE( 853)		this->addEventListener(HX_("doubleClick",77,03,76,cd),this->this_onDoubleClick_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_866_appendText)
HXLINE( 867)		bool _hx_tmp;
HXDLIN( 867)		if (::hx::IsNotNull( text )) {
HXLINE( 867)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 867)			_hx_tmp = true;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 867)			return;
            		}
HXLINE( 869)		this->_hx___dirty = true;
HXLINE( 870)		this->_hx___layoutDirty = true;
HXLINE( 871)		if (!(this->_hx___renderDirty)) {
HXLINE( 871)			this->_hx___renderDirty = true;
HXDLIN( 871)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 873)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 875)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 875)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 877)		this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_892_getCharBoundaries)
HXLINE( 893)		bool _hx_tmp;
HXDLIN( 893)		if ((charIndex >= 0)) {
HXLINE( 893)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE( 893)			_hx_tmp = true;
            		}
HXDLIN( 893)		if (_hx_tmp) {
HXLINE( 893)			return null();
            		}
HXLINE( 895)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 897)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 899)			return rect;
            		}
            		else {
HXLINE( 903)			return null();
            		}
HXLINE( 897)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_918_getCharIndexAtPoint)
HXLINE( 919)		bool _hx_tmp;
HXDLIN( 919)		bool _hx_tmp1;
HXDLIN( 919)		bool _hx_tmp2;
HXDLIN( 919)		if (!((x <= 2))) {
HXLINE( 919)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE( 919)			_hx_tmp2 = true;
            		}
HXDLIN( 919)		if (!(_hx_tmp2)) {
HXLINE( 919)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE( 919)			_hx_tmp1 = true;
            		}
HXDLIN( 919)		if (!(_hx_tmp1)) {
HXLINE( 919)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE( 919)			_hx_tmp = true;
            		}
HXDLIN( 919)		if (_hx_tmp) {
HXLINE( 919)			return -1;
            		}
HXLINE( 921)		this->_hx___updateLayout();
HXLINE( 923)		x = (x + this->get_scrollH());
HXLINE( 925)		{
HXLINE( 925)			int _g = 0;
HXDLIN( 925)			int _g1 = (this->get_scrollV() - 1);
HXDLIN( 925)			while((_g < _g1)){
HXLINE( 925)				_g = (_g + 1);
HXDLIN( 925)				int i = (_g - 1);
HXLINE( 927)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 930)		{
HXLINE( 930)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN( 930)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 930)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 932)				bool _hx_tmp3;
HXDLIN( 932)				if ((y >= group1->offsetY)) {
HXLINE( 932)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE( 932)					_hx_tmp3 = false;
            				}
HXDLIN( 932)				if (_hx_tmp3) {
HXLINE( 934)					bool _hx_tmp4;
HXDLIN( 934)					if ((x >= group1->offsetX)) {
HXLINE( 934)						_hx_tmp4 = (x <= (group1->offsetX + group1->width));
            					}
            					else {
HXLINE( 934)						_hx_tmp4 = false;
            					}
HXDLIN( 934)					if (_hx_tmp4) {
HXLINE( 936)						Float advance = ((Float)0.0);
HXLINE( 938)						{
HXLINE( 938)							int _g2 = 0;
HXDLIN( 938)							int _g3 = group1->positions->length;
HXDLIN( 938)							while((_g2 < _g3)){
HXLINE( 938)								_g2 = (_g2 + 1);
HXDLIN( 938)								int i1 = (_g2 - 1);
HXLINE( 940)								Float advance1;
HXDLIN( 940)								bool advance2;
HXDLIN( 940)								if ((i1 >= 0)) {
HXLINE( 940)									advance2 = (i1 < group1->positions->length);
            								}
            								else {
HXLINE( 940)									advance2 = false;
            								}
HXDLIN( 940)								if (advance2) {
HXLINE( 940)									advance1 = group1->positions->__get(i1).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 940)									advance1 = ( (Float)(0) );
            								}
HXDLIN( 940)								advance = (advance + advance1);
HXLINE( 942)								if ((x <= (group1->offsetX + advance))) {
HXLINE( 944)									return (group1->startIndex + i1);
            								}
            							}
            						}
HXLINE( 948)						return group1->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 953)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_968_getFirstCharInParagraph)
HXLINE( 969)		bool _hx_tmp;
HXDLIN( 969)		if ((charIndex >= 0)) {
HXLINE( 969)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE( 969)			_hx_tmp = true;
            		}
HXDLIN( 969)		if (_hx_tmp) {
HXLINE( 969)			return -1;
            		}
HXLINE( 970)		if ((this->_hx___textEngine->lineBreaks->get_length() == 0)) {
HXLINE( 970)			return 0;
            		}
HXLINE( 972)		{
HXLINE( 972)			int _g = 0;
HXDLIN( 972)			int _g1 = this->_hx___textEngine->lineBreaks->get_length();
HXDLIN( 972)			while((_g < _g1)){
HXLINE( 972)				_g = (_g + 1);
HXDLIN( 972)				int i = (_g - 1);
HXLINE( 974)				if ((charIndex <= this->_hx___textEngine->lineBreaks->get(i))) {
HXLINE( 976)					if ((i == 0)) {
HXLINE( 976)						return 0;
            					}
            					else {
HXLINE( 976)						return (this->_hx___textEngine->lineBreaks->get((i - 1)) + 1);
            					}
            				}
            			}
            		}
HXLINE( 980)		::Dynamic this1 = this->_hx___textEngine->lineBreaks;
HXDLIN( 980)		return (( ( ::openfl::_Vector::IntVector)(this1) )->get((this->_hx___textEngine->lineBreaks->get_length() - 1)) + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1017_getLineIndexAtPoint)
HXLINE(1018)		this->_hx___updateLayout();
HXLINE(1020)		bool _hx_tmp;
HXDLIN(1020)		bool _hx_tmp1;
HXDLIN(1020)		bool _hx_tmp2;
HXDLIN(1020)		if (!((x <= 2))) {
HXLINE(1020)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE(1020)			_hx_tmp2 = true;
            		}
HXDLIN(1020)		if (!(_hx_tmp2)) {
HXLINE(1020)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE(1020)			_hx_tmp1 = true;
            		}
HXDLIN(1020)		if (!(_hx_tmp1)) {
HXLINE(1020)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE(1020)			_hx_tmp = true;
            		}
HXDLIN(1020)		if (_hx_tmp) {
HXLINE(1020)			return -1;
            		}
HXLINE(1022)		{
HXLINE(1022)			int _g = 0;
HXDLIN(1022)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1022)			while((_g < _g1)){
HXLINE(1022)				_g = (_g + 1);
HXDLIN(1022)				int i = (_g - 1);
HXLINE(1024)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1027)		{
HXLINE(1027)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1027)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1027)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1029)				bool _hx_tmp3;
HXDLIN(1029)				if ((y >= group1->offsetY)) {
HXLINE(1029)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE(1029)					_hx_tmp3 = false;
            				}
HXDLIN(1029)				if (_hx_tmp3) {
HXLINE(1031)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1035)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1049_getLineIndexOfChar)
HXLINE(1050)		bool _hx_tmp;
HXDLIN(1050)		if ((charIndex >= 0)) {
HXLINE(1050)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1050)			_hx_tmp = true;
            		}
HXDLIN(1050)		if (_hx_tmp) {
HXLINE(1050)			return -1;
            		}
HXLINE(1052)		this->_hx___updateLayout();
HXLINE(1054)		{
HXLINE(1054)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1054)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1054)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1056)				bool _hx_tmp1;
HXDLIN(1056)				if ((group1->startIndex <= charIndex)) {
HXLINE(1056)					_hx_tmp1 = (group1->endIndex >= charIndex);
            				}
            				else {
HXLINE(1056)					_hx_tmp1 = false;
            				}
HXDLIN(1056)				if (_hx_tmp1) {
HXLINE(1058)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1062)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1073_getLineLength)
HXLINE(1074)		this->_hx___updateLayout();
HXLINE(1076)		bool _hx_tmp;
HXDLIN(1076)		if ((lineIndex >= 0)) {
HXLINE(1076)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1076)			_hx_tmp = true;
            		}
HXDLIN(1076)		if (_hx_tmp) {
HXLINE(1076)			return 0;
            		}
HXLINE(1078)		int startIndex = -1;
HXLINE(1079)		int endIndex = -1;
HXLINE(1081)		{
HXLINE(1081)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1081)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1081)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1083)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1085)					if ((startIndex == -1)) {
HXLINE(1085)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1087)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1089)						endIndex = group1->startIndex;
HXLINE(1090)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE(1094)		if ((endIndex == -1)) {
HXLINE(1094)			endIndex = this->_hx___text.length;
            		}
HXLINE(1095)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1106_getLineMetrics)
HXLINE(1107)		this->_hx___updateLayout();
HXLINE(1109)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE(1110)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE(1111)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE(1112)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE(1113)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE(1117)		Float margin;
HXDLIN(1117)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==0) ){
HXLINE(1117)			margin = ((this->_hx___textEngine->width - lineWidth) / ( (Float)(2) ));
HXDLIN(1117)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==1) ||  (_hx_switch_0==4) ){
HXLINE(1117)			margin = ((this->_hx___textEngine->width - lineWidth) - ( (Float)(2) ));
HXDLIN(1117)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==2) ||  (_hx_switch_0==3) ||  (_hx_switch_0==5) ){
HXLINE(1117)			margin = ( (Float)(2) );
HXDLIN(1117)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE(1124)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1137_getLineOffset)
HXLINE(1138)		this->_hx___updateLayout();
HXLINE(1140)		bool _hx_tmp;
HXDLIN(1140)		if ((lineIndex >= 0)) {
HXLINE(1140)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1140)			_hx_tmp = true;
            		}
HXDLIN(1140)		if (_hx_tmp) {
HXLINE(1140)			return -1;
            		}
HXLINE(1142)		{
HXLINE(1142)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1142)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1142)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1144)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1146)					return group1->startIndex;
            				}
            			}
            		}
HXLINE(1150)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1163_getLineText)
HXLINE(1164)		this->_hx___updateLayout();
HXLINE(1166)		bool _hx_tmp;
HXDLIN(1166)		if ((lineIndex >= 0)) {
HXLINE(1166)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1166)			_hx_tmp = true;
            		}
HXDLIN(1166)		if (_hx_tmp) {
HXLINE(1166)			return null();
            		}
HXLINE(1168)		int startIndex = -1;
HXLINE(1169)		int endIndex = -1;
HXLINE(1171)		{
HXLINE(1171)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1171)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1171)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1173)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1175)					if ((startIndex == -1)) {
HXLINE(1175)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1177)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1179)						endIndex = group1->startIndex;
HXLINE(1180)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE(1184)		if ((endIndex == -1)) {
HXLINE(1184)			endIndex = this->_hx___text.length;
            		}
HXLINE(1186)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1202_getParagraphLength)
HXLINE(1203)		bool _hx_tmp;
HXDLIN(1203)		if ((charIndex >= 0)) {
HXLINE(1203)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE(1203)			_hx_tmp = true;
            		}
HXDLIN(1203)		if (_hx_tmp) {
HXLINE(1203)			return -1;
            		}
HXLINE(1205)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE(1207)		if ((charIndex >= this->get_text().length)) {
HXLINE(1207)			return ((this->get_text().length - startIndex) + 1);
            		}
HXLINE(1209)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + 1);
HXLINE(1211)		if ((endIndex == 0)) {
HXLINE(1211)			endIndex = this->_hx___text.length;
            		}
HXLINE(1212)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1241_getTextFormat)
HXLINE(1242)		 ::openfl::text::TextFormat format = null();
HXLINE(1244)		bool _hx_tmp;
HXDLIN(1244)		bool _hx_tmp1;
HXDLIN(1244)		bool _hx_tmp2;
HXDLIN(1244)		if ((beginIndex < this->get_text().length)) {
HXLINE(1244)			_hx_tmp2 = (beginIndex < -1);
            		}
            		else {
HXLINE(1244)			_hx_tmp2 = true;
            		}
HXDLIN(1244)		if (!(_hx_tmp2)) {
HXLINE(1244)			_hx_tmp1 = (endIndex > this->get_text().length);
            		}
            		else {
HXLINE(1244)			_hx_tmp1 = true;
            		}
HXDLIN(1244)		if (!(_hx_tmp1)) {
HXLINE(1244)			_hx_tmp = (endIndex < -1);
            		}
            		else {
HXLINE(1244)			_hx_tmp = true;
            		}
HXDLIN(1244)		if (_hx_tmp) {
HXLINE(1245)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds",37,5a,d3,87)));
            		}
HXLINE(1247)		if ((beginIndex == -1)) {
HXLINE(1247)			beginIndex = 0;
            		}
HXLINE(1248)		if ((endIndex == -1)) {
HXLINE(1248)			endIndex = this->get_text().length;
            		}
HXLINE(1250)		if ((beginIndex >= endIndex)) {
HXLINE(1250)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1252)		{
HXLINE(1252)			 ::Dynamic group = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(1252)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1252)				 ::openfl::text::_internal::TextFormatRange group1 = ( ( ::openfl::text::_internal::TextFormatRange)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1254)				bool _hx_tmp3;
HXDLIN(1254)				bool _hx_tmp4;
HXDLIN(1254)				if ((group1->start <= beginIndex)) {
HXLINE(1254)					_hx_tmp4 = (group1->end > beginIndex);
            				}
            				else {
HXLINE(1254)					_hx_tmp4 = false;
            				}
HXDLIN(1254)				if (!(_hx_tmp4)) {
HXLINE(1254)					if ((group1->start < endIndex)) {
HXLINE(1254)						_hx_tmp3 = (group1->end >= endIndex);
            					}
            					else {
HXLINE(1254)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(1254)					_hx_tmp3 = true;
            				}
HXDLIN(1254)				if (_hx_tmp3) {
HXLINE(1256)					if (::hx::IsNull( format )) {
HXLINE(1258)						format = group1->format->clone();
            					}
            					else {
HXLINE(1262)						if ((group1->format->font != format->font)) {
HXLINE(1262)							format->font = null();
            						}
HXLINE(1263)						if (::hx::IsNotEq( group1->format->size,format->size )) {
HXLINE(1263)							format->size = null();
            						}
HXLINE(1264)						if (::hx::IsNotEq( group1->format->color,format->color )) {
HXLINE(1264)							format->color = null();
            						}
HXLINE(1265)						if (::hx::IsNotEq( group1->format->bold,format->bold )) {
HXLINE(1265)							format->bold = null();
            						}
HXLINE(1266)						if (::hx::IsNotEq( group1->format->italic,format->italic )) {
HXLINE(1266)							format->italic = null();
            						}
HXLINE(1267)						if (::hx::IsNotEq( group1->format->underline,format->underline )) {
HXLINE(1267)							format->underline = null();
            						}
HXLINE(1268)						if ((group1->format->url != format->url)) {
HXLINE(1268)							format->url = null();
            						}
HXLINE(1269)						if ((group1->format->target != format->target)) {
HXLINE(1269)							format->target = null();
            						}
HXLINE(1270)						if (::hx::IsNotEq( group1->format->align,format->align )) {
HXLINE(1270)							format->align = null();
            						}
HXLINE(1271)						if (::hx::IsNotEq( group1->format->leftMargin,format->leftMargin )) {
HXLINE(1271)							format->leftMargin = null();
            						}
HXLINE(1272)						if (::hx::IsNotEq( group1->format->rightMargin,format->rightMargin )) {
HXLINE(1272)							format->rightMargin = null();
            						}
HXLINE(1273)						if (::hx::IsNotEq( group1->format->indent,format->indent )) {
HXLINE(1273)							format->indent = null();
            						}
HXLINE(1274)						if (::hx::IsNotEq( group1->format->leading,format->leading )) {
HXLINE(1274)							format->leading = null();
            						}
HXLINE(1275)						if (::hx::IsNotEq( group1->format->blockIndent,format->blockIndent )) {
HXLINE(1275)							format->blockIndent = null();
            						}
HXLINE(1276)						if (::hx::IsNotEq( group1->format->bullet,format->bullet )) {
HXLINE(1276)							format->bullet = null();
            						}
HXLINE(1277)						if (::hx::IsNotEq( group1->format->kerning,format->kerning )) {
HXLINE(1277)							format->kerning = null();
            						}
HXLINE(1278)						if (::hx::IsNotEq( group1->format->letterSpacing,format->letterSpacing )) {
HXLINE(1278)							format->letterSpacing = null();
            						}
HXLINE(1279)						if (::hx::IsPointerNotEq( group1->format->tabStops,format->tabStops )) {
HXLINE(1279)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1284)		if (::hx::IsNull( format )) {
HXLINE(1284)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1285)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1337_replaceSelectedText)
HXDLIN(1337)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1358_replaceText)
HXDLIN(1358)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1375_setSelection)
HXLINE(1376)		this->_hx___selectionIndex = beginIndex;
HXLINE(1377)		this->_hx___caretIndex = endIndex;
HXLINE(1379)		this->_hx___updateScrollV();
HXLINE(1380)		this->_hx___updateScrollH();
HXLINE(1382)		bool _hx_tmp;
HXDLIN(1382)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1382)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1382)			_hx_tmp = false;
            		}
HXDLIN(1382)		if (_hx_tmp) {
HXLINE(1384)			this->_hx___stopCursorTimer();
HXLINE(1389)			this->_hx___startCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1439_setTextFormat)
HXLINE(1440)		int max = this->get_text().length;
HXLINE(1441)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(1443)		if ((beginIndex == -1)) {
HXLINE(1445)			if ((endIndex == -1)) {
HXLINE(1445)				endIndex = max;
            			}
HXLINE(1446)			beginIndex = 0;
            		}
            		else {
HXLINE(1448)			if ((endIndex == -1)) {
HXLINE(1450)				endIndex = (beginIndex + 1);
            			}
            		}
HXLINE(1453)		if ((beginIndex == endIndex)) {
HXLINE(1453)			return;
            		}
HXLINE(1454)		bool _hx_tmp;
HXDLIN(1454)		bool _hx_tmp1;
HXDLIN(1454)		bool _hx_tmp2;
HXDLIN(1454)		bool _hx_tmp3;
HXDLIN(1454)		if ((beginIndex >= 0)) {
HXLINE(1454)			_hx_tmp3 = (endIndex <= 0);
            		}
            		else {
HXLINE(1454)			_hx_tmp3 = true;
            		}
HXDLIN(1454)		if (!(_hx_tmp3)) {
HXLINE(1454)			_hx_tmp2 = (endIndex < beginIndex);
            		}
            		else {
HXLINE(1454)			_hx_tmp2 = true;
            		}
HXDLIN(1454)		if (!(_hx_tmp2)) {
HXLINE(1454)			_hx_tmp1 = (beginIndex >= max);
            		}
            		else {
HXLINE(1454)			_hx_tmp1 = true;
            		}
HXDLIN(1454)		if (!(_hx_tmp1)) {
HXLINE(1454)			_hx_tmp = (endIndex > max);
            		}
            		else {
HXLINE(1454)			_hx_tmp = true;
            		}
HXDLIN(1454)		if (_hx_tmp) {
HXLINE(1454)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE(1472)		bool _hx_tmp4;
HXDLIN(1472)		if ((beginIndex == 0)) {
HXLINE(1472)			_hx_tmp4 = (endIndex == max);
            		}
            		else {
HXLINE(1472)			_hx_tmp4 = false;
            		}
HXDLIN(1472)		if (_hx_tmp4) {
HXLINE(1475)			this->_hx___textEngine->textFormatRanges->set_length(1);
HXLINE(1477)			range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1478)			range->start = 0;
HXLINE(1479)			range->end = max;
HXLINE(1480)			range->format->_hx___merge(format);
            		}
            		else {
HXLINE(1484)			int index = 0;
HXLINE(1485)			 ::openfl::text::_internal::TextFormatRange newRange;
HXLINE(1487)			while((index < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(1489)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1491)				if ((range->end <= beginIndex)) {
HXLINE(1494)					index = (index + 1);
            				}
            				else {
HXLINE(1496)					if ((range->start >= endIndex)) {
HXLINE(1499)						goto _hx_goto_28;
            					}
            					else {
HXLINE(1501)						bool _hx_tmp5;
HXDLIN(1501)						if ((range->start <= beginIndex)) {
HXLINE(1501)							_hx_tmp5 = (range->end >= endIndex);
            						}
            						else {
HXLINE(1501)							_hx_tmp5 = false;
            						}
HXDLIN(1501)						if (_hx_tmp5) {
HXLINE(1503)							bool _hx_tmp6;
HXDLIN(1503)							if ((range->start == beginIndex)) {
HXLINE(1503)								_hx_tmp6 = (range->end == endIndex);
            							}
            							else {
HXLINE(1503)								_hx_tmp6 = false;
            							}
HXDLIN(1503)							if (_hx_tmp6) {
HXLINE(1506)								range->format = range->format->clone();
HXLINE(1507)								range->format->_hx___merge(format);
HXLINE(1508)								goto _hx_goto_28;
            							}
            							else {
HXLINE(1510)								if ((range->start == beginIndex)) {
HXLINE(1513)									newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1514)									newRange->format->_hx___merge(format);
HXLINE(1515)									this->_hx___textEngine->textFormatRanges->insertAt(index,newRange);
HXLINE(1516)									range->start = endIndex;
HXLINE(1517)									index = (index + 2);
            								}
            								else {
HXLINE(1519)									if ((range->end == endIndex)) {
HXLINE(1522)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1523)										newRange->format->_hx___merge(format);
HXLINE(1524)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1526)										range->end = beginIndex;
HXLINE(1527)										goto _hx_goto_28;
            									}
            									else {
HXLINE(1532)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1533)										newRange->format->_hx___merge(format);
HXLINE(1534)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1536)										 ::openfl::text::TextFormat newRange1 = range->format->clone();
HXDLIN(1536)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,newRange1,endIndex,range->end);
HXLINE(1537)										this->_hx___textEngine->textFormatRanges->insertAt((index + 2),newRange);
HXLINE(1539)										range->end = beginIndex;
HXLINE(1540)										goto _hx_goto_28;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1543)							bool _hx_tmp7;
HXDLIN(1543)							if ((range->start >= beginIndex)) {
HXLINE(1543)								_hx_tmp7 = (range->end <= endIndex);
            							}
            							else {
HXLINE(1543)								_hx_tmp7 = false;
            							}
HXDLIN(1543)							if (_hx_tmp7) {
HXLINE(1546)								if ((range->start == beginIndex)) {
HXLINE(1549)									range->format = range->format->clone();
HXLINE(1550)									range->format->_hx___merge(format);
HXLINE(1551)									range->end = endIndex;
            								}
            								else {
HXLINE(1556)									this->_hx___textEngine->textFormatRanges->removeAt(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
            								}
            							}
            							else {
HXLINE(1559)								bool _hx_tmp8;
HXDLIN(1559)								if ((range->start > beginIndex)) {
HXLINE(1559)									_hx_tmp8 = (range->end > beginIndex);
            								}
            								else {
HXLINE(1559)									_hx_tmp8 = false;
            								}
HXDLIN(1559)								if (_hx_tmp8) {
HXLINE(1562)									range->start = endIndex;
HXLINE(1563)									goto _hx_goto_28;
            								}
            								else {
HXLINE(1565)									bool _hx_tmp9;
HXDLIN(1565)									if ((range->start < beginIndex)) {
HXLINE(1565)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(1565)										_hx_tmp9 = false;
            									}
HXDLIN(1565)									if (_hx_tmp9) {
HXLINE(1568)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1569)										newRange->format->_hx___merge(format);
HXLINE(1570)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1571)										range->end = beginIndex;
HXLINE(1572)										index = (index + 2);
            									}
            									else {
HXLINE(1577)										index = (index + 1);
HXLINE(1578)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),1578,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("setTextFormat",06,4e,f7,d5)));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_28:;
            		}
HXLINE(1605)		this->_hx___dirty = true;
HXLINE(1606)		this->_hx___layoutDirty = true;
HXLINE(1607)		if (!(this->_hx___renderDirty)) {
HXLINE(1607)			this->_hx___renderDirty = true;
HXDLIN(1607)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1614___allowMouseFocus)
HXDLIN(1614)		return this->mouseEnabled;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1619___caretBeginningOfLine)
HXDLIN(1619)		this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretBeginningOfNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1623___caretBeginningOfNextLine)
HXLINE(1624)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1626)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1628)			this->_hx___caretIndex = this->getLineOffset((lineIndex + 1));
            		}
            		else {
HXLINE(1632)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfNextLine,(void))

void TextField_obj::_hx___caretBeginningOfPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1637___caretBeginningOfPreviousLine)
HXLINE(1638)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1640)		if ((lineIndex > 0)) {
HXLINE(1642)			int index = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(1644)			if ((this->_hx___caretIndex == index)) {
HXLINE(1646)				this->_hx___caretIndex = this->getLineOffset((lineIndex - 1));
            			}
            			else {
HXLINE(1650)				this->_hx___caretIndex = index;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfPreviousLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1656___caretEndOfLine)
HXLINE(1657)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1659)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1661)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + 1)) - 1);
            		}
            		else {
HXLINE(1665)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1671___caretNextCharacter)
HXDLIN(1671)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(1673)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1678___caretNextLine)
HXLINE(1679)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1681)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1683)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1689___caretPreviousCharacter)
HXDLIN(1689)		if ((this->_hx___caretIndex > 0)) {
HXLINE(1691)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1696___caretPreviousLine)
HXLINE(1697)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1699)		if ((lineIndex > 0)) {
HXLINE(1701)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex - 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1707___disableInput)
HXDLIN(1707)		bool _hx_tmp;
HXDLIN(1707)		if (this->_hx___inputEnabled) {
HXDLIN(1707)			_hx_tmp = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1707)			_hx_tmp = false;
            		}
HXDLIN(1707)		if (_hx_tmp) {
HXLINE(1710)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1711)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1712)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1715)			this->_hx___inputEnabled = false;
HXLINE(1716)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1721___dispatch)
HXLINE(1722)		bool _hx_tmp;
HXDLIN(1722)		if ((event->eventPhase == 2)) {
HXLINE(1722)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1722)			_hx_tmp = false;
            		}
HXDLIN(1722)		if (_hx_tmp) {
HXLINE(1724)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE(1725)			Float group = this->get_mouseX();
HXDLIN(1725)			 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1727)			if (::hx::IsNotNull( group1 )) {
HXLINE(1729)				::String url = group1->format->url;
HXLINE(1731)				bool _hx_tmp1;
HXDLIN(1731)				if (::hx::IsNotNull( url )) {
HXLINE(1731)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1731)					_hx_tmp1 = false;
            				}
HXDLIN(1731)				if (_hx_tmp1) {
HXLINE(1733)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1735)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),true,false,url.substr(6,null())));
            					}
            					else {
HXLINE(1739)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1745)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1751___enableInput)
HXDLIN(1751)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1755)			 ::openfl::geom::Rectangle bounds = this->getBounds(this->stage);
HXLINE(1756)			 ::lime::math::Rectangle limeRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1767)			this->stage->window->setTextInputRect(limeRect);
HXLINE(1770)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1772)			if (!(this->_hx___inputEnabled)) {
HXLINE(1774)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1776)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1778)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1779)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1782)				this->_hx___inputEnabled = true;
HXLINE(1786)				this->_hx___stopCursorTimer();
HXLINE(1787)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1798___getAdvance)
HXDLIN(1798)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1803___getBounds)
HXLINE(1804)		this->_hx___updateLayout();
HXLINE(1806)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1807)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1808)		bounds->offset(this->_hx___offsetX,this->_hx___offsetY);
HXLINE(1809)		bounds->_hx___transform(bounds,matrix);
HXLINE(1811)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1813)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1817___getCharBoundaries)
HXLINE(1818)		bool _hx_tmp;
HXDLIN(1818)		if ((charIndex >= 0)) {
HXLINE(1818)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE(1818)			_hx_tmp = true;
            		}
HXDLIN(1818)		if (_hx_tmp) {
HXLINE(1818)			return false;
            		}
HXLINE(1820)		this->_hx___updateLayout();
HXLINE(1822)		{
HXLINE(1822)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1822)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1822)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1824)				bool _hx_tmp1;
HXDLIN(1824)				if ((charIndex >= group1->startIndex)) {
HXLINE(1824)					_hx_tmp1 = (charIndex < group1->endIndex);
            				}
            				else {
HXLINE(1824)					_hx_tmp1 = false;
            				}
HXDLIN(1824)				if (_hx_tmp1) {
HXLINE(1826)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1828)						Float x = group1->offsetX;
HXLINE(1830)						{
HXLINE(1830)							int _g = 0;
HXDLIN(1830)							int _g1 = (charIndex - group1->startIndex);
HXDLIN(1830)							while((_g < _g1)){
HXLINE(1830)								_g = (_g + 1);
HXDLIN(1830)								int i = (_g - 1);
HXLINE(1832)								Float x1;
HXDLIN(1832)								bool x2;
HXDLIN(1832)								if ((i >= 0)) {
HXLINE(1832)									x2 = (i < group1->positions->length);
            								}
            								else {
HXLINE(1832)									x2 = false;
            								}
HXDLIN(1832)								if (x2) {
HXLINE(1832)									x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1832)									x1 = ( (Float)(0) );
            								}
HXDLIN(1832)								x = (x + x1);
            							}
            						}
HXLINE(1836)						int index = (charIndex - group1->startIndex);
HXDLIN(1836)						Float lastPosition;
HXDLIN(1836)						bool lastPosition1;
HXDLIN(1836)						if ((index >= 0)) {
HXLINE(1836)							lastPosition1 = (index < group1->positions->length);
            						}
            						else {
HXLINE(1836)							lastPosition1 = false;
            						}
HXDLIN(1836)						if (lastPosition1) {
HXLINE(1836)							lastPosition = group1->positions->__get(index).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1836)							lastPosition = ( (Float)(0) );
            						}
HXLINE(1838)						rect->setTo(x,group1->offsetY,lastPosition,(group1->ascent + group1->descent));
HXLINE(1839)						return true;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE(1841)							{
HXLINE(1841)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1845)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1849___getCharIndexOnDifferentLine)
HXLINE(1850)		bool _hx_tmp;
HXDLIN(1850)		if ((charIndex >= 0)) {
HXLINE(1850)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1850)			_hx_tmp = true;
            		}
HXDLIN(1850)		if (_hx_tmp) {
HXLINE(1850)			return -1;
            		}
HXLINE(1851)		bool _hx_tmp1;
HXDLIN(1851)		if ((lineIndex >= 0)) {
HXLINE(1851)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1851)			_hx_tmp1 = true;
            		}
HXDLIN(1851)		if (_hx_tmp1) {
HXLINE(1851)			return -1;
            		}
HXLINE(1853)		 ::Dynamic x = null();
HXDLIN(1853)		 ::Dynamic y = null();
HXLINE(1855)		{
HXLINE(1855)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1855)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1855)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1857)				bool _hx_tmp2;
HXDLIN(1857)				if ((charIndex >= group1->startIndex)) {
HXLINE(1857)					_hx_tmp2 = (charIndex <= group1->endIndex);
            				}
            				else {
HXLINE(1857)					_hx_tmp2 = false;
            				}
HXDLIN(1857)				if (_hx_tmp2) {
HXLINE(1859)					x = group1->offsetX;
HXLINE(1861)					{
HXLINE(1861)						int _g = 0;
HXDLIN(1861)						int _g1 = (charIndex - group1->startIndex);
HXDLIN(1861)						while((_g < _g1)){
HXLINE(1861)							_g = (_g + 1);
HXDLIN(1861)							int i = (_g - 1);
HXLINE(1863)							Float x1;
HXDLIN(1863)							bool x2;
HXDLIN(1863)							if ((i >= 0)) {
HXLINE(1863)								x2 = (i < group1->positions->length);
            							}
            							else {
HXLINE(1863)								x2 = false;
            							}
HXDLIN(1863)							if (x2) {
HXLINE(1863)								x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1863)								x1 = ( (Float)(0) );
            							}
HXDLIN(1863)							x = (x + x1);
            						}
            					}
HXLINE(1866)					if (::hx::IsNotNull( y )) {
HXLINE(1866)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
HXLINE(1869)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1871)					y = (group1->offsetY + (group1->height / ( (Float)(2) )));
HXLINE(1873)					{
HXLINE(1873)						int _g2 = 0;
HXDLIN(1873)						int _g3 = (this->get_scrollV() - 1);
HXDLIN(1873)						while((_g2 < _g3)){
HXLINE(1873)							_g2 = (_g2 + 1);
HXDLIN(1873)							int i1 = (_g2 - 1);
HXLINE(1875)							y = (y - this->_hx___textEngine->lineHeights->get(i1));
            						}
            					}
HXLINE(1878)					if (::hx::IsNotNull( x )) {
HXLINE(1878)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
            			}
            		}
HXLINE(1882)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

::String TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1886___getCursor)
HXLINE(1887)		Float group = this->get_mouseX();
HXDLIN(1887)		 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1889)		bool _hx_tmp;
HXDLIN(1889)		if (::hx::IsNotNull( group1 )) {
HXLINE(1889)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1889)			_hx_tmp = false;
            		}
HXDLIN(1889)		if (_hx_tmp) {
HXLINE(1891)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXLINE(1893)			if (this->_hx___textEngine->selectable) {
HXLINE(1895)				return HX_("ibeam",58,ca,26,b6);
            			}
            		}
HXLINE(1898)		return null();
            	}


 ::openfl::text::_internal::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,::hx::Null< bool >  __o_precise){
            		bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1902___getGroup)
HXLINE(1903)		this->_hx___updateLayout();
HXLINE(1905)		x = (x + this->get_scrollH());
HXLINE(1907)		{
HXLINE(1907)			int _g = 0;
HXDLIN(1907)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1907)			while((_g < _g1)){
HXLINE(1907)				_g = (_g + 1);
HXDLIN(1907)				int i = (_g - 1);
HXLINE(1909)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1912)		bool _hx_tmp;
HXDLIN(1912)		if (!(precise)) {
HXLINE(1912)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1912)			_hx_tmp = false;
            		}
HXDLIN(1912)		if (_hx_tmp) {
HXLINE(1912)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1914)		bool firstGroup = true;
HXLINE(1915)		 ::openfl::text::_internal::TextLayoutGroup group;
HXDLIN(1915)		 ::openfl::text::_internal::TextLayoutGroup nextGroup;
HXLINE(1917)		{
HXLINE(1917)			int _g2 = 0;
HXDLIN(1917)			int _g3 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1917)			while((_g2 < _g3)){
HXLINE(1917)				_g2 = (_g2 + 1);
HXDLIN(1917)				int i1 = (_g2 - 1);
HXLINE(1919)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1921)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - 1))) {
HXLINE(1923)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
            				}
            				else {
HXLINE(1927)					nextGroup = null();
            				}
HXLINE(1930)				if (firstGroup) {
HXLINE(1932)					if ((y < group->offsetY)) {
HXLINE(1932)						y = group->offsetY;
            					}
HXLINE(1933)					if ((x < group->offsetX)) {
HXLINE(1933)						x = group->offsetX;
            					}
HXLINE(1934)					firstGroup = false;
            				}
HXLINE(1937)				bool _hx_tmp1;
HXDLIN(1937)				bool _hx_tmp2;
HXDLIN(1937)				if ((y >= group->offsetY)) {
HXLINE(1937)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1937)					_hx_tmp2 = false;
            				}
HXDLIN(1937)				if (!(_hx_tmp2)) {
HXLINE(1937)					if (!(precise)) {
HXLINE(1937)						_hx_tmp1 = ::hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1937)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1937)					_hx_tmp1 = true;
            				}
HXDLIN(1937)				if (_hx_tmp1) {
HXLINE(1939)					bool _hx_tmp3;
HXDLIN(1939)					bool _hx_tmp4;
HXDLIN(1939)					if ((x >= group->offsetX)) {
HXLINE(1939)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1939)						_hx_tmp4 = false;
            					}
HXDLIN(1939)					if (!(_hx_tmp4)) {
HXLINE(1940)						if (!(precise)) {
HXLINE(1940)							if (::hx::IsNotNull( nextGroup )) {
HXLINE(1939)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1939)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1939)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1939)						_hx_tmp3 = true;
            					}
HXDLIN(1939)					if (_hx_tmp3) {
HXLINE(1942)						return group;
            					}
            				}
            			}
            		}
HXLINE(1947)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1951___getPosition)
HXLINE(1952)		 ::openfl::text::_internal::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1954)		if (::hx::IsNull( group )) {
HXLINE(1956)			return this->_hx___text.length;
            		}
HXLINE(1959)		Float advance = ((Float)0.0);
HXLINE(1961)		{
HXLINE(1961)			int _g = 0;
HXDLIN(1961)			int _g1 = group->positions->length;
HXDLIN(1961)			while((_g < _g1)){
HXLINE(1961)				_g = (_g + 1);
HXDLIN(1961)				int i = (_g - 1);
HXLINE(1963)				Float advance1;
HXDLIN(1963)				bool advance2;
HXDLIN(1963)				if ((i >= 0)) {
HXLINE(1963)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1963)					advance2 = false;
            				}
HXDLIN(1963)				if (advance2) {
HXLINE(1963)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1963)					advance1 = ( (Float)(0) );
            				}
HXDLIN(1963)				advance = (advance + advance1);
HXLINE(1965)				if ((x <= (group->offsetX + advance))) {
HXLINE(1967)					Float _hx_tmp;
HXDLIN(1967)					bool _hx_tmp1;
HXDLIN(1967)					if ((i >= 0)) {
HXLINE(1967)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1967)						_hx_tmp1 = false;
            					}
HXDLIN(1967)					if (_hx_tmp1) {
HXLINE(1967)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1967)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(1967)					Float _hx_tmp2;
HXDLIN(1967)					bool _hx_tmp3;
HXDLIN(1967)					if ((i >= 0)) {
HXLINE(1967)						_hx_tmp3 = (i < group->positions->length);
            					}
            					else {
HXLINE(1967)						_hx_tmp3 = false;
            					}
HXDLIN(1967)					if (_hx_tmp3) {
HXLINE(1967)						_hx_tmp2 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1967)						_hx_tmp2 = ( (Float)(0) );
            					}
HXDLIN(1967)					if ((x <= ((group->offsetX + (advance - _hx_tmp)) + (_hx_tmp2 / ( (Float)(2) ))))) {
HXLINE(1969)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1973)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1973)							return ((group->startIndex + i) + 1);
            						}
            						else {
HXLINE(1973)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1978)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1983___hitTest)
HXLINE(1984)		bool _hx_tmp;
HXDLIN(1984)		bool _hx_tmp1;
HXDLIN(1984)		if (hitObject->get_visible()) {
HXLINE(1984)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1984)			_hx_tmp1 = true;
            		}
HXDLIN(1984)		if (!(_hx_tmp1)) {
HXLINE(1984)			if (interactiveOnly) {
HXLINE(1984)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1984)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1984)			_hx_tmp = true;
            		}
HXDLIN(1984)		if (_hx_tmp) {
HXLINE(1984)			return false;
            		}
HXLINE(1985)		bool _hx_tmp2;
HXDLIN(1985)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE(1985)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1985)			_hx_tmp2 = false;
            		}
HXDLIN(1985)		if (_hx_tmp2) {
HXLINE(1985)			return false;
            		}
HXLINE(1987)		this->_hx___getRenderTransform();
HXLINE(1988)		this->_hx___updateLayout();
HXLINE(1990)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1990)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1990)		Float px;
HXDLIN(1990)		if ((norm == 0)) {
HXLINE(1990)			px = -(_this->tx);
            		}
            		else {
HXLINE(1990)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(1991)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(1991)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(1991)		Float py;
HXDLIN(1991)		if ((norm1 == 0)) {
HXLINE(1991)			py = -(_this1->ty);
            		}
            		else {
HXLINE(1991)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(1993)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1995)			if (::hx::IsNotNull( stack )) {
HXLINE(1997)				stack->push(hitObject);
            			}
HXLINE(2000)			return true;
            		}
HXLINE(2003)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2007___hitTestMask)
HXLINE(2008)		this->_hx___getRenderTransform();
HXLINE(2009)		this->_hx___updateLayout();
HXLINE(2011)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2011)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2011)		Float px;
HXDLIN(2011)		if ((norm == 0)) {
HXLINE(2011)			px = -(_this->tx);
            		}
            		else {
HXLINE(2011)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2012)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2012)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2012)		Float py;
HXDLIN(2012)		if ((norm1 == 0)) {
HXLINE(2012)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2012)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2014)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2016)			return true;
            		}
HXLINE(2019)		return false;
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,::hx::Null< bool >  __o_restrict){
            		bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2023___replaceSelectedText)
HXLINE(2024)		if (::hx::IsNull( value )) {
HXLINE(2024)			value = HX_("",00,00,00,00);
            		}
HXLINE(2025)		bool _hx_tmp;
HXDLIN(2025)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2025)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2025)			_hx_tmp = false;
            		}
HXDLIN(2025)		if (_hx_tmp) {
HXLINE(2025)			return;
            		}
HXLINE(2027)		int startIndex;
HXDLIN(2027)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2027)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2027)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2028)		int endIndex;
HXDLIN(2028)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2028)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2028)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2030)		bool _hx_tmp1;
HXDLIN(2030)		bool _hx_tmp2;
HXDLIN(2030)		if ((startIndex == endIndex)) {
HXLINE(2030)			_hx_tmp2 = (this->_hx___textEngine->maxChars > 0);
            		}
            		else {
HXLINE(2030)			_hx_tmp2 = false;
            		}
HXDLIN(2030)		if (_hx_tmp2) {
HXLINE(2030)			_hx_tmp1 = (this->_hx___text.length == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2030)			_hx_tmp1 = false;
            		}
HXDLIN(2030)		if (_hx_tmp1) {
HXLINE(2030)			return;
            		}
HXLINE(2032)		if ((startIndex > this->_hx___text.length)) {
HXLINE(2032)			startIndex = this->_hx___text.length;
            		}
HXLINE(2033)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2033)			endIndex = this->_hx___text.length;
            		}
HXLINE(2034)		if ((endIndex < startIndex)) {
HXLINE(2036)			int cache = endIndex;
HXLINE(2037)			endIndex = startIndex;
HXLINE(2038)			startIndex = cache;
            		}
HXLINE(2040)		if ((startIndex < 0)) {
HXLINE(2040)			startIndex = 0;
            		}
HXLINE(2042)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2046___replaceText)
HXLINE(2047)		bool _hx_tmp;
HXDLIN(2047)		bool _hx_tmp1;
HXDLIN(2047)		bool _hx_tmp2;
HXDLIN(2047)		if ((endIndex >= beginIndex)) {
HXLINE(2047)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(2047)			_hx_tmp2 = true;
            		}
HXDLIN(2047)		if (!(_hx_tmp2)) {
HXLINE(2047)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(2047)			_hx_tmp1 = true;
            		}
HXDLIN(2047)		if (!(_hx_tmp1)) {
HXLINE(2047)			_hx_tmp = ::hx::IsNull( newText );
            		}
            		else {
HXLINE(2047)			_hx_tmp = true;
            		}
HXDLIN(2047)		if (_hx_tmp) {
HXLINE(2047)			return;
            		}
HXLINE(2049)		if (restrict) {
HXLINE(2051)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2053)			if ((this->_hx___textEngine->maxChars > 0)) {
HXLINE(2055)				int removeLength = (endIndex - beginIndex);
HXLINE(2056)				int maxLength = ((this->_hx___textEngine->maxChars - this->_hx___text.length) + removeLength);
HXLINE(2058)				if ((maxLength <= 0)) {
HXLINE(2060)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2062)					if ((maxLength < newText.length)) {
HXLINE(2064)						newText = newText.substr(0,maxLength);
            					}
            				}
            			}
            		}
HXLINE(2069)		::String _hx_tmp3 = (this->_hx___text.substring(0,beginIndex) + newText);
HXDLIN(2069)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE(2071)		int offset = (newText.length - (endIndex - beginIndex));
HXLINE(2073)		int i = 0;
HXLINE(2074)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(2076)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2078)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2080)			if ((beginIndex == endIndex)) {
HXLINE(2082)				if ((range->start == range->end)) {
HXLINE(2085)					if ((range->start != 0)) {
HXLINE(2087)						::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),2087,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__replaceText",e1,ab,0d,aa)));
            					}
            					else {
HXLINE(2091)						 ::openfl::text::_internal::TextFormatRange range1 = range;
HXDLIN(2091)						range1->end = (range1->end + offset);
            					}
            				}
            				else {
HXLINE(2094)					if ((range->end >= beginIndex)) {
HXLINE(2098)						if ((range->start >= beginIndex)) {
HXLINE(2101)							 ::openfl::text::_internal::TextFormatRange range2 = range;
HXDLIN(2101)							range2->start = (range2->start + offset);
HXLINE(2102)							 ::openfl::text::_internal::TextFormatRange range3 = range;
HXDLIN(2102)							range3->end = (range3->end + offset);
            						}
            						else {
HXLINE(2104)							bool _hx_tmp4;
HXDLIN(2104)							if ((range->start < beginIndex)) {
HXLINE(2104)								_hx_tmp4 = (range->end >= endIndex);
            							}
            							else {
HXLINE(2104)								_hx_tmp4 = false;
            							}
HXDLIN(2104)							if (_hx_tmp4) {
HXLINE(2108)								 ::openfl::text::_internal::TextFormatRange range4 = range;
HXDLIN(2108)								range4->end = (range4->end + offset);
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(2113)				if ((range->end > beginIndex)) {
HXLINE(2117)					if ((range->start > endIndex)) {
HXLINE(2120)						 ::openfl::text::_internal::TextFormatRange range5 = range;
HXDLIN(2120)						range5->start = (range5->start + offset);
HXLINE(2121)						 ::openfl::text::_internal::TextFormatRange range6 = range;
HXDLIN(2121)						range6->end = (range6->end + offset);
            					}
            					else {
HXLINE(2123)						bool _hx_tmp5;
HXDLIN(2123)						if ((range->start <= beginIndex)) {
HXLINE(2123)							_hx_tmp5 = (range->end > endIndex);
            						}
            						else {
HXLINE(2123)							_hx_tmp5 = false;
            						}
HXDLIN(2123)						if (_hx_tmp5) {
HXLINE(2126)							 ::openfl::text::_internal::TextFormatRange range7 = range;
HXDLIN(2126)							range7->end = (range7->end + offset);
            						}
            						else {
HXLINE(2128)							bool _hx_tmp6;
HXDLIN(2128)							if ((range->start >= beginIndex)) {
HXLINE(2128)								_hx_tmp6 = (range->end <= endIndex);
            							}
            							else {
HXLINE(2128)								_hx_tmp6 = false;
            							}
HXDLIN(2128)							if (_hx_tmp6) {
HXLINE(2131)								::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2131)								i = (i - 1);
HXDLIN(2131)								this1->__SetField(HX_("__tempIndex",3e,e8,54,22),(i + 1),::hx::paccDynamic);
HXDLIN(2131)								{
HXLINE(2131)									int _g_current = 0;
HXDLIN(2131)									::cpp::VirtualArray _g_args = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(2131)									while((_g_current < _g_args->get_length())){
HXLINE(2131)										_g_current = (_g_current + 1);
HXDLIN(2131)										 ::Dynamic item = _g_args->__get((_g_current - 1));
HXDLIN(2131)										( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(item) ));
HXDLIN(2131)										::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            									}
            								}
HXDLIN(2131)								( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),1);
            							}
            							else {
HXLINE(2133)								bool _hx_tmp7;
HXDLIN(2133)								bool _hx_tmp8;
HXDLIN(2133)								if ((range->end > endIndex)) {
HXLINE(2133)									_hx_tmp8 = (range->start > beginIndex);
            								}
            								else {
HXLINE(2133)									_hx_tmp8 = false;
            								}
HXDLIN(2133)								if (_hx_tmp8) {
HXLINE(2133)									_hx_tmp7 = (range->start <= endIndex);
            								}
            								else {
HXLINE(2133)									_hx_tmp7 = false;
            								}
HXDLIN(2133)								if (_hx_tmp7) {
HXLINE(2137)									range->start = beginIndex;
HXLINE(2138)									 ::openfl::text::_internal::TextFormatRange range8 = range;
HXDLIN(2138)									range8->end = (range8->end + offset);
            								}
            								else {
HXLINE(2140)									bool _hx_tmp9;
HXDLIN(2140)									bool _hx_tmp10;
HXDLIN(2140)									if ((range->start < beginIndex)) {
HXLINE(2140)										_hx_tmp10 = (range->end > beginIndex);
            									}
            									else {
HXLINE(2140)										_hx_tmp10 = false;
            									}
HXDLIN(2140)									if (_hx_tmp10) {
HXLINE(2140)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(2140)										_hx_tmp9 = false;
            									}
HXDLIN(2140)									if (_hx_tmp9) {
HXLINE(2143)										range->end = beginIndex;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2147)			i = (i + 1);
            		}
HXLINE(2151)		if ((this->_hx___textEngine->textFormatRanges->get_length() == 0)) {
HXLINE(2154)			::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2154)			 ::openfl::text::TextFormat value = this->get_defaultTextFormat()->clone();
HXDLIN(2154)			( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value,0,newText.length));
            		}
            		else {
HXLINE(2156)			bool _hx_tmp11;
HXDLIN(2156)			if ((beginIndex == endIndex)) {
HXLINE(2156)				_hx_tmp11 = (this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start > 0);
            			}
            			else {
HXLINE(2156)				_hx_tmp11 = false;
            			}
HXDLIN(2156)			if (_hx_tmp11) {
HXLINE(2159)				::Dynamic this3 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2159)				 ::openfl::text::TextFormat value1 = this->get_defaultTextFormat()->clone();
HXDLIN(2159)				( ( ::openfl::_Vector::ObjectVector)(this3) )->unshift( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value1,0,this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start));
            			}
            			else {
HXLINE(2161)				bool _hx_tmp12;
HXDLIN(2161)				if ((beginIndex != endIndex)) {
HXLINE(2161)					::Dynamic this4 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2161)					 ::openfl::text::_internal::TextFormatRange _hx_tmp13 = ( ( ::openfl::_Vector::ObjectVector)(this4) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(2161)					_hx_tmp12 = (_hx_tmp13->end < this->_hx___text.length);
            				}
            				else {
HXLINE(2161)					_hx_tmp12 = false;
            				}
HXDLIN(2161)				if (_hx_tmp12) {
HXLINE(2164)					::Dynamic this5 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2164)					 ::openfl::text::TextFormat value2 = this->get_defaultTextFormat()->clone();
HXLINE(2165)					::Dynamic this6 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2165)					 ::openfl::text::_internal::TextFormatRange value3 = ( ( ::openfl::_Vector::ObjectVector)(this6) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2164)					( ( ::openfl::_Vector::ObjectVector)(this5) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value2,value3->end,this->_hx___text.length));
            				}
            			}
            		}
HXLINE(2168)		this->_hx___selectionIndex = (this->_hx___caretIndex = (beginIndex + newText.length));
HXLINE(2170)		this->_hx___dirty = true;
HXLINE(2171)		this->_hx___layoutDirty = true;
HXLINE(2172)		if (!(this->_hx___renderDirty)) {
HXLINE(2172)			this->_hx___renderDirty = true;
HXDLIN(2172)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2177___startCursorTimer)
HXDLIN(2177)		if (::hx::IsEq( this->get_type(),1 )) {
HXLINE(2179)			if (this->_hx___inputEnabled) {
HXLINE(2181)				this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),600);
HXLINE(2182)				this->_hx___showCursor = !(this->_hx___showCursor);
            			}
HXLINE(2184)			this->_hx___dirty = true;
HXLINE(2185)			if (!(this->_hx___renderDirty)) {
HXLINE(2185)				this->_hx___renderDirty = true;
HXDLIN(2185)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2187)			if (this->get_selectable()) {
HXLINE(2189)				this->_hx___dirty = true;
HXLINE(2190)				if (!(this->_hx___renderDirty)) {
HXLINE(2190)					this->_hx___renderDirty = true;
HXDLIN(2190)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2195___startTextInput)
HXLINE(2196)		if ((this->_hx___caretIndex < 0)) {
HXLINE(2198)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2199)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2202)		bool enableInput = true;
HXLINE(2204)		if (enableInput) {
HXLINE(2206)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2211___stopCursorTimer)
HXLINE(2212)		if (::hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2214)			this->_hx___cursorTimer->stop();
HXLINE(2215)			this->_hx___cursorTimer = null();
            		}
HXLINE(2218)		if (this->_hx___showCursor) {
HXLINE(2220)			this->_hx___showCursor = false;
HXLINE(2221)			this->_hx___dirty = true;
HXLINE(2222)			if (!(this->_hx___renderDirty)) {
HXLINE(2222)				this->_hx___renderDirty = true;
HXDLIN(2222)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2227___stopTextInput)
HXLINE(2228)		bool disableInput = true;
HXLINE(2230)		if (disableInput) {
HXLINE(2232)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2238___updateLayout)
HXDLIN(2238)		if (this->_hx___layoutDirty) {
HXLINE(2240)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2241)			this->_hx___textEngine->update();
HXLINE(2243)			if (::hx::IsNotEq( this->_hx___textEngine->autoSize,2 )) {
HXLINE(2245)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2247)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==0) ){
HXLINE(2253)						Float _hx_tmp = this->get_x();
HXDLIN(2253)						this->set_x((_hx_tmp + ((cacheWidth - this->_hx___textEngine->width) / ( (Float)(2) ))));
HXDLIN(2253)						goto _hx_goto_67;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(2250)						Float _hx_tmp1 = this->get_x();
HXDLIN(2250)						this->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2250)						goto _hx_goto_67;
            					}
            					/* default */{
            					}
            					_hx_goto_67:;
            				}
HXLINE(2259)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2262)			this->_hx___layoutDirty = false;
HXLINE(2264)			this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateMouseDrag(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2269___updateMouseDrag)
HXLINE(2270)		if (::hx::IsNull( this->stage )) {
HXLINE(2270)			return;
            		}
HXLINE(2272)		 ::openfl::geom::Rectangle bounds = this->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE(2274)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2274)		if ((_hx_tmp > (bounds->width - ( (Float)(1) )))) {
HXLINE(2276)			int _hx_tmp1 = this->get_scrollH();
HXDLIN(2276)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(2276)			this->set_scrollH((_hx_tmp1 + ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min(((_hx_tmp2 - bounds->width) * ((Float).1)),( (Float)(10) )),( (Float)(1) )))));
            		}
            		else {
HXLINE(2278)			if ((this->get_mouseX() < 1)) {
HXLINE(2280)				int _hx_tmp3 = this->get_scrollH();
HXDLIN(2280)				this->set_scrollH((_hx_tmp3 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseX() * ((Float)-.1)),( (Float)(10) )),( (Float)(1) )))));
            			}
            		}
HXLINE(2283)		this->_hx___mouseScrollVCounter++;
HXLINE(2285)		int _hx_tmp4 = this->_hx___mouseScrollVCounter;
HXDLIN(2285)		if ((_hx_tmp4 > (this->stage->get_frameRate() / ( (Float)(10) )))) {
HXLINE(2287)			Float _hx_tmp5 = this->get_mouseY();
HXDLIN(2287)			if ((_hx_tmp5 > (bounds->height - ( (Float)(2) )))) {
HXLINE(2289)				int _hx_tmp6 = this->get_scrollV();
HXDLIN(2289)				Float _hx_tmp7 = this->get_mouseY();
HXDLIN(2289)				Float _hx_tmp8 = (_hx_tmp6 + ::Math_obj::max(::Math_obj::min(((_hx_tmp7 - bounds->height) * ((Float).03)),( (Float)(5) )),( (Float)(1) )));
HXDLIN(2289)				this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(_hx_tmp8,( (Float)(this->get_maxScrollV()) ))));
            			}
            			else {
HXLINE(2291)				if ((this->get_mouseY() < 2)) {
HXLINE(2293)					int _hx_tmp9 = this->get_scrollV();
HXDLIN(2293)					this->set_scrollV((_hx_tmp9 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseY() * ((Float)-.03)),( (Float)(5) )),( (Float)(1) )))));
            				}
            			}
HXLINE(2295)			this->_hx___mouseScrollVCounter = 0;
            		}
HXLINE(2297)		this->stage_onMouseMove(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateMouseDrag,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2301___updateScrollH)
HXLINE(2302)		this->_hx___updateLayout();
HXLINE(2304)		 ::openfl::geom::Rectangle bounds = this->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE(2306)		Float _hx_tmp = this->get_textWidth();
HXDLIN(2306)		if ((_hx_tmp <= (bounds->width - ( (Float)(4) )))) {
HXLINE(2308)			this->set_scrollH(0);
HXLINE(2309)			return;
            		}
HXLINE(2312)		int tempScrollH = this->get_scrollH();
HXLINE(2316)		bool _hx_tmp1;
HXDLIN(2316)		if ((this->_hx___caretIndex != 0)) {
HXLINE(2316)			int _hx_tmp2 = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXDLIN(2316)			_hx_tmp1 = (_hx_tmp2 == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2316)			_hx_tmp1 = true;
            		}
HXDLIN(2316)		if (_hx_tmp1) {
HXLINE(2319)			tempScrollH = 0;
            		}
            		else {
HXLINE(2323)			 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2324)			bool written = false;
HXLINE(2326)			if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(2328)				written = this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
            			}
HXLINE(2330)			if (!(written)) {
HXLINE(2334)				this->_hx___getCharBoundaries((this->_hx___caretIndex - 1),caret);
HXLINE(2335)				 ::openfl::geom::Rectangle caret1 = caret;
HXDLIN(2335)				caret1->x = (caret1->x + caret->width);
            			}
HXLINE(2338)			while(true){
HXLINE(2338)				bool _hx_tmp3;
HXDLIN(2338)				if ((caret->x < tempScrollH)) {
HXLINE(2338)					_hx_tmp3 = (tempScrollH > 0);
            				}
            				else {
HXLINE(2338)					_hx_tmp3 = false;
            				}
HXDLIN(2338)				if (!(_hx_tmp3)) {
HXLINE(2338)					goto _hx_goto_70;
            				}
HXLINE(2340)				tempScrollH = (tempScrollH - 24);
            			}
            			_hx_goto_70:;
HXLINE(2342)			while((caret->x > ((tempScrollH + bounds->width) - ( (Float)(4) )))){
HXLINE(2344)				tempScrollH = (tempScrollH + 24);
            			}
HXLINE(2347)			::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            		}
HXLINE(2350)		bool _hx_tmp4;
HXDLIN(2350)		if ((tempScrollH > 0)) {
HXLINE(2350)			_hx_tmp4 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2350)			_hx_tmp4 = false;
            		}
HXDLIN(2350)		if (_hx_tmp4) {
HXLINE(2353)			int lineLength = this->getLineLength(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(2354)			int _hx_tmp5 = this->get_scrollH();
HXDLIN(2354)			if ((((_hx_tmp5 + bounds->width) - ( (Float)(4) )) > lineLength)) {
HXLINE(2356)				this->set_scrollH(::Math_obj::ceil(((( (Float)(lineLength) ) - bounds->width) + 4)));
            			}
            		}
HXLINE(2360)		if ((tempScrollH < 0)) {
HXLINE(2362)			this->set_scrollH(0);
            		}
            		else {
HXLINE(2364)			if ((tempScrollH > this->get_maxScrollH())) {
HXLINE(2366)				this->set_scrollH(this->get_maxScrollH());
            			}
            			else {
HXLINE(2370)				this->set_scrollH(tempScrollH);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2375___updateScrollV)
HXLINE(2376)		this->_hx___updateLayout();
HXLINE(2378)		Float _hx_tmp = this->get_textHeight();
HXDLIN(2378)		if ((_hx_tmp <= (this->get_height() - ( (Float)(4) )))) {
HXLINE(2380)			this->set_scrollV(1);
HXLINE(2381)			return;
            		}
HXLINE(2384)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(2386)		bool _hx_tmp1;
HXDLIN(2386)		if ((lineIndex == -1)) {
HXLINE(2386)			_hx_tmp1 = (this->_hx___caretIndex > 0);
            		}
            		else {
HXLINE(2386)			_hx_tmp1 = false;
            		}
HXDLIN(2386)		if (_hx_tmp1) {
HXLINE(2389)			lineIndex = (this->getLineIndexOfChar((this->_hx___caretIndex - 1)) + 1);
            		}
HXLINE(2392)		if (((lineIndex + 1) < this->get_scrollV())) {
HXLINE(2394)			this->set_scrollV((lineIndex + 1));
            		}
            		else {
HXLINE(2396)			if (((lineIndex + 1) > this->get_bottomScrollV())) {
HXLINE(2398)				int i = lineIndex;
HXDLIN(2398)				Float tempHeight = ((Float)0.0);
HXLINE(2400)				if ((i >= this->_hx___textEngine->lineHeights->get_length())) {
HXLINE(2402)					i = (this->_hx___textEngine->lineHeights->get_length() - 1);
            				}
HXLINE(2405)				while((i >= 0)){
HXLINE(2407)					tempHeight = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXLINE(2409)					if ((tempHeight > (this->get_height() - ( (Float)(4) )))) {
HXLINE(2411)						int i1;
HXDLIN(2411)						if (((tempHeight - this->get_height()) < 0)) {
HXLINE(2411)							i1 = 1;
            						}
            						else {
HXLINE(2411)							i1 = 2;
            						}
HXDLIN(2411)						i = (i + i1);
HXLINE(2412)						goto _hx_goto_73;
            					}
HXLINE(2414)					i = (i - 1);
            				}
            				_hx_goto_73:;
HXLINE(2426)				this->set_scrollV(i);
            			}
            			else {
HXLINE(2432)				this->set_scrollV(this->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollV,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2437___updateText)
HXLINE(2447)		this->_hx___textEngine->set_text(value);
HXLINE(2448)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2450)		bool _hx_tmp;
HXDLIN(2450)		if (::hx::IsNotNull( this->stage )) {
HXLINE(2450)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2450)			_hx_tmp = false;
            		}
HXDLIN(2450)		if (_hx_tmp) {
HXLINE(2454)			if ((this->_hx___text.length < this->_hx___selectionIndex)) {
HXLINE(2456)				this->_hx___selectionIndex = this->_hx___text.length;
            			}
HXLINE(2458)			if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(2460)				this->_hx___caretIndex = this->_hx___text.length;
            			}
            		}
            		else {
HXLINE(2467)			if (this->_hx___isHTML) {
HXLINE(2469)				this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            			}
            			else {
HXLINE(2473)				this->_hx___selectionIndex = 0;
HXLINE(2474)				this->_hx___caretIndex = 0;
            			}
            		}
HXLINE(2478)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2480)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2484)			int length = this->get_text().length;
HXLINE(2485)			::String mask = HX_("",00,00,00,00);
HXLINE(2487)			{
HXLINE(2487)				int _g = 0;
HXDLIN(2487)				int _g1 = length;
HXDLIN(2487)				while((_g < _g1)){
HXLINE(2487)					_g = (_g + 1);
HXDLIN(2487)					int i = (_g - 1);
HXLINE(2489)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2492)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2497___updateTransforms)
HXLINE(2498)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2499)		{
HXLINE(2499)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2499)			Float px = this->_hx___offsetX;
HXDLIN(2499)			Float py = this->_hx___offsetY;
HXDLIN(2499)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(2499)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2505_get_antiAliasType)
HXDLIN(2505)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2509_set_antiAliasType)
HXLINE(2510)		bool _hx_tmp = ::hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(2515)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2520_get_autoSize)
HXDLIN(2520)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2524_set_autoSize)
HXLINE(2525)		if (::hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2527)			this->_hx___dirty = true;
HXLINE(2528)			this->_hx___layoutDirty = true;
HXLINE(2529)			if (!(this->_hx___renderDirty)) {
HXLINE(2529)				this->_hx___renderDirty = true;
HXDLIN(2529)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2532)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2537_get_background)
HXDLIN(2537)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2541_set_background)
HXLINE(2542)		if ((value != this->_hx___textEngine->background)) {
HXLINE(2544)			this->_hx___dirty = true;
HXLINE(2545)			if (!(this->_hx___renderDirty)) {
HXLINE(2545)				this->_hx___renderDirty = true;
HXDLIN(2545)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2548)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2553_get_backgroundColor)
HXDLIN(2553)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2557_set_backgroundColor)
HXLINE(2558)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(2560)			this->_hx___dirty = true;
HXLINE(2561)			if (!(this->_hx___renderDirty)) {
HXLINE(2561)				this->_hx___renderDirty = true;
HXDLIN(2561)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2564)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2569_get_border)
HXDLIN(2569)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2573_set_border)
HXLINE(2574)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2576)			this->_hx___dirty = true;
HXLINE(2577)			if (!(this->_hx___renderDirty)) {
HXLINE(2577)				this->_hx___renderDirty = true;
HXDLIN(2577)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2580)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2585_get_borderColor)
HXDLIN(2585)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2589_set_borderColor)
HXLINE(2590)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2592)			this->_hx___dirty = true;
HXLINE(2593)			if (!(this->_hx___renderDirty)) {
HXLINE(2593)				this->_hx___renderDirty = true;
HXDLIN(2593)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2596)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2600_get_bottomScrollV)
HXLINE(2601)		this->_hx___updateLayout();
HXLINE(2603)		return this->_hx___textEngine->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2608_get_caretIndex)
HXDLIN(2608)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2613_get_defaultTextFormat)
HXDLIN(2613)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2617_set_defaultTextFormat)
HXLINE(2618)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2620)		this->_hx___layoutDirty = true;
HXLINE(2621)		this->_hx___dirty = true;
HXLINE(2622)		if (!(this->_hx___renderDirty)) {
HXLINE(2622)			this->_hx___renderDirty = true;
HXDLIN(2622)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2624)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2629_get_displayAsPassword)
HXDLIN(2629)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2633_set_displayAsPassword)
HXLINE(2634)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2636)			this->_hx___dirty = true;
HXLINE(2637)			this->_hx___layoutDirty = true;
HXLINE(2638)			if (!(this->_hx___renderDirty)) {
HXLINE(2638)				this->_hx___renderDirty = true;
HXDLIN(2638)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2640)			this->_hx___displayAsPassword = value;
HXLINE(2641)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2644)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2649_get_embedFonts)
HXDLIN(2649)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2661_set_embedFonts)
HXDLIN(2661)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2666_get_gridFitType)
HXDLIN(2666)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2678_set_gridFitType)
HXDLIN(2678)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2682_get_height)
HXLINE(2683)		this->_hx___updateLayout();
HXLINE(2684)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2684)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2688_set_height)
HXLINE(2689)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2691)			this->_hx___setTransformDirty();
HXLINE(2692)			this->_hx___dirty = true;
HXLINE(2693)			this->_hx___layoutDirty = true;
HXLINE(2694)			if (!(this->_hx___renderDirty)) {
HXLINE(2694)				this->_hx___renderDirty = true;
HXDLIN(2694)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2696)			this->_hx___textEngine->height = value;
            		}
HXLINE(2699)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2699)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2705_get_htmlText)
HXDLIN(2705)		if (this->_hx___isHTML) {
HXDLIN(2705)			return this->_hx___htmlText;
            		}
            		else {
HXDLIN(2705)			return this->_hx___text;
            		}
HXDLIN(2705)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2712_set_htmlText)
HXLINE(2713)		bool _hx_tmp;
HXDLIN(2713)		if (this->_hx___isHTML) {
HXLINE(2713)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2713)			_hx_tmp = true;
            		}
HXDLIN(2713)		if (_hx_tmp) {
HXLINE(2715)			this->_hx___dirty = true;
HXLINE(2716)			this->_hx___layoutDirty = true;
HXLINE(2717)			if (!(this->_hx___renderDirty)) {
HXLINE(2717)				this->_hx___renderDirty = true;
HXDLIN(2717)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2720)		this->_hx___isHTML = true;
HXLINE(2723)		if (this->condenseWhite) {
HXLINE(2725)			value =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\s+",b4,33,46,00),HX_("g",67,00,00,00))->replace(value,HX_(" ",20,00,00,00));
            		}
HXLINE(2728)		this->_hx___htmlText = value;
HXLINE(2731)		bool value1 = this->get_multiline();
HXDLIN(2731)		value = ::openfl::text::_internal::HTMLParser_obj::parse(value,value1,this->_hx___styleSheet,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2763)		this->_hx___updateText(value);
HXLINE(2766)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2770_get_length)
HXLINE(2771)		if (::hx::IsNotNull( this->_hx___text )) {
HXLINE(2773)			return this->_hx___text.length;
            		}
HXLINE(2776)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2781_get_maxChars)
HXDLIN(2781)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2785_set_maxChars)
HXLINE(2786)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2788)			this->_hx___textEngine->maxChars = value;
HXLINE(2790)			this->_hx___dirty = true;
HXLINE(2791)			this->_hx___layoutDirty = true;
HXLINE(2792)			if (!(this->_hx___renderDirty)) {
HXLINE(2792)				this->_hx___renderDirty = true;
HXDLIN(2792)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2795)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2799_get_maxScrollH)
HXLINE(2800)		this->_hx___updateLayout();
HXLINE(2802)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2806_get_maxScrollV)
HXLINE(2807)		this->_hx___updateLayout();
HXLINE(2809)		return this->_hx___textEngine->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2814_get_mouseWheelEnabled)
HXDLIN(2814)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2819_set_mouseWheelEnabled)
HXDLIN(2819)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2824_get_multiline)
HXDLIN(2824)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2829_set_multiline)
HXDLIN(2829)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2833_get_numLines)
HXLINE(2834)		this->_hx___updateLayout();
HXLINE(2836)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2841_get_restrict)
HXDLIN(2841)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2845_set_restrict)
HXLINE(2846)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2848)			this->_hx___textEngine->set_restrict(value);
HXLINE(2849)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2852)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2857_get_scrollH)
HXDLIN(2857)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2861_set_scrollH)
HXLINE(2862)		this->_hx___updateLayout();
HXLINE(2864)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2864)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2865)		if ((value < 0)) {
HXLINE(2865)			value = 0;
            		}
HXLINE(2867)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2869)			this->_hx___dirty = true;
HXLINE(2870)			if (!(this->_hx___renderDirty)) {
HXLINE(2870)				this->_hx___renderDirty = true;
HXDLIN(2870)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2871)			this->_hx___textEngine->scrollH = value;
HXLINE(2872)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2875)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2880_get_scrollV)
HXDLIN(2880)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2884_set_scrollV)
HXLINE(2885)		this->_hx___updateLayout();
HXLINE(2887)		if ((value > this->_hx___textEngine->get_maxScrollV())) {
HXLINE(2887)			value = this->_hx___textEngine->get_maxScrollV();
            		}
HXLINE(2888)		if ((value < 1)) {
HXLINE(2888)			value = 1;
            		}
HXLINE(2890)		bool _hx_tmp;
HXDLIN(2890)		if ((value == this->_hx___textEngine->get_scrollV())) {
HXLINE(2890)			_hx_tmp = (this->_hx___textEngine->get_scrollV() == 0);
            		}
            		else {
HXLINE(2890)			_hx_tmp = true;
            		}
HXDLIN(2890)		if (_hx_tmp) {
HXLINE(2892)			this->_hx___dirty = true;
HXLINE(2893)			if (!(this->_hx___renderDirty)) {
HXLINE(2893)				this->_hx___renderDirty = true;
HXDLIN(2893)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2894)			this->_hx___textEngine->set_scrollV(value);
HXLINE(2895)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2898)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2903_get_selectable)
HXDLIN(2903)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2907_set_selectable)
HXLINE(2908)		bool _hx_tmp;
HXDLIN(2908)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2908)			_hx_tmp = ::hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2908)			_hx_tmp = false;
            		}
HXDLIN(2908)		if (_hx_tmp) {
HXLINE(2910)			bool _hx_tmp1;
HXDLIN(2910)			if (::hx::IsNotNull( this->stage )) {
HXLINE(2910)				_hx_tmp1 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2910)				_hx_tmp1 = false;
            			}
HXDLIN(2910)			if (_hx_tmp1) {
HXLINE(2912)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2914)				if (!(value)) {
HXLINE(2916)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2920)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2925_get_selectionBeginIndex)
HXDLIN(2925)		return ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2930_get_selectionEndIndex)
HXDLIN(2930)		return ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2935_get_sharpness)
HXDLIN(2935)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2939_set_sharpness)
HXLINE(2940)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2942)			this->_hx___dirty = true;
HXLINE(2943)			if (!(this->_hx___renderDirty)) {
HXLINE(2943)				this->_hx___renderDirty = true;
HXDLIN(2943)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2946)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

 ::openfl::text::StyleSheet TextField_obj::get_styleSheet(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2951_get_styleSheet)
HXDLIN(2951)		return this->_hx___styleSheet;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_styleSheet,return )

 ::openfl::text::StyleSheet TextField_obj::set_styleSheet( ::openfl::text::StyleSheet value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2955_set_styleSheet)
HXLINE(2956)		bool _hx_tmp;
HXDLIN(2956)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(2956)			_hx_tmp = ::hx::IsNull( value );
            		}
            		else {
HXLINE(2956)			_hx_tmp = false;
            		}
HXDLIN(2956)		if (!(_hx_tmp)) {
HXLINE(2961)			if (::hx::IsNotNull( value )) {
HXLINE(2965)				bool _hx_tmp1;
HXDLIN(2965)				if (this->_hx___isHTML) {
HXLINE(2965)					_hx_tmp1 = ::hx::IsInstanceNotEq( value,this->_hx___styleSheet );
            				}
            				else {
HXLINE(2965)					_hx_tmp1 = false;
            				}
HXDLIN(2965)				if (_hx_tmp1) {
HXLINE(2967)					this->_hx___dirty = true;
HXLINE(2968)					this->_hx___layoutDirty = true;
HXLINE(2969)					if (!(this->_hx___renderDirty)) {
HXLINE(2969)						this->_hx___renderDirty = true;
HXDLIN(2969)						this->_hx___setParentRenderDirty();
            					}
HXLINE(2970)					this->set_htmlText(this->_hx___htmlText);
            				}
HXLINE(2974)				this->set_type(0);
            			}
            		}
HXLINE(2976)		return (this->_hx___styleSheet = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_styleSheet,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2981_get_tabEnabled)
HXDLIN(2981)		if (::hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2981)			return ::hx::IsEq( this->_hx___textEngine->type,1 );
            		}
            		else {
HXDLIN(2981)			return ( (bool)(this->_hx___tabEnabled) );
            		}
HXDLIN(2981)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2986_get_text)
HXDLIN(2986)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2990_set_text)
HXLINE(2991)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(2993)			return this->set_htmlText(value);
            		}
HXLINE(2996)		bool _hx_tmp;
HXDLIN(2996)		if (!(this->_hx___isHTML)) {
HXLINE(2996)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2996)			_hx_tmp = true;
            		}
HXDLIN(2996)		if (_hx_tmp) {
HXLINE(2998)			this->_hx___dirty = true;
HXLINE(2999)			this->_hx___layoutDirty = true;
HXLINE(3000)			if (!(this->_hx___renderDirty)) {
HXLINE(3000)				this->_hx___renderDirty = true;
HXDLIN(3000)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(3004)			return value;
            		}
HXLINE(3007)		if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(3009)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3009)			int deleteCount = (this->_hx___textEngine->textFormatRanges->get_length() - 1);
HXDLIN(3009)			this1->__SetField(HX_("__tempIndex",3e,e8,54,22),1,::hx::paccDynamic);
HXDLIN(3009)			{
HXLINE(3009)				int _g_current = 0;
HXDLIN(3009)				::cpp::VirtualArray _g_args = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(3009)				while((_g_current < _g_args->get_length())){
HXLINE(3009)					_g_current = (_g_current + 1);
HXDLIN(3009)					 ::Dynamic item = _g_args->__get((_g_current - 1));
HXDLIN(3009)					( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(item) ));
HXDLIN(3009)					::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            				}
            			}
HXDLIN(3009)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount);
            		}
HXLINE(3012)		::String utfValue = value;
HXLINE(3013)		 ::openfl::text::_internal::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(3014)		range->format = this->_hx___textFormat;
HXLINE(3015)		range->start = 0;
HXLINE(3016)		range->end = utfValue.length;
HXLINE(3018)		this->_hx___isHTML = false;
HXLINE(3020)		this->_hx___updateText(value);
HXLINE(3022)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3027_get_textColor)
HXDLIN(3027)		return ( (int)(this->_hx___textFormat->color) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3031_set_textColor)
HXLINE(3032)		if (::hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(3034)			this->_hx___dirty = true;
HXLINE(3035)			if (!(this->_hx___renderDirty)) {
HXLINE(3035)				this->_hx___renderDirty = true;
HXDLIN(3035)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3038)		{
HXLINE(3038)			 ::Dynamic range = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(3038)			while(( (bool)(range->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3038)				 ::openfl::text::_internal::TextFormatRange range1 = ( ( ::openfl::text::_internal::TextFormatRange)(range->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3040)				range1->format->color = value;
            			}
            		}
HXLINE(3043)		return ( (int)((this->_hx___textFormat->color = value)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3047_get_textWidth)
HXLINE(3048)		this->_hx___updateLayout();
HXLINE(3049)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3053_get_textHeight)
HXLINE(3054)		this->_hx___updateLayout();
HXLINE(3055)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3060_get_type)
HXDLIN(3060)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3064_set_type)
HXLINE(3065)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(3069)			value = 0;
            		}
HXLINE(3072)		if (::hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3076)			this->_hx___textEngine->type = value;
HXLINE(3077)			if (::hx::IsEq( value,1 )) {
HXLINE(3079)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3081)				this->this_onFocusIn(null());
HXLINE(3082)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3086)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3088)				this->_hx___stopTextInput();
HXLINE(3089)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3092)			this->_hx___dirty = true;
HXLINE(3093)			this->_hx___layoutDirty = true;
HXLINE(3094)			if (!(this->_hx___renderDirty)) {
HXLINE(3094)				this->_hx___renderDirty = true;
HXDLIN(3094)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3097)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3101_get_width)
HXLINE(3102)		this->_hx___updateLayout();
HXLINE(3103)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3107_set_width)
HXLINE(3108)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3110)			this->_hx___setTransformDirty();
HXLINE(3111)			this->_hx___dirty = true;
HXLINE(3112)			this->_hx___layoutDirty = true;
HXLINE(3113)			if (!(this->_hx___renderDirty)) {
HXLINE(3113)				this->_hx___renderDirty = true;
HXDLIN(3113)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3115)			this->_hx___textEngine->width = value;
            		}
HXLINE(3118)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3123_get_wordWrap)
HXDLIN(3123)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3127_set_wordWrap)
HXLINE(3128)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3130)			this->_hx___dirty = true;
HXLINE(3131)			this->_hx___layoutDirty = true;
HXLINE(3132)			if (!(this->_hx___renderDirty)) {
HXLINE(3132)				this->_hx___renderDirty = true;
HXDLIN(3132)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3135)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3140_get_x)
HXDLIN(3140)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3144_set_x)
HXLINE(3145)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3145)			this->_hx___setTransformDirty();
            		}
HXLINE(3146)		this->_hx___transform->tx = (value - this->_hx___offsetX);
HXLINE(3147)		return value;
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3152_get_y)
HXDLIN(3152)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3156_set_y)
HXLINE(3157)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3157)			this->_hx___setTransformDirty();
            		}
HXLINE(3158)		this->_hx___transform->ty = (value - this->_hx___offsetY);
HXLINE(3159)		return value;
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3164_stage_onMouseMove)
HXLINE(3165)		if (::hx::IsNull( this->stage )) {
HXLINE(3165)			return;
            		}
HXLINE(3167)		bool _hx_tmp;
HXDLIN(3167)		if (this->get_selectable()) {
HXLINE(3167)			_hx_tmp = (this->_hx___selectionIndex >= 0);
            		}
            		else {
HXLINE(3167)			_hx_tmp = false;
            		}
HXDLIN(3167)		if (_hx_tmp) {
HXLINE(3169)			this->_hx___updateLayout();
HXLINE(3171)			Float position = this->get_mouseX();
HXDLIN(3171)			Float position1 = (position + this->get_scrollH());
HXDLIN(3171)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(3173)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(3175)				this->_hx___caretIndex = position2;
HXLINE(3177)				bool setDirty = true;
HXLINE(3190)				if (setDirty) {
HXLINE(3192)					this->_hx___dirty = true;
HXLINE(3193)					if (!(this->_hx___renderDirty)) {
HXLINE(3193)						this->_hx___renderDirty = true;
HXDLIN(3193)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3200_stage_onMouseUp)
HXLINE(3201)		 ::openfl::display::Stage stage = ( ( ::openfl::display::Stage)(event->currentTarget) );
HXLINE(3203)		stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
HXLINE(3204)		stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3205)		stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3207)		if (::hx::IsInstanceNotEq( this->stage,stage )) {
HXLINE(3207)			return;
            		}
HXLINE(3209)		if (::hx::IsInstanceEq( stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3211)			this->_hx___getWorldTransform();
HXLINE(3212)			this->_hx___updateLayout();
HXLINE(3214)			Float upPos = this->get_mouseX();
HXDLIN(3214)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(3214)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(3215)			int leftPos = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3216)			int rightPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3221)			this->_hx___selectionIndex = leftPos;
HXLINE(3222)			this->_hx___caretIndex = rightPos;
HXLINE(3224)			if (this->_hx___inputEnabled) {
HXLINE(3226)				this->this_onFocusIn(null());
HXLINE(3228)				this->_hx___stopCursorTimer();
HXLINE(3229)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3243_this_onAddedToStage)
HXDLIN(3243)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onEnterFrame( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3248_this_onEnterFrame)
HXDLIN(3248)		this->_hx___updateMouseDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onEnterFrame,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3254_this_onFocusIn)
HXDLIN(3254)		bool _hx_tmp;
HXDLIN(3254)		bool _hx_tmp1;
HXDLIN(3254)		if (::hx::IsEq( this->get_type(),1 )) {
HXDLIN(3254)			_hx_tmp1 = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3254)			_hx_tmp1 = false;
            		}
HXDLIN(3254)		if (_hx_tmp1) {
HXDLIN(3254)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3254)			_hx_tmp = false;
            		}
HXDLIN(3254)		if (_hx_tmp) {
HXLINE(3256)			this->_hx___startTextInput();
            		}
            		else {
HXLINE(3258)			bool _hx_tmp2;
HXDLIN(3258)			bool _hx_tmp3;
HXDLIN(3258)			bool _hx_tmp4;
HXDLIN(3258)			if (::hx::IsNotEq( this->get_type(),1 )) {
HXLINE(3258)				_hx_tmp4 = this->get_selectable();
            			}
            			else {
HXLINE(3258)				_hx_tmp4 = false;
            			}
HXDLIN(3258)			if (_hx_tmp4) {
HXLINE(3258)				_hx_tmp3 = ::hx::IsNotNull( this->stage );
            			}
            			else {
HXLINE(3258)				_hx_tmp3 = false;
            			}
HXDLIN(3258)			if (_hx_tmp3) {
HXLINE(3258)				_hx_tmp2 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(3258)				_hx_tmp2 = false;
            			}
HXDLIN(3258)			if (_hx_tmp2) {
HXLINE(3260)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3265_this_onFocusOut)
HXLINE(3266)		this->_hx___stopCursorTimer();
HXLINE(3270)		this->_hx___stopTextInput();
HXLINE(3272)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3274)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3275)			this->_hx___dirty = true;
HXLINE(3276)			if (!(this->_hx___renderDirty)) {
HXLINE(3276)				this->_hx___renderDirty = true;
HXDLIN(3276)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3283_this_onKeyDown)
HXDLIN(3283)		bool _hx_tmp;
HXDLIN(3283)		bool _hx_tmp1;
HXDLIN(3283)		bool _hx_tmp2;
HXDLIN(3283)		if (this->get_selectable()) {
HXDLIN(3283)			_hx_tmp2 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(3283)			_hx_tmp2 = false;
            		}
HXDLIN(3283)		if (_hx_tmp2) {
HXDLIN(3283)			_hx_tmp1 = (event->keyCode == 67);
            		}
            		else {
HXDLIN(3283)			_hx_tmp1 = false;
            		}
HXDLIN(3283)		if (_hx_tmp1) {
HXDLIN(3283)			if (!(event->commandKey)) {
HXDLIN(3283)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3283)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3283)			_hx_tmp = false;
            		}
HXDLIN(3283)		if (_hx_tmp) {
HXLINE(3285)			bool _hx_tmp3;
HXDLIN(3285)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3285)				_hx_tmp3 = !(this->get_displayAsPassword());
            			}
            			else {
HXLINE(3285)				_hx_tmp3 = false;
            			}
HXDLIN(3285)			if (_hx_tmp3) {
HXLINE(3287)				::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3294_this_onMouseDown)
HXLINE(3295)		bool _hx_tmp;
HXDLIN(3295)		if (!(this->get_selectable())) {
HXLINE(3295)			_hx_tmp = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3295)			_hx_tmp = false;
            		}
HXDLIN(3295)		if (_hx_tmp) {
HXLINE(3295)			return;
            		}
HXLINE(3297)		this->_hx___updateLayout();
HXLINE(3299)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3299)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3299)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(3300)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3303)		{
HXLINE(3304)			this->_hx___dirty = true;
HXLINE(3305)			if (!(this->_hx___renderDirty)) {
HXLINE(3305)				this->_hx___renderDirty = true;
HXDLIN(3305)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3310)		if (::hx::IsNull( this->stage )) {
HXLINE(3310)			return;
            		}
HXLINE(3313)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
HXLINE(3315)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3316)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::this_onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3321_this_onMouseWheel)
HXDLIN(3321)		if (this->get_mouseWheelEnabled()) {
HXLINE(3323)			int _hx_tmp = this->get_scrollV();
HXDLIN(3323)			int _hx_tmp1 = (_hx_tmp - event->delta);
HXDLIN(3323)			this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(( (Float)(_hx_tmp1) ),( (Float)(this->get_maxScrollV()) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseWheel,(void))

void TextField_obj::this_onDoubleClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3329_this_onDoubleClick)
HXDLIN(3329)		if (this->get_selectable()) {
HXLINE(3331)			this->_hx___updateLayout();
HXLINE(3333)			::Array< ::String > delimiters = ::Array_obj< ::String >::fromData( _hx_array_data_efd5a8ca_158,13);
HXLINE(3335)			::String txtStr = this->_hx___text;
HXLINE(3336)			int leftPos = -1;
HXLINE(3337)			int rightPos = txtStr.length;
HXLINE(3338)			int pos = 0;
HXLINE(3339)			int startPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(1) )));
HXLINE(3340)			bool _hx_tmp;
HXDLIN(3340)			bool _hx_tmp1;
HXDLIN(3340)			if ((txtStr.length > 0)) {
HXLINE(3340)				_hx_tmp1 = (this->_hx___caretIndex >= 0);
            			}
            			else {
HXLINE(3340)				_hx_tmp1 = false;
            			}
HXDLIN(3340)			if (_hx_tmp1) {
HXLINE(3340)				_hx_tmp = (rightPos >= this->_hx___caretIndex);
            			}
            			else {
HXLINE(3340)				_hx_tmp = false;
            			}
HXDLIN(3340)			if (_hx_tmp) {
HXLINE(3342)				{
HXLINE(3342)					int _g = 0;
HXDLIN(3342)					while((_g < delimiters->length)){
HXLINE(3342)						::String c = delimiters->__get(_g);
HXDLIN(3342)						_g = (_g + 1);
HXLINE(3344)						pos = txtStr.lastIndexOf(c,(startPos - 1));
HXLINE(3345)						if ((pos > leftPos)) {
HXLINE(3345)							leftPos = (pos + 1);
            						}
HXLINE(3347)						pos = txtStr.indexOf(c,startPos);
HXLINE(3348)						bool _hx_tmp2;
HXDLIN(3348)						if ((pos < rightPos)) {
HXLINE(3348)							_hx_tmp2 = (pos != -1);
            						}
            						else {
HXLINE(3348)							_hx_tmp2 = false;
            						}
HXDLIN(3348)						if (_hx_tmp2) {
HXLINE(3348)							rightPos = pos;
            						}
            					}
            				}
HXLINE(3351)				if ((leftPos != rightPos)) {
HXLINE(3353)					this->setSelection(leftPos,rightPos);
HXLINE(3355)					bool setDirty = true;
HXLINE(3366)					if (setDirty) {
HXLINE(3368)						this->_hx___dirty = true;
HXLINE(3369)						if (!(this->_hx___renderDirty)) {
HXLINE(3369)							this->_hx___renderDirty = true;
HXDLIN(3369)							this->_hx___setParentRenderDirty();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onDoubleClick,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3382_window_onKeyDown)
HXDLIN(3382)		switch((int)(key)){
            			case (int)8: {
HXLINE(3405)				bool _hx_tmp;
HXDLIN(3405)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3405)					_hx_tmp = (this->_hx___caretIndex > 0);
            				}
            				else {
HXLINE(3405)					_hx_tmp = false;
            				}
HXDLIN(3405)				if (_hx_tmp) {
HXLINE(3407)					this->_hx___selectionIndex = (this->_hx___caretIndex - 1);
            				}
HXLINE(3410)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3412)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3413)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3415)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3419)					this->_hx___stopCursorTimer();
HXLINE(3420)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3596)				if (this->get_selectable()) {
HXLINE(3597)					bool _hx_tmp1;
HXDLIN(3597)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3597)						_hx_tmp1 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3597)						_hx_tmp1 = false;
            					}
HXDLIN(3597)					if (_hx_tmp1) {
HXLINE(3599)						this->setSelection(0,this->_hx___text.length);
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3546)				bool _hx_tmp2;
HXDLIN(3546)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3546)					_hx_tmp2 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3546)					_hx_tmp2 = false;
            				}
HXDLIN(3546)				if (_hx_tmp2) {
HXLINE(3548)					bool _hx_tmp3;
HXDLIN(3548)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3548)						_hx_tmp3 = !(this->get_displayAsPassword());
            					}
            					else {
HXLINE(3548)						_hx_tmp3 = false;
            					}
HXDLIN(3548)					if (_hx_tmp3) {
HXLINE(3550)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3572)				bool _hx_tmp4;
HXDLIN(3572)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3572)					_hx_tmp4 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3572)					_hx_tmp4 = false;
            				}
HXDLIN(3572)				if (_hx_tmp4) {
HXLINE(3574)					if (::hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3576)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3578)						this->dispatchEvent(te);
HXLINE(3580)						if (!(te->isDefaultPrevented())) {
HXLINE(3582)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3584)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3591)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3591)					( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3557)				bool _hx_tmp5;
HXDLIN(3557)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3557)					_hx_tmp5 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            				}
            				else {
HXLINE(3557)					_hx_tmp5 = false;
            				}
HXDLIN(3557)				if (_hx_tmp5) {
HXLINE(3559)					bool _hx_tmp6;
HXDLIN(3559)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3559)						_hx_tmp6 = !(this->get_displayAsPassword());
            					}
            					else {
HXLINE(3559)						_hx_tmp6 = false;
            					}
HXDLIN(3559)					if (_hx_tmp6) {
HXLINE(3561)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3563)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3564)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3424)				bool _hx_tmp7;
HXDLIN(3424)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3424)					_hx_tmp7 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(3424)					_hx_tmp7 = false;
            				}
HXDLIN(3424)				if (_hx_tmp7) {
HXLINE(3426)					this->_hx___selectionIndex = (this->_hx___caretIndex + 1);
            				}
HXLINE(3429)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3431)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3432)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3434)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3438)					this->_hx___stopCursorTimer();
HXLINE(3439)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3510)				if (this->get_selectable()) {
HXLINE(3511)					bool _hx_tmp8;
HXDLIN(3511)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3511)						_hx_tmp8 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3511)						_hx_tmp8 = false;
            					}
HXDLIN(3511)					if (_hx_tmp8) {
HXLINE(3513)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3517)						this->_hx___caretBeginningOfLine();
            					}
HXLINE(3520)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3522)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3525)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3527)				if (this->get_selectable()) {
HXLINE(3528)					bool _hx_tmp9;
HXDLIN(3528)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3528)						_hx_tmp9 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3528)						_hx_tmp9 = false;
            					}
HXDLIN(3528)					if (_hx_tmp9) {
HXLINE(3530)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3534)						this->_hx___caretEndOfLine();
            					}
HXLINE(3537)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3539)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3542)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3459)				if (this->get_selectable()) {
HXLINE(3460)					bool _hx_tmp10;
HXDLIN(3460)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3460)						_hx_tmp10 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3460)						_hx_tmp10 = false;
            					}
HXDLIN(3460)					if (_hx_tmp10) {
HXLINE(3462)						this->_hx___caretBeginningOfNextLine();
            					}
            					else {
HXLINE(3466)						this->_hx___caretNextCharacter();
            					}
HXLINE(3469)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3471)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3474)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3442)				if (this->get_selectable()) {
HXLINE(3443)					bool _hx_tmp11;
HXDLIN(3443)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3443)						_hx_tmp11 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3443)						_hx_tmp11 = false;
            					}
HXDLIN(3443)					if (_hx_tmp11) {
HXLINE(3445)						this->_hx___caretBeginningOfPreviousLine();
            					}
            					else {
HXLINE(3449)						this->_hx___caretPreviousCharacter();
            					}
HXLINE(3452)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3454)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3457)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3476)				if (this->get_selectable()) {
HXLINE(3477)					bool _hx_tmp12;
HXDLIN(3477)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3477)						_hx_tmp12 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3477)						_hx_tmp12 = false;
            					}
HXDLIN(3477)					if (_hx_tmp12) {
HXLINE(3479)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3483)						this->_hx___caretNextLine();
            					}
HXLINE(3486)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3488)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3491)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3493)				if (this->get_selectable()) {
HXLINE(3494)					bool _hx_tmp13;
HXDLIN(3494)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3494)						_hx_tmp13 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier));
            					}
            					else {
HXLINE(3494)						_hx_tmp13 = false;
            					}
HXDLIN(3494)					if (_hx_tmp13) {
HXLINE(3496)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3500)						this->_hx___caretPreviousLine();
            					}
HXLINE(3503)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3505)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3508)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3385)				if (this->_hx___textEngine->multiline) {
HXLINE(3387)					 ::openfl::events::TextEvent te1 =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3389)					this->dispatchEvent(te1);
HXLINE(3391)					if (!(te1->isDefaultPrevented())) {
HXLINE(3393)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3395)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            				else {
HXLINE(3400)					this->_hx___stopCursorTimer();
HXLINE(3401)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3608_window_onTextInput)
HXLINE(3609)		this->_hx___replaceSelectedText(value,true);
HXLINE(3612)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


::hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	::hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return ::hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return ::hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return ::hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return ::hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_styleSheet() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return ::hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return ::hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return ::hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return ::hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return ::hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return ::hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return ::hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return ::hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return ::hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return ::hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return ::hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return ::hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return ::hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { return ::hx::Val( _hx___styleSheet ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return ::hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return ::hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return ::hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return ::hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return ::hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return ::hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return ::hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return ::hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { return ::hx::Val( condenseWhite ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return ::hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return ::hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return ::hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return ::hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return ::hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return ::hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return ::hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return ::hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return ::hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return ::hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return ::hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return ::hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return ::hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return ::hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return ::hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return ::hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return ::hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return ::hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return ::hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return ::hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return ::hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleSheet") ) { return ::hx::Val( get_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_styleSheet") ) { return ::hx::Val( set_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return ::hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return ::hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return ::hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return ::hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return ::hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return ::hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollV") ) { return ::hx::Val( _hx___updateScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return ::hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return ::hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return ::hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return ::hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return ::hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return ::hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return ::hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return ::hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return ::hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return ::hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return ::hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return ::hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return ::hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return ::hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMouseDrag") ) { return ::hx::Val( _hx___updateMouseDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return ::hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return ::hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return ::hx::Val( stage_onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return ::hx::Val( this_onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseWheel") ) { return ::hx::Val( this_onMouseWheel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return ::hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return ::hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return ::hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return ::hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onDoubleClick") ) { return ::hx::Val( this_onDoubleClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return ::hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return ::hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return ::hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return ::hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return ::hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return ::hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return ::hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return ::hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return ::hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return ::hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return ::hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return ::hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { return ::hx::Val( _hx___mouseScrollVCounter ); }
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return ::hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return ::hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return ::hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return ::hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return ::hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return ::hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return ::hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return ::hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return ::hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return ::hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfNextLine") ) { return ::hx::Val( _hx___caretBeginningOfNextLine_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return ::hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfPreviousLine") ) { return ::hx::Val( _hx___caretBeginningOfPreviousLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

::hx::Val TextField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_styleSheet(inValue.Cast<  ::openfl::text::StyleSheet >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { _hx___styleSheet=inValue.Cast<  ::openfl::text::StyleSheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::text::_internal::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { condenseWhite=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { _hx___mouseScrollVCounter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("condenseWhite",4c,f5,1f,32));
	outFields->push(HX_("defaultTextFormat",e5,c7,e0,0a));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("htmlText",b8,1f,38,10));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectionBeginIndex",95,7f,17,d7));
	outFields->push(HX_("selectionEndIndex",a3,0d,42,4b));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("styleSheet",ae,3b,16,fc));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("__bounds",95,f1,4c,0e));
	outFields->push(HX_("__caretIndex",af,31,ef,15));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__dirty",f2,a8,2e,44));
	outFields->push(HX_("__displayAsPassword",ef,f3,86,9d));
	outFields->push(HX_("__domRender",58,38,ba,4f));
	outFields->push(HX_("__inputEnabled",b7,e0,1d,37));
	outFields->push(HX_("__isHTML",75,61,94,0a));
	outFields->push(HX_("__layoutDirty",e8,e9,31,d3));
	outFields->push(HX_("__mouseScrollVCounter",38,bc,63,27));
	outFields->push(HX_("__mouseWheelEnabled",cb,3f,44,18));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__selectionIndex",46,0a,c3,7d));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__styleSheet",ce,b6,a9,34));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__textEngine",6f,43,08,6c));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(TextField_obj,condenseWhite),HX_("condenseWhite",4c,f5,1f,32)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextField_obj,_hx___bounds),HX_("__bounds",95,f1,4c,0e)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_("__caretIndex",af,31,ef,15)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_("__dirty",f2,a8,2e,44)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_("__displayAsPassword",ef,f3,86,9d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_("__domRender",58,38,ba,4f)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_("__inputEnabled",b7,e0,1d,37)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_("__isHTML",75,61,94,0a)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_("__layoutDirty",e8,e9,31,d3)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___mouseScrollVCounter),HX_("__mouseScrollVCounter",38,bc,63,27)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_("__mouseWheelEnabled",cb,3f,44,18)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_("__selectionIndex",46,0a,c3,7d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::text::StyleSheet */ ,(int)offsetof(TextField_obj,_hx___styleSheet),HX_("__styleSheet",ce,b6,a9,34)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{::hx::fsObject /*  ::openfl::text::_internal::TextEngine */ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_("__textEngine",6f,43,08,6c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_("__defaultTextFormat",c5,f0,d0,bd)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_("__missingFontWarning",a7,0d,0e,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("condenseWhite",4c,f5,1f,32),
	HX_("__bounds",95,f1,4c,0e),
	HX_("__caretIndex",af,31,ef,15),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__dirty",f2,a8,2e,44),
	HX_("__displayAsPassword",ef,f3,86,9d),
	HX_("__domRender",58,38,ba,4f),
	HX_("__inputEnabled",b7,e0,1d,37),
	HX_("__isHTML",75,61,94,0a),
	HX_("__layoutDirty",e8,e9,31,d3),
	HX_("__mouseScrollVCounter",38,bc,63,27),
	HX_("__mouseWheelEnabled",cb,3f,44,18),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__selectionIndex",46,0a,c3,7d),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__styleSheet",ce,b6,a9,34),
	HX_("__text",cd,2f,f2,fb),
	HX_("__htmlText",d8,92,70,b3),
	HX_("__textEngine",6f,43,08,6c),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("appendText",a7,cf,05,5b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getCharIndexAtPoint",17,ee,9c,aa),
	HX_("getFirstCharInParagraph",f9,5c,3d,08),
	HX_("getLineIndexAtPoint",35,dc,50,98),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineLength",30,ec,21,d0),
	HX_("getLineMetrics",b9,ab,c6,f2),
	HX_("getLineOffset",dd,ee,59,91),
	HX_("getLineText",77,dd,16,b0),
	HX_("getParagraphLength",fe,0e,4e,c4),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("replaceText",01,6b,95,61),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("setTextFormat",06,4e,f7,d5),
	HX_("__allowMouseFocus",3c,92,71,07),
	HX_("__caretBeginningOfLine",45,c9,47,fd),
	HX_("__caretBeginningOfNextLine",58,ec,35,93),
	HX_("__caretBeginningOfPreviousLine",1c,d2,e4,ff),
	HX_("__caretEndOfLine",03,74,b1,5c),
	HX_("__caretNextCharacter",d3,7b,4f,ea),
	HX_("__caretNextLine",0a,68,ad,0d),
	HX_("__caretPreviousCharacter",8f,ce,6c,11),
	HX_("__caretPreviousLine",ce,0e,89,48),
	HX_("__disableInput",22,64,62,1d),
	HX_("__dispatch",da,41,9c,c1),
	HX_("__enableInput",67,4b,65,d1),
	HX_("__getAdvance",ac,09,01,77),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getCharBoundaries",54,ae,91,3e),
	HX_("__getCharIndexOnDifferentLine",08,76,0f,0a),
	HX_("__getCursor",ec,60,6b,e9),
	HX_("__getGroup",e9,35,04,9d),
	HX_("__getPosition",3f,a4,66,39),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__replaceSelectedText",dc,1f,28,29),
	HX_("__replaceText",e1,ab,0d,aa),
	HX_("__startCursorTimer",ed,46,a3,83),
	HX_("__startTextInput",7b,ae,85,aa),
	HX_("__stopCursorTimer",0d,cd,6c,26),
	HX_("__stopTextInput",9b,6c,cb,a1),
	HX_("__updateLayout",b3,d8,3c,79),
	HX_("__updateMouseDrag",50,e6,a9,c1),
	HX_("__updateScrollH",72,d1,f8,83),
	HX_("__updateScrollV",80,d1,f8,83),
	HX_("__updateText",76,32,42,3e),
	HX_("__updateTransforms",10,f4,b0,50),
	HX_("get_antiAliasType",bf,cf,6a,ee),
	HX_("set_antiAliasType",cb,a7,d8,11),
	HX_("get_autoSize",d9,43,93,e4),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_background",37,1c,13,9c),
	HX_("set_background",ab,04,33,bc),
	HX_("get_backgroundColor",ac,1d,52,98),
	HX_("set_backgroundColor",b8,10,ef,d4),
	HX_("get_border",b5,bc,a1,54),
	HX_("set_border",29,5b,1f,58),
	HX_("get_borderColor",6e,f4,b6,97),
	HX_("set_borderColor",7a,71,82,93),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("get_defaultTextFormat",bc,ca,8e,89),
	HX_("set_defaultTextFormat",c8,98,97,dd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("get_gridFitType",9c,aa,f5,74),
	HX_("set_gridFitType",a8,27,c1,70),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_htmlText",c1,d3,51,c5),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_length",af,04,8f,8f),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_mouseWheelEnabled",c2,19,02,e4),
	HX_("set_mouseWheelEnabled",ce,e7,0a,38),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("get_selectionBeginIndex",2c,26,6d,df),
	HX_("get_selectionEndIndex",7a,10,f0,c9),
	HX_("get_sharpness",58,f6,88,dc),
	HX_("set_sharpness",64,d8,8e,21),
	HX_("get_styleSheet",f7,c3,0b,72),
	HX_("set_styleSheet",6b,ac,2b,92),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_textColor",4d,d5,ad,a4),
	HX_("set_textColor",59,b7,b3,e9),
	HX_("get_textWidth",f0,19,b4,24),
	HX_("get_textHeight",bd,10,32,af),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("stage_onMouseMove",76,bc,61,de),
	HX_("stage_onMouseUp",80,ac,07,d1),
	HX_("this_onAddedToStage",23,9e,ce,72),
	HX_("this_onEnterFrame",b5,0f,1f,8e),
	HX_("this_onFocusIn",1d,62,fb,dc),
	HX_("this_onFocusOut",56,0b,ff,7e),
	HX_("this_onKeyDown",e1,85,bf,37),
	HX_("this_onMouseDown",67,5d,aa,6d),
	HX_("this_onMouseWheel",f6,33,56,73),
	HX_("this_onDoubleClick",b7,3f,d1,96),
	HX_("window_onKeyDown",f3,7d,3b,d1),
	HX_("window_onTextInput",ef,a0,6a,c0),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

::hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("__defaultTextFormat",c5,f0,d0,bd),
	HX_("__missingFontWarning",a7,0d,0e,1a),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.text.TextField",ca,a8,d5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_128_boot)
HXDLIN( 128)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
