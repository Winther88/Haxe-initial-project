// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text__internal_GlyphPosition
#include <openfl/text/_internal/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl_text__internal_ShapeCache
#include <openfl/text/_internal/ShapeCache.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextEngine
#include <openfl/text/_internal/TextEngine.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextFormatRange
#include <openfl/text/_internal/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayout
#include <openfl/text/_internal/TextLayout.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayoutGroup
#include <openfl/text/_internal/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_text__internal__TextEngine_DefaultFontSet
#include <openfl/text/_internal/_TextEngine/DefaultFontSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81873a2f4b2980c0_114_new,"openfl.text._internal.TextEngine","new",0xa9ba7af6,"openfl.text._internal.TextEngine.new","openfl/text/_internal/TextEngine.hx",114,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_180_createRestrictRegexp,"openfl.text._internal.TextEngine","createRestrictRegexp",0x6873dceb,"openfl.text._internal.TextEngine.createRestrictRegexp","openfl/text/_internal/TextEngine.hx",180,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_174_createRestrictRegexp,"openfl.text._internal.TextEngine","createRestrictRegexp",0x6873dceb,"openfl.text._internal.TextEngine.createRestrictRegexp","openfl/text/_internal/TextEngine.hx",174,0xb85e1839)
static const ::String _hx_array_data_7e808804_3[] = {
	HX_("",00,00,00,00),
};
static const bool _hx_array_data_7e808804_4[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_269_getBounds,"openfl.text._internal.TextEngine","getBounds",0x3ac9cec1,"openfl.text._internal.TextEngine.getBounds","openfl/text/_internal/TextEngine.hx",269,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_557_getLine,"openfl.text._internal.TextEngine","getLine",0xeb547540,"openfl.text._internal.TextEngine.getLine","openfl/text/_internal/TextEngine.hx",557,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_574_getLineBreaks,"openfl.text._internal.TextEngine","getLineBreaks",0x21405c34,"openfl.text._internal.TextEngine.getLineBreaks","openfl/text/_internal/TextEngine.hx",574,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_594_getLineBreakIndex,"openfl.text._internal.TextEngine","getLineBreakIndex",0xa9a1db33,"openfl.text._internal.TextEngine.getLineBreakIndex","openfl/text/_internal/TextEngine.hx",594,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_604_getLineMeasurements,"openfl.text._internal.TextEngine","getLineMeasurements",0x50395657,"openfl.text._internal.TextEngine.getLineMeasurements","openfl/text/_internal/TextEngine.hx",604,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_763_getLayoutGroups,"openfl.text._internal.TextEngine","getLayoutGroups",0x36de2bea,"openfl.text._internal.TextEngine.getLayoutGroups","openfl/text/_internal/TextEngine.hx",763,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1696_restrictText,"openfl.text._internal.TextEngine","restrictText",0x4d5464b3,"openfl.text._internal.TextEngine.restrictText","openfl/text/_internal/TextEngine.hx",1696,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1717_setTextAlignment,"openfl.text._internal.TextEngine","setTextAlignment",0x7bf8ff1e,"openfl.text._internal.TextEngine.setTextAlignment","openfl/text/_internal/TextEngine.hx",1717,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1824_trimText,"openfl.text._internal.TextEngine","trimText",0x8f1ce459,"openfl.text._internal.TextEngine.trimText","openfl/text/_internal/TextEngine.hx",1824,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1839_update,"openfl.text._internal.TextEngine","update",0x02cb1d33,"openfl.text._internal.TextEngine.update","openfl/text/_internal/TextEngine.hx",1839,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1872_get_bottomScrollV,"openfl.text._internal.TextEngine","get_bottomScrollV",0x0563c86b,"openfl.text._internal.TextEngine.get_bottomScrollV","openfl/text/_internal/TextEngine.hx",1872,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1919_get_maxScrollV,"openfl.text._internal.TextEngine","get_maxScrollV",0x5a4206d8,"openfl.text._internal.TextEngine.get_maxScrollV","openfl/text/_internal/TextEngine.hx",1919,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1960_set_restrict,"openfl.text._internal.TextEngine","set_restrict",0xd4c7f563,"openfl.text._internal.TextEngine.set_restrict","openfl/text/_internal/TextEngine.hx",1960,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1981_get_scrollV,"openfl.text._internal.TextEngine","get_scrollV",0x1f66c456,"openfl.text._internal.TextEngine.get_scrollV","openfl/text/_internal/TextEngine.hx",1981,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1993_set_scrollV,"openfl.text._internal.TextEngine","set_scrollV",0x29d3cb62,"openfl.text._internal.TextEngine.set_scrollV","openfl/text/_internal/TextEngine.hx",1993,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_2002_set_text,"openfl.text._internal.TextEngine","set_text",0xa4cb1754,"openfl.text._internal.TextEngine.set_text","openfl/text/_internal/TextEngine.hx",2002,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_207_findFont,"openfl.text._internal.TextEngine","findFont",0xc00da052,"openfl.text._internal.TextEngine.findFont","openfl/text/_internal/TextEngine.hx",207,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_244_findFontVariant,"openfl.text._internal.TextEngine","findFontVariant",0x8f425653,"openfl.text._internal.TextEngine.findFontVariant","openfl/text/_internal/TextEngine.hx",244,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_301_getDefaultFont,"openfl.text._internal.TextEngine","getDefaultFont",0xe66d7b64,"openfl.text._internal.TextEngine.getDefaultFont","openfl/text/_internal/TextEngine.hx",301,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_310_getDefaultFont,"openfl.text._internal.TextEngine","getDefaultFont",0xe66d7b64,"openfl.text._internal.TextEngine.getDefaultFont","openfl/text/_internal/TextEngine.hx",310,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_430_getFormatHeight,"openfl.text._internal.TextEngine","getFormatHeight",0x3ed257ca,"openfl.text._internal.TextEngine.getFormatHeight","openfl/text/_internal/TextEngine.hx",430,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_470_getFont,"openfl.text._internal.TextEngine","getFont",0xe761bb1b,"openfl.text._internal.TextEngine.getFont","openfl/text/_internal/TextEngine.hx",470,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_528_getFontInstance,"openfl.text._internal.TextEngine","getFontInstance",0x7b1da9d0,"openfl.text._internal.TextEngine.getFontInstance","openfl/text/_internal/TextEngine.hx",528,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_39_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",39,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_41_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",41,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_42_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",42,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_43_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",43,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_44_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",44,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_45_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",45,0xb85e1839)
namespace openfl{
namespace text{
namespace _internal{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_114_new)
HXLINE( 116)		this->_hx___shapeCache =  ::openfl::text::_internal::ShapeCache_obj::__alloc( HX_CTX );
HXLINE( 118)		this->textField = textField;
HXLINE( 120)		this->width = ( (Float)(100) );
HXLINE( 121)		this->height = ( (Float)(100) );
HXLINE( 122)		this->set_text(HX_("",00,00,00,00));
HXLINE( 124)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 125)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 127)		this->type = 0;
HXLINE( 128)		this->autoSize = 2;
HXLINE( 129)		this->embedFonts = false;
HXLINE( 130)		this->selectable = true;
HXLINE( 131)		this->borderColor = 0;
HXLINE( 132)		this->border = false;
HXLINE( 133)		this->backgroundColor = 16777215;
HXLINE( 134)		this->background = false;
HXLINE( 135)		this->gridFitType = 1;
HXLINE( 136)		this->maxChars = 0;
HXLINE( 137)		this->multiline = false;
HXLINE( 138)		this->numLines = 1;
HXLINE( 139)		this->sharpness = ( (Float)(0) );
HXLINE( 140)		this->scrollH = 0;
HXLINE( 141)		this->set_scrollV(1);
HXLINE( 142)		this->wordWrap = false;
HXLINE( 144)		int length = null();
HXDLIN( 144)		bool fixed = null();
HXDLIN( 144)		::Array< Float > array = null();
HXDLIN( 144)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE( 145)		int length1 = null();
HXDLIN( 145)		bool fixed1 = null();
HXDLIN( 145)		::Array< int > array1 = null();
HXDLIN( 145)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,array1);
HXLINE( 146)		int length2 = null();
HXDLIN( 146)		bool fixed2 = null();
HXDLIN( 146)		::Array< Float > array2 = null();
HXDLIN( 146)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,array2,true);
HXLINE( 147)		int length3 = null();
HXDLIN( 147)		bool fixed3 = null();
HXDLIN( 147)		::Array< Float > array3 = null();
HXDLIN( 147)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,array3,true);
HXLINE( 148)		int length4 = null();
HXDLIN( 148)		bool fixed4 = null();
HXDLIN( 148)		::Array< Float > array4 = null();
HXDLIN( 148)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,array4,true);
HXLINE( 149)		int length5 = null();
HXDLIN( 149)		bool fixed5 = null();
HXDLIN( 149)		::Array< Float > array5 = null();
HXDLIN( 149)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,array5,true);
HXLINE( 150)		int length6 = null();
HXDLIN( 150)		bool fixed6 = null();
HXDLIN( 150)		::Array< ::Dynamic> array6 = null();
HXDLIN( 150)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,array6,true);
HXLINE( 151)		int length7 = null();
HXDLIN( 151)		bool fixed7 = null();
HXDLIN( 151)		::Array< ::Dynamic> array7 = null();
HXDLIN( 151)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,array7,true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2dd5980a;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined,::Array< bool >,accepting) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_180_createRestrictRegexp)
HXLINE( 181)			if (accepting->__get(0)) {
HXLINE( 183)				accepting[0] = !(accepting->__get(0));
HXLINE( 184)				return ereg->matched(1);
            			}
HXLINE( 186)			::Array< ::String > declined1 = declined;
HXDLIN( 186)			int accepted = 0;
HXDLIN( 186)			::String declined2 = declined1->__get(accepted);
HXDLIN( 186)			declined1[accepted] = (declined2 + ereg->matched(1));
HXLINE( 187)			accepting[0] = !(accepting->__get(0));
HXLINE( 188)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_174_createRestrictRegexp)
HXLINE( 175)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^([^\\^]+)",d0,bc,3c,14),HX_("gu",2e,5a,00,00));
HXLINE( 176)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_7e808804_3,1);
HXLINE( 178)		::Array< bool > accepting = ::Array_obj< bool >::fromData( _hx_array_data_7e808804_4,1);
HXLINE( 179)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined,accepting)));
HXLINE( 191)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 193)		if ((accepted.length > 0)) {
HXLINE( 195)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + accepted) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 198)		if ((declined->__get(0).length > 0)) {
HXLINE( 200)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get(0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 203)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_269_getBounds)
HXLINE( 270)		int padding;
HXDLIN( 270)		if (this->border) {
HXLINE( 270)			padding = 1;
            		}
            		else {
HXLINE( 270)			padding = 0;
            		}
HXLINE( 272)		this->bounds->width = (this->width + padding);
HXLINE( 273)		this->bounds->height = (this->height + padding);
HXLINE( 275)		Float x = this->width;
HXDLIN( 275)		Float y = this->height;
HXLINE( 277)		int lastIndex = (this->layoutGroups->get_length() - 1);
HXLINE( 278)		{
HXLINE( 278)			int _g = 0;
HXDLIN( 278)			int _g1 = this->layoutGroups->get_length();
HXDLIN( 278)			while((_g < _g1)){
HXLINE( 278)				_g = (_g + 1);
HXDLIN( 278)				int i = (_g - 1);
HXLINE( 280)				 ::openfl::text::_internal::TextLayoutGroup group = this->layoutGroups->get(i).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE( 281)				bool _hx_tmp;
HXDLIN( 281)				bool _hx_tmp1;
HXDLIN( 281)				if ((i == lastIndex)) {
HXLINE( 281)					_hx_tmp1 = (group->startIndex == group->endIndex);
            				}
            				else {
HXLINE( 281)					_hx_tmp1 = false;
            				}
HXDLIN( 281)				if (_hx_tmp1) {
HXLINE( 281)					_hx_tmp = ::hx::IsNotEq( this->type,1 );
            				}
            				else {
HXLINE( 281)					_hx_tmp = false;
            				}
HXDLIN( 281)				if (_hx_tmp) {
HXLINE( 284)					continue;
            				}
HXLINE( 286)				if ((group->offsetX < x)) {
HXLINE( 286)					x = group->offsetX;
            				}
HXLINE( 287)				if ((group->offsetY < y)) {
HXLINE( 287)					y = group->offsetY;
            				}
            			}
            		}
HXLINE( 290)		if ((x >= this->width)) {
HXLINE( 290)			x = ( (Float)(2) );
            		}
HXLINE( 291)		if ((y >= this->height)) {
HXLINE( 291)			y = ( (Float)(2) );
            		}
HXLINE( 297)		this->textBounds->setTo(::Math_obj::max((x - ( (Float)(2) )),( (Float)(0) )),::Math_obj::max((y - ( (Float)(2) )),( (Float)(0) )),::Math_obj::min((this->textWidth + 4),(this->bounds->width + 4)),::Math_obj::min((this->textHeight + 4),(this->bounds->height + 4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_557_getLine)
HXLINE( 558)		bool _hx_tmp;
HXDLIN( 558)		if ((index >= 0)) {
HXLINE( 558)			_hx_tmp = (index > (this->lineBreaks->get_length() + 1));
            		}
            		else {
HXLINE( 558)			_hx_tmp = true;
            		}
HXDLIN( 558)		if (_hx_tmp) {
HXLINE( 560)			return null();
            		}
HXLINE( 563)		if ((this->lineBreaks->get_length() == 0)) {
HXLINE( 565)			return this->text;
            		}
            		else {
HXLINE( 569)			::String _hx_tmp1 = this->text;
HXDLIN( 569)			int _hx_tmp2;
HXDLIN( 569)			if ((index > 0)) {
HXLINE( 569)				_hx_tmp2 = this->lineBreaks->get((index - 1));
            			}
            			else {
HXLINE( 569)				_hx_tmp2 = 0;
            			}
HXDLIN( 569)			return _hx_tmp1.substring(_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 563)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

void TextEngine_obj::getLineBreaks(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_574_getLineBreaks)
HXLINE( 575)		this->lineBreaks->set_length(0);
HXLINE( 577)		int index = -1;
HXLINE( 579)		int cr = -1;
HXDLIN( 579)		int lf = -1;
HXLINE( 580)		while((index < this->text.length)){
HXLINE( 582)			lf = this->text.indexOf(HX_("\n",0a,00,00,00),(index + 1));
HXLINE( 583)			cr = this->text.indexOf(HX_("\r",0d,00,00,00),(index + 1));
HXLINE( 585)			if ((cr == -1)) {
HXLINE( 585)				index = lf;
            			}
            			else {
HXLINE( 585)				if ((lf == -1)) {
HXLINE( 585)					index = cr;
            				}
            				else {
HXLINE( 585)					if ((cr < lf)) {
HXLINE( 585)						index = cr;
            					}
            					else {
HXLINE( 585)						index = lf;
            					}
            				}
            			}
HXLINE( 587)			if ((index > -1)) {
HXLINE( 587)				this->lineBreaks->push(index);
            			}
            			else {
HXLINE( 589)				goto _hx_goto_8;
            			}
            		}
            		_hx_goto_8:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineBreaks,(void))

int TextEngine_obj::getLineBreakIndex(::hx::Null< int >  __o_startIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_594_getLineBreakIndex)
HXLINE( 595)		{
HXLINE( 595)			 ::Dynamic lineBreak = this->lineBreaks->iterator();
HXDLIN( 595)			while(( (bool)(lineBreak->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 595)				int lineBreak1 = ( (int)(lineBreak->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 597)				if ((lineBreak1 >= startIndex)) {
HXLINE( 597)					return lineBreak1;
            				}
            			}
            		}
HXLINE( 600)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_604_getLineMeasurements)
HXLINE( 605)		this->lineAscents->set_length(0);
HXLINE( 606)		this->lineDescents->set_length(0);
HXLINE( 607)		this->lineLeadings->set_length(0);
HXLINE( 608)		this->lineHeights->set_length(0);
HXLINE( 609)		this->lineWidths->set_length(0);
HXLINE( 611)		Float currentLineAscent = ((Float)0.0);
HXLINE( 612)		Float currentLineDescent = ((Float)0.0);
HXLINE( 613)		 ::Dynamic currentLineLeading = null();
HXLINE( 614)		Float currentLineHeight = ((Float)0.0);
HXLINE( 615)		Float currentLineWidth = ((Float)0.0);
HXLINE( 616)		Float currentTextHeight = ((Float)0.0);
HXLINE( 618)		this->textWidth = ( (Float)(0) );
HXLINE( 619)		this->textHeight = ( (Float)(0) );
HXLINE( 620)		this->numLines = 1;
HXLINE( 621)		this->maxScrollH = 0;
HXLINE( 623)		int lastIndex = (this->layoutGroups->get_length() - 1);
HXLINE( 624)		{
HXLINE( 624)			int _g = 0;
HXDLIN( 624)			int _g1 = this->layoutGroups->get_length();
HXDLIN( 624)			while((_g < _g1)){
HXLINE( 624)				_g = (_g + 1);
HXDLIN( 624)				int i = (_g - 1);
HXLINE( 626)				 ::openfl::text::_internal::TextLayoutGroup group = this->layoutGroups->get(i).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE( 628)				bool _hx_tmp;
HXDLIN( 628)				bool _hx_tmp1;
HXDLIN( 628)				if ((i == lastIndex)) {
HXLINE( 628)					_hx_tmp1 = (group->startIndex == group->endIndex);
            				}
            				else {
HXLINE( 628)					_hx_tmp1 = false;
            				}
HXDLIN( 628)				if (_hx_tmp1) {
HXLINE( 628)					_hx_tmp = ::hx::IsNotEq( this->type,1 );
            				}
            				else {
HXLINE( 628)					_hx_tmp = false;
            				}
HXDLIN( 628)				if (_hx_tmp) {
HXLINE( 631)					continue;
            				}
HXLINE( 634)				while((group->lineIndex > (this->numLines - 1))){
HXLINE( 636)					this->lineAscents->push(currentLineAscent);
HXLINE( 637)					this->lineDescents->push(currentLineDescent);
HXLINE( 638)					{
HXLINE( 638)						Float _hx_tmp2;
HXDLIN( 638)						if (::hx::IsNotNull( currentLineLeading )) {
HXLINE( 638)							_hx_tmp2 = ( (Float)(currentLineLeading) );
            						}
            						else {
HXLINE( 638)							_hx_tmp2 = ( (Float)(0) );
            						}
HXDLIN( 638)						this->lineLeadings->push(_hx_tmp2);
            					}
HXLINE( 639)					this->lineHeights->push(currentLineHeight);
HXLINE( 640)					this->lineWidths->push(currentLineWidth);
HXLINE( 642)					currentLineAscent = ( (Float)(0) );
HXLINE( 643)					currentLineDescent = ( (Float)(0) );
HXLINE( 644)					currentLineLeading = null();
HXLINE( 645)					currentLineHeight = ( (Float)(0) );
HXLINE( 646)					currentLineWidth = ( (Float)(0) );
HXLINE( 648)					this->numLines++;
            				}
HXLINE( 651)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 652)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 654)				if (::hx::IsNull( currentLineLeading )) {
HXLINE( 656)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 660)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(currentLineLeading) ),( (Float)(group->leading) )));
            				}
HXLINE( 663)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 664)				currentLineWidth = ((group->offsetX - ( (Float)(2) )) + group->width);
HXLINE( 666)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 668)					this->textWidth = currentLineWidth;
            				}
HXLINE( 671)				currentTextHeight = ( (Float)(::Math_obj::ceil((((group->offsetY - ( (Float)(2) )) + group->ascent) + group->descent))) );
HXLINE( 673)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 675)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 679)		bool _hx_tmp3;
HXDLIN( 679)		bool _hx_tmp4;
HXDLIN( 679)		if ((this->textHeight == 0)) {
HXLINE( 679)			_hx_tmp4 = ::hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 679)			_hx_tmp4 = false;
            		}
HXDLIN( 679)		if (_hx_tmp4) {
HXLINE( 679)			_hx_tmp3 = ::hx::IsEq( this->type,1 );
            		}
            		else {
HXLINE( 679)			_hx_tmp3 = false;
            		}
HXDLIN( 679)		if (_hx_tmp3) {
HXLINE( 681)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 682)			Float ascent;
HXDLIN( 682)			Float descent;
HXLINE( 684)			 ::openfl::text::Font font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 686)			if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 688)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 689)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE( 691)				bool _hx_tmp5;
HXDLIN( 691)				if (::hx::IsNotNull( font )) {
HXLINE( 691)					_hx_tmp5 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE( 691)					_hx_tmp5 = false;
            				}
HXDLIN( 691)				if (_hx_tmp5) {
HXLINE( 694)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 695)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 703)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 704)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 682)			 ::Dynamic leading = currentFormat->leading;
HXDLIN( 682)			int heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE( 711)			currentLineAscent = ascent;
HXLINE( 712)			currentLineDescent = descent;
HXLINE( 713)			currentLineLeading = leading;
HXLINE( 715)			currentTextHeight = ( (Float)(::Math_obj::ceil((ascent + descent))) );
HXLINE( 716)			this->textHeight = currentTextHeight;
            		}
HXLINE( 719)		this->lineAscents->push(currentLineAscent);
HXLINE( 720)		this->lineDescents->push(currentLineDescent);
HXLINE( 721)		{
HXLINE( 721)			Float _hx_tmp6;
HXDLIN( 721)			if (::hx::IsNotNull( currentLineLeading )) {
HXLINE( 721)				_hx_tmp6 = ( (Float)(currentLineLeading) );
            			}
            			else {
HXLINE( 721)				_hx_tmp6 = ( (Float)(0) );
            			}
HXDLIN( 721)			this->lineLeadings->push(_hx_tmp6);
            		}
HXLINE( 722)		this->lineHeights->push(currentLineHeight);
HXLINE( 723)		this->lineWidths->push(currentLineWidth);
HXLINE( 725)		if ((this->numLines == 1)) {
HXLINE( 727)			if (::hx::IsGreater( currentLineLeading,0 )) {
HXLINE( 729)				 ::openfl::text::_internal::TextEngine _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 729)				_hx_tmp7->textHeight = (_hx_tmp7->textHeight + currentLineLeading);
            			}
            		}
HXLINE( 733)		if (::hx::IsNotEq( this->autoSize,2 )) {
HXLINE( 735)			 ::Dynamic _hx_switch_0 = this->autoSize;
            			if (  (_hx_switch_0==0) ||  (_hx_switch_0==1) ||  (_hx_switch_0==3) ){
HXLINE( 738)				if (!(this->wordWrap)) {
HXLINE( 740)					this->width = (this->textWidth + 4);
            				}
HXLINE( 743)				this->height = (this->textHeight + 4);
HXLINE( 744)				this->bottomScrollV = this->numLines;
HXLINE( 737)				goto _hx_goto_14;
            			}
            			/* default */{
            			}
            			_hx_goto_14:;
            		}
HXLINE( 750)		if ((this->textWidth > (this->width - ( (Float)(4) )))) {
HXLINE( 752)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + 4));
            		}
            		else {
HXLINE( 756)			this->maxScrollH = 0;
            		}
HXLINE( 759)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 759)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_763_getLayoutGroups)
HXDLIN( 763)		 ::openfl::text::_internal::TextEngine _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 764)		this->layoutGroups->set_length(0);
HXLINE( 766)		bool _hx_tmp;
HXDLIN( 766)		if (::hx::IsNotNull( this->text )) {
HXLINE( 766)			_hx_tmp = (this->text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 766)			_hx_tmp = true;
            		}
HXDLIN( 766)		if (_hx_tmp) {
HXLINE( 766)			return;
            		}
HXLINE( 768)		int rangeIndex = -1;
HXLINE( 769)		 ::openfl::text::_internal::TextFormatRange formatRange = null();
HXLINE( 770)		 ::lime::text::Font font = null();
HXLINE( 772)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 775)		int leading = 0;
HXLINE( 776)		Float ascent = ((Float)0.0);
HXDLIN( 776)		Float maxAscent = ((Float)0.0);
HXLINE( 777)		Float descent = ((Float)0.0);
HXLINE( 780)		 ::Dynamic align = 3;
HXLINE( 781)		int blockIndent = 0;
HXLINE( 782)		bool bullet = false;
HXLINE( 783)		int indent = 0;
HXLINE( 784)		int leftMargin = 0;
HXLINE( 785)		int rightMargin = 0;
HXLINE( 786)		bool firstLineOfParagraph = true;
HXLINE( 788)		 ::Dynamic tabStops = null();
HXLINE( 790)		 ::openfl::text::_internal::TextLayoutGroup layoutGroup = null();
HXDLIN( 790)		::Array< ::Dynamic> positions = null();
HXLINE( 791)		Float widthValue = ((Float)0.0);
HXDLIN( 791)		int heightValue = 0;
HXDLIN( 791)		int maxHeightValue = 0;
HXLINE( 792)		int previousSpaceIndex = -2;
HXLINE( 793)		int previousBreakIndex = -1;
HXLINE( 794)		int spaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 795)		int breakCount = 0;
HXLINE( 796)		int breakIndex;
HXDLIN( 796)		if ((breakCount < this->lineBreaks->get_length())) {
HXLINE( 796)			breakIndex = this->lineBreaks->get(breakCount);
            		}
            		else {
HXLINE( 796)			breakIndex = -1;
            		}
HXLINE( 798)		Float offsetX = ((Float)0.0);
HXLINE( 799)		Float offsetY = ((Float)0.0);
HXLINE( 800)		int textIndex = 0;
HXLINE( 801)		int lineIndex = 0;
HXLINE(1357)		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1357)			rangeIndex = (rangeIndex + 1);
HXDLIN(1357)			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1357)			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1357)			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1358)		{
HXLINE(1358)			firstLineOfParagraph = true;
HXDLIN(1358)			if (::hx::IsNotNull( currentFormat->align )) {
HXLINE(1358)				align = currentFormat->align;
            			}
            			else {
HXLINE(1358)				align = 3;
            			}
HXDLIN(1358)			if (::hx::IsNotNull( currentFormat->blockIndent )) {
HXLINE(1358)				blockIndent = ( (int)(currentFormat->blockIndent) );
            			}
            			else {
HXLINE(1358)				blockIndent = 0;
            			}
HXDLIN(1358)			if (::hx::IsNotNull( currentFormat->indent )) {
HXLINE(1358)				indent = ( (int)(currentFormat->indent) );
            			}
            			else {
HXLINE(1358)				indent = 0;
            			}
HXDLIN(1358)			if (::hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE(1358)				leftMargin = ( (int)(currentFormat->leftMargin) );
            			}
            			else {
HXLINE(1358)				leftMargin = 0;
            			}
HXDLIN(1358)			if (::hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1358)				rightMargin = ( (int)(currentFormat->rightMargin) );
            			}
            			else {
HXLINE(1358)				rightMargin = 0;
            			}
HXDLIN(1358)			bool _hx_tmp1 = ::hx::IsNotNull( currentFormat->bullet );
HXDLIN(1358)			bool _hx_tmp2 = ::hx::IsNotNull( currentFormat->tabStops );
            		}
HXLINE(1359)		{
HXLINE(1359)			if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1359)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1359)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE(1359)				bool _hx_tmp3;
HXDLIN(1359)				if (::hx::IsNotNull( font )) {
HXLINE(1359)					_hx_tmp3 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE(1359)					_hx_tmp3 = false;
            				}
HXDLIN(1359)				if (_hx_tmp3) {
HXLINE(1359)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1359)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE(1359)					ascent = ( (Float)(currentFormat->size) );
HXDLIN(1359)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXDLIN(1359)			leading = ( (int)(currentFormat->leading) );
HXDLIN(1359)			heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1359)			if ((heightValue > maxHeightValue)) {
HXLINE(1359)				maxHeightValue = heightValue;
            			}
HXDLIN(1359)			if ((ascent > maxAscent)) {
HXLINE(1359)				maxAscent = ascent;
            			}
            		}
HXLINE(1361)		bool wrap;
HXLINE(1362)		int maxLoops = (this->text.length + 1);
HXLINE(1366)		while((textIndex < maxLoops)){
HXLINE(1368)			bool _hx_tmp4;
HXDLIN(1368)			if ((breakIndex > -1)) {
HXLINE(1368)				if ((spaceIndex != -1)) {
HXLINE(1368)					_hx_tmp4 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1368)					_hx_tmp4 = true;
            				}
            			}
            			else {
HXLINE(1368)				_hx_tmp4 = false;
            			}
HXDLIN(1368)			if (_hx_tmp4) {
HXLINE(1372)				if ((textIndex <= breakIndex)) {
HXLINE(1374)					if ((textIndex >= breakIndex)) {
HXLINE(1374)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1374)						widthValue = ( (Float)(0) );
            					}
            					else {
HXLINE(1374)						if ((breakIndex <= formatRange->end)) {
HXLINE(1374)							::String text = _gthis->text;
HXDLIN(1374)							Float letterSpacing = ((Float)0.0);
HXDLIN(1374)							if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1374)								letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            							}
HXDLIN(1374)							if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1374)								_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1374)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1374)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1374)							if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1374)								_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            							}
HXDLIN(1374)							_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1374)							bool positions1;
HXDLIN(1374)							if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1374)								positions1 = (_gthis->sharpness < 400);
            							}
            							else {
HXLINE(1374)								positions1 = true;
            							}
HXDLIN(1374)							_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1374)							 ::openfl::text::_internal::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1374)							_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN(1374)							if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1374)								positions = _gthis->_hx___textLayout->get_positions();
            							}
            							else {
HXLINE(1374)								positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            							}
HXDLIN(1374)							Float width = ((Float)0.0);
HXDLIN(1374)							{
HXLINE(1374)								int _g = 0;
HXDLIN(1374)								while((_g < positions->length)){
HXLINE(1374)									 ::openfl::text::_internal::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1374)									_g = (_g + 1);
HXDLIN(1374)									width = (width + position->advance->x);
            								}
            							}
HXDLIN(1374)							widthValue = width;
            						}
            						else {
HXLINE(1374)							int tempIndex = textIndex;
HXDLIN(1374)							int tempRangeEnd = formatRange->end;
HXDLIN(1374)							int countRanges = 0;
HXDLIN(1374)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1374)							widthValue = ( (Float)(0) );
HXDLIN(1374)							while(true){
HXLINE(1374)								if ((tempIndex != tempRangeEnd)) {
HXLINE(1374)									::String text1 = _gthis->text;
HXDLIN(1374)									Float letterSpacing1 = ((Float)0.0);
HXDLIN(1374)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1374)										letterSpacing1 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXDLIN(1374)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1374)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1374)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1374)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1374)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1374)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1374)									_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1374)									bool _hx_tmp5;
HXDLIN(1374)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1374)										_hx_tmp5 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1374)										_hx_tmp5 = true;
            									}
HXDLIN(1374)									_gthis->_hx___textLayout->autoHint = _hx_tmp5;
HXDLIN(1374)									 ::openfl::text::_internal::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1374)									_gthis2->set_text(text1.substring(tempIndex,tempRangeEnd));
HXDLIN(1374)									::Array< ::Dynamic> tempPositions;
HXDLIN(1374)									if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1374)										tempPositions = _gthis->_hx___textLayout->get_positions();
            									}
            									else {
HXLINE(1374)										tempPositions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            									}
HXDLIN(1374)									positions = positions->concat(tempPositions);
            								}
HXDLIN(1374)								if ((tempRangeEnd != breakIndex)) {
HXLINE(1374)									bool _hx_tmp6;
HXDLIN(1374)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1374)										rangeIndex = (rangeIndex + 1);
HXDLIN(1374)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1374)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1374)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1374)										_hx_tmp6 = true;
            									}
            									else {
HXLINE(1374)										_hx_tmp6 = false;
            									}
HXDLIN(1374)									if (!(_hx_tmp6)) {
HXLINE(1374)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1374)										goto _hx_goto_18;
            									}
HXDLIN(1374)									tempIndex = tempRangeEnd;
HXDLIN(1374)									if ((breakIndex < formatRange->end)) {
HXLINE(1374)										tempRangeEnd = breakIndex;
            									}
            									else {
HXLINE(1374)										tempRangeEnd = formatRange->end;
            									}
HXDLIN(1374)									countRanges = (countRanges + 1);
            								}
            								else {
HXLINE(1374)									Float width1 = ((Float)0.0);
HXDLIN(1374)									{
HXLINE(1374)										int _g1 = 0;
HXDLIN(1374)										while((_g1 < positions->length)){
HXLINE(1374)											 ::openfl::text::_internal::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1374)											_g1 = (_g1 + 1);
HXDLIN(1374)											width1 = (width1 + position1->advance->x);
            										}
            									}
HXDLIN(1374)									widthValue = width1;
HXDLIN(1374)									goto _hx_goto_18;
            								}
            							}
            							_hx_goto_18:;
HXDLIN(1374)							rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1374)							if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1374)								rangeIndex = (rangeIndex + 1);
HXDLIN(1374)								formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1374)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1374)								font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
            					}
HXLINE(1375)					{
HXLINE(1375)						bool _hx_tmp7;
HXDLIN(1375)						if ((_gthis->width >= 4)) {
HXLINE(1375)							_hx_tmp7 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1375)							_hx_tmp7 = false;
            						}
HXDLIN(1375)						if (_hx_tmp7) {
HXLINE(1375)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1375)							int bufferCount;
HXDLIN(1375)							int placeIndex;
HXDLIN(1375)							Float positionWidth;
HXDLIN(1375)							 ::openfl::text::_internal::GlyphPosition currentPosition;
HXDLIN(1375)							Float width2 = ((Float)0.0);
HXDLIN(1375)							{
HXLINE(1375)								int _g2 = 0;
HXDLIN(1375)								while((_g2 < remainingPositions->length)){
HXLINE(1375)									 ::openfl::text::_internal::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)									_g2 = (_g2 + 1);
HXDLIN(1375)									width2 = (width2 + position2->advance->x);
            								}
            							}
HXDLIN(1375)							Float tempWidth = width2;
HXDLIN(1375)							int i = (remainingPositions->length - 1);
HXDLIN(1375)							while((i >= 0)){
HXLINE(1375)								 ::Dynamic currentCharCode = _gthis->text.charCodeAt((textIndex + i));
HXDLIN(1375)								bool _hx_tmp8;
HXDLIN(1375)								if (::hx::IsNotEq( currentCharCode,32 )) {
HXLINE(1375)									_hx_tmp8 = ::hx::IsNotEq( currentCharCode,9 );
            								}
            								else {
HXLINE(1375)									_hx_tmp8 = false;
            								}
HXDLIN(1375)								if (_hx_tmp8) {
HXLINE(1375)									goto _hx_goto_21;
            								}
HXDLIN(1375)								 ::openfl::text::_internal::GlyphPosition position3 = remainingPositions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)								tempWidth = (tempWidth - position3->advance->x);
HXDLIN(1375)								i = (i - 1);
            							}
            							_hx_goto_21:;
HXDLIN(1375)							while(true){
HXLINE(1375)								bool _hx_tmp9;
HXDLIN(1375)								if ((remainingPositions->length > 0)) {
HXLINE(1375)									int _hx_tmp10;
HXDLIN(1375)									if (firstLineOfParagraph) {
HXLINE(1375)										_hx_tmp10 = indent;
            									}
            									else {
HXLINE(1375)										_hx_tmp10 = 0;
            									}
HXDLIN(1375)									_hx_tmp9 = ((offsetX + tempWidth) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp10)) )));
            								}
            								else {
HXLINE(1375)									_hx_tmp9 = false;
            								}
HXDLIN(1375)								if (!(_hx_tmp9)) {
HXLINE(1375)									goto _hx_goto_22;
            								}
HXDLIN(1375)								bufferCount = 0;
HXDLIN(1375)								i = bufferCount;
HXDLIN(1375)								positionWidth = ((Float)0.0);
HXDLIN(1375)								while(true){
HXLINE(1375)									int _hx_tmp11;
HXDLIN(1375)									if (firstLineOfParagraph) {
HXLINE(1375)										_hx_tmp11 = indent;
            									}
            									else {
HXLINE(1375)										_hx_tmp11 = 0;
            									}
HXDLIN(1375)									if (!(((offsetX + positionWidth) < (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp11)) ))))) {
HXLINE(1375)										goto _hx_goto_23;
            									}
HXDLIN(1375)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1375)										i = (i + 1);
HXDLIN(1375)										bufferCount = (bufferCount + 1);
            									}
            									else {
HXLINE(1375)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1375)										i = (i + 1);
            									}
            								}
            								_hx_goto_23:;
HXDLIN(1375)								if ((i == bufferCount)) {
HXLINE(1375)									i = (bufferCount + 1);
            								}
            								else {
HXLINE(1375)									while(true){
HXLINE(1375)										bool _hx_tmp12;
HXDLIN(1375)										if ((i > 1)) {
HXLINE(1375)											int _hx_tmp13;
HXDLIN(1375)											if (firstLineOfParagraph) {
HXLINE(1375)												_hx_tmp13 = indent;
            											}
            											else {
HXLINE(1375)												_hx_tmp13 = 0;
            											}
HXDLIN(1375)											_hx_tmp12 = ((offsetX + positionWidth) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp13)) )));
            										}
            										else {
HXLINE(1375)											_hx_tmp12 = false;
            										}
HXDLIN(1375)										if (!(_hx_tmp12)) {
HXLINE(1375)											goto _hx_goto_24;
            										}
HXDLIN(1375)										i = (i - 1);
HXDLIN(1375)										if (((i - bufferCount) > 0)) {
HXLINE(1375)											{
HXLINE(1375)												int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1375)												if ((textIndex >= endIndex)) {
HXLINE(1375)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)													widthValue = ( (Float)(0) );
            												}
            												else {
HXLINE(1375)													if ((endIndex <= formatRange->end)) {
HXLINE(1375)														::String text2 = _gthis->text;
HXDLIN(1375)														Float letterSpacing2 = ((Float)0.0);
HXDLIN(1375)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)															letterSpacing2 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1375)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1375)														bool positions2;
HXDLIN(1375)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)															positions2 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1375)															positions2 = true;
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1375)														 ::openfl::text::_internal::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1375)														_gthis3->set_text(text2.substring(textIndex,endIndex));
HXDLIN(1375)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1375)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1375)														Float width3 = ((Float)0.0);
HXDLIN(1375)														{
HXLINE(1375)															int _g3 = 0;
HXDLIN(1375)															while((_g3 < positions->length)){
HXLINE(1375)																 ::openfl::text::_internal::GlyphPosition position4 = positions->__get(_g3).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)																_g3 = (_g3 + 1);
HXDLIN(1375)																width3 = (width3 + position4->advance->x);
            															}
            														}
HXDLIN(1375)														widthValue = width3;
            													}
            													else {
HXLINE(1375)														int tempIndex1 = textIndex;
HXDLIN(1375)														int tempRangeEnd1 = formatRange->end;
HXDLIN(1375)														int countRanges1 = 0;
HXDLIN(1375)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)														widthValue = ( (Float)(0) );
HXDLIN(1375)														while(true){
HXLINE(1375)															if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1375)																::String text3 = _gthis->text;
HXDLIN(1375)																Float letterSpacing3 = ((Float)0.0);
HXDLIN(1375)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)																	letterSpacing3 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1375)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1375)																bool _hx_tmp14;
HXDLIN(1375)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)																	_hx_tmp14 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1375)																	_hx_tmp14 = true;
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->autoHint = _hx_tmp14;
HXDLIN(1375)																 ::openfl::text::_internal::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1375)																_gthis4->set_text(text3.substring(tempIndex1,tempRangeEnd1));
HXDLIN(1375)																::Array< ::Dynamic> tempPositions1;
HXDLIN(1375)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)																	tempPositions1 = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1375)																	tempPositions1 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1375)																positions = positions->concat(tempPositions1);
            															}
HXDLIN(1375)															if ((tempRangeEnd1 != endIndex)) {
HXLINE(1375)																bool _hx_tmp15;
HXDLIN(1375)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1375)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1375)																	_hx_tmp15 = true;
            																}
            																else {
HXLINE(1375)																	_hx_tmp15 = false;
            																}
HXDLIN(1375)																if (!(_hx_tmp15)) {
HXLINE(1375)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1375)																	goto _hx_goto_26;
            																}
HXDLIN(1375)																tempIndex1 = tempRangeEnd1;
HXDLIN(1375)																if ((endIndex < formatRange->end)) {
HXLINE(1375)																	tempRangeEnd1 = endIndex;
            																}
            																else {
HXLINE(1375)																	tempRangeEnd1 = formatRange->end;
            																}
HXDLIN(1375)																countRanges1 = (countRanges1 + 1);
            															}
            															else {
HXLINE(1375)																Float width4 = ((Float)0.0);
HXDLIN(1375)																{
HXLINE(1375)																	int _g4 = 0;
HXDLIN(1375)																	while((_g4 < positions->length)){
HXLINE(1375)																		 ::openfl::text::_internal::GlyphPosition position5 = positions->__get(_g4).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)																		_g4 = (_g4 + 1);
HXDLIN(1375)																		width4 = (width4 + position5->advance->x);
            																	}
            																}
HXDLIN(1375)																widthValue = width4;
HXDLIN(1375)																goto _hx_goto_26;
            															}
            														}
            														_hx_goto_26:;
HXDLIN(1375)														rangeIndex = (rangeIndex - (countRanges1 + 1));
HXDLIN(1375)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)															rangeIndex = (rangeIndex + 1);
HXDLIN(1375)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
            											}
HXDLIN(1375)											positionWidth = widthValue;
            										}
            										else {
HXLINE(1375)											i = 1;
HXDLIN(1375)											bufferCount = 0;
HXDLIN(1375)											{
HXLINE(1375)												int endIndex1 = (textIndex + 1);
HXDLIN(1375)												if ((textIndex >= endIndex1)) {
HXLINE(1375)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)													widthValue = ( (Float)(0) );
            												}
            												else {
HXLINE(1375)													if ((endIndex1 <= formatRange->end)) {
HXLINE(1375)														::String text4 = _gthis->text;
HXDLIN(1375)														Float letterSpacing4 = ((Float)0.0);
HXDLIN(1375)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)															letterSpacing4 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1375)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1375)														bool positions3;
HXDLIN(1375)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)															positions3 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1375)															positions3 = true;
            														}
HXDLIN(1375)														_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1375)														 ::openfl::text::_internal::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1375)														_gthis5->set_text(text4.substring(textIndex,endIndex1));
HXDLIN(1375)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1375)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1375)														Float width5 = ((Float)0.0);
HXDLIN(1375)														{
HXLINE(1375)															int _g5 = 0;
HXDLIN(1375)															while((_g5 < positions->length)){
HXLINE(1375)																 ::openfl::text::_internal::GlyphPosition position6 = positions->__get(_g5).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)																_g5 = (_g5 + 1);
HXDLIN(1375)																width5 = (width5 + position6->advance->x);
            															}
            														}
HXDLIN(1375)														widthValue = width5;
            													}
            													else {
HXLINE(1375)														int tempIndex2 = textIndex;
HXDLIN(1375)														int tempRangeEnd2 = formatRange->end;
HXDLIN(1375)														int countRanges2 = 0;
HXDLIN(1375)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)														widthValue = ( (Float)(0) );
HXDLIN(1375)														while(true){
HXLINE(1375)															if ((tempIndex2 != tempRangeEnd2)) {
HXLINE(1375)																::String text5 = _gthis->text;
HXDLIN(1375)																Float letterSpacing5 = ((Float)0.0);
HXDLIN(1375)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)																	letterSpacing5 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1375)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1375)																bool _hx_tmp16;
HXDLIN(1375)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)																	_hx_tmp16 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1375)																	_hx_tmp16 = true;
            																}
HXDLIN(1375)																_gthis->_hx___textLayout->autoHint = _hx_tmp16;
HXDLIN(1375)																 ::openfl::text::_internal::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1375)																_gthis6->set_text(text5.substring(tempIndex2,tempRangeEnd2));
HXDLIN(1375)																::Array< ::Dynamic> tempPositions2;
HXDLIN(1375)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)																	tempPositions2 = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1375)																	tempPositions2 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1375)																positions = positions->concat(tempPositions2);
            															}
HXDLIN(1375)															if ((tempRangeEnd2 != endIndex1)) {
HXLINE(1375)																bool _hx_tmp17;
HXDLIN(1375)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1375)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1375)																	_hx_tmp17 = true;
            																}
            																else {
HXLINE(1375)																	_hx_tmp17 = false;
            																}
HXDLIN(1375)																if (!(_hx_tmp17)) {
HXLINE(1375)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1375)																	goto _hx_goto_29;
            																}
HXDLIN(1375)																tempIndex2 = tempRangeEnd2;
HXDLIN(1375)																if ((endIndex1 < formatRange->end)) {
HXLINE(1375)																	tempRangeEnd2 = endIndex1;
            																}
            																else {
HXLINE(1375)																	tempRangeEnd2 = formatRange->end;
            																}
HXDLIN(1375)																countRanges2 = (countRanges2 + 1);
            															}
            															else {
HXLINE(1375)																Float width6 = ((Float)0.0);
HXDLIN(1375)																{
HXLINE(1375)																	int _g6 = 0;
HXDLIN(1375)																	while((_g6 < positions->length)){
HXLINE(1375)																		 ::openfl::text::_internal::GlyphPosition position7 = positions->__get(_g6).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)																		_g6 = (_g6 + 1);
HXDLIN(1375)																		width6 = (width6 + position7->advance->x);
            																	}
            																}
HXDLIN(1375)																widthValue = width6;
HXDLIN(1375)																goto _hx_goto_29;
            															}
            														}
            														_hx_goto_29:;
HXDLIN(1375)														rangeIndex = (rangeIndex - (countRanges2 + 1));
HXDLIN(1375)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)															rangeIndex = (rangeIndex + 1);
HXDLIN(1375)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
            											}
HXDLIN(1375)											positionWidth = ( (Float)(0) );
            										}
            									}
            									_hx_goto_24:;
            								}
HXDLIN(1375)								placeIndex = ((textIndex + i) - bufferCount);
HXDLIN(1375)								{
HXLINE(1375)									if ((placeIndex <= formatRange->end)) {
HXLINE(1375)										::String text6 = _gthis->text;
HXDLIN(1375)										Float letterSpacing6 = ((Float)0.0);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)											letterSpacing6 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1375)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1375)										bool positions4;
HXDLIN(1375)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)											positions4 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1375)											positions4 = true;
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1375)										 ::openfl::text::_internal::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1375)										_gthis7->set_text(text6.substring(textIndex,placeIndex));
HXDLIN(1375)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)											positions = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1375)											positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXDLIN(1375)										Float width7 = ((Float)0.0);
HXDLIN(1375)										{
HXLINE(1375)											int _g7 = 0;
HXDLIN(1375)											while((_g7 < positions->length)){
HXLINE(1375)												 ::openfl::text::_internal::GlyphPosition position8 = positions->__get(_g7).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)												_g7 = (_g7 + 1);
HXDLIN(1375)												width7 = (width7 + position8->advance->x);
            											}
            										}
HXDLIN(1375)										widthValue = width7;
HXDLIN(1375)										bool _hx_tmp18;
HXDLIN(1375)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1375)											_hx_tmp18 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1375)											_hx_tmp18 = true;
            										}
HXDLIN(1375)										if (_hx_tmp18) {
HXLINE(1375)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXDLIN(1375)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1375)											layoutGroup->format = formatRange->format;
HXDLIN(1375)											layoutGroup->startIndex = textIndex;
HXDLIN(1375)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1375)										layoutGroup->positions = positions;
HXDLIN(1375)										int _hx_tmp19;
HXDLIN(1375)										if (firstLineOfParagraph) {
HXLINE(1375)											_hx_tmp19 = indent;
            										}
            										else {
HXLINE(1375)											_hx_tmp19 = 0;
            										}
HXDLIN(1375)										layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp19)) ));
HXDLIN(1375)										layoutGroup->ascent = ascent;
HXDLIN(1375)										layoutGroup->descent = descent;
HXDLIN(1375)										layoutGroup->leading = leading;
HXDLIN(1375)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1375)										layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1375)										layoutGroup->width = widthValue;
HXDLIN(1375)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1375)										offsetX = (offsetX + widthValue);
HXDLIN(1375)										if ((placeIndex == formatRange->end)) {
HXLINE(1375)											layoutGroup = null();
HXDLIN(1375)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)												rangeIndex = (rangeIndex + 1);
HXDLIN(1375)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1375)											{
HXLINE(1375)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1375)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1375)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1375)													bool _hx_tmp20;
HXDLIN(1375)													if (::hx::IsNotNull( font )) {
HXLINE(1375)														_hx_tmp20 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1375)														_hx_tmp20 = false;
            													}
HXDLIN(1375)													if (_hx_tmp20) {
HXLINE(1375)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1375)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1375)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1375)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1375)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1375)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1375)												if ((heightValue > maxHeightValue)) {
HXLINE(1375)													maxHeightValue = heightValue;
            												}
HXDLIN(1375)												if ((ascent > maxAscent)) {
HXLINE(1375)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1375)										while(true){
HXLINE(1375)											int tempRangeEnd3;
HXDLIN(1375)											if ((placeIndex < formatRange->end)) {
HXLINE(1375)												tempRangeEnd3 = placeIndex;
            											}
            											else {
HXLINE(1375)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1375)											if ((textIndex != tempRangeEnd3)) {
HXLINE(1375)												::String text7 = _gthis->text;
HXDLIN(1375)												Float letterSpacing7 = ((Float)0.0);
HXDLIN(1375)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)													letterSpacing7 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1375)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1375)												bool positions5;
HXDLIN(1375)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)													positions5 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1375)													positions5 = true;
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1375)												 ::openfl::text::_internal::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1375)												_gthis8->set_text(text7.substring(textIndex,tempRangeEnd3));
HXDLIN(1375)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1375)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1375)												Float width8 = ((Float)0.0);
HXDLIN(1375)												{
HXLINE(1375)													int _g8 = 0;
HXDLIN(1375)													while((_g8 < positions->length)){
HXLINE(1375)														 ::openfl::text::_internal::GlyphPosition position9 = positions->__get(_g8).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)														_g8 = (_g8 + 1);
HXDLIN(1375)														width8 = (width8 + position9->advance->x);
            													}
            												}
HXDLIN(1375)												widthValue = width8;
HXDLIN(1375)												bool _hx_tmp21;
HXDLIN(1375)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1375)													_hx_tmp21 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1375)													_hx_tmp21 = true;
            												}
HXDLIN(1375)												if (_hx_tmp21) {
HXLINE(1375)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd3);
HXDLIN(1375)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1375)													layoutGroup->format = formatRange->format;
HXDLIN(1375)													layoutGroup->startIndex = textIndex;
HXDLIN(1375)													layoutGroup->endIndex = tempRangeEnd3;
            												}
HXDLIN(1375)												layoutGroup->positions = positions;
HXDLIN(1375)												int _hx_tmp22;
HXDLIN(1375)												if (firstLineOfParagraph) {
HXLINE(1375)													_hx_tmp22 = indent;
            												}
            												else {
HXLINE(1375)													_hx_tmp22 = 0;
            												}
HXDLIN(1375)												layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp22)) ));
HXDLIN(1375)												layoutGroup->ascent = ascent;
HXDLIN(1375)												layoutGroup->descent = descent;
HXDLIN(1375)												layoutGroup->leading = leading;
HXDLIN(1375)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1375)												layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1375)												layoutGroup->width = widthValue;
HXDLIN(1375)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1375)												offsetX = (offsetX + widthValue);
HXDLIN(1375)												textIndex = tempRangeEnd3;
            											}
HXDLIN(1375)											if ((tempRangeEnd3 == formatRange->end)) {
HXLINE(1375)												layoutGroup = null();
            											}
HXDLIN(1375)											if ((tempRangeEnd3 == placeIndex)) {
HXLINE(1375)												goto _hx_goto_32;
            											}
HXDLIN(1375)											bool _hx_tmp23;
HXDLIN(1375)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)												rangeIndex = (rangeIndex + 1);
HXDLIN(1375)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1375)												_hx_tmp23 = true;
            											}
            											else {
HXLINE(1375)												_hx_tmp23 = false;
            											}
HXDLIN(1375)											if (!(_hx_tmp23)) {
HXLINE(1375)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1375)												goto _hx_goto_32;
            											}
HXDLIN(1375)											{
HXLINE(1375)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1375)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1375)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1375)													bool _hx_tmp24;
HXDLIN(1375)													if (::hx::IsNotNull( font )) {
HXLINE(1375)														_hx_tmp24 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1375)														_hx_tmp24 = false;
            													}
HXDLIN(1375)													if (_hx_tmp24) {
HXLINE(1375)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1375)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1375)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1375)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1375)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1375)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1375)												if ((heightValue > maxHeightValue)) {
HXLINE(1375)													maxHeightValue = heightValue;
            												}
HXDLIN(1375)												if ((ascent > maxAscent)) {
HXLINE(1375)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_32:;
            									}
HXDLIN(1375)									textIndex = placeIndex;
            								}
HXDLIN(1375)								{
HXLINE(1375)									{
HXLINE(1375)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1375)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1375)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1375)											bool _hx_tmp25;
HXDLIN(1375)											if (::hx::IsNotNull( font )) {
HXLINE(1375)												_hx_tmp25 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1375)												_hx_tmp25 = false;
            											}
HXDLIN(1375)											if (_hx_tmp25) {
HXLINE(1375)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1375)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE(1375)												ascent = ( (Float)(currentFormat->size) );
HXDLIN(1375)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXDLIN(1375)										leading = ( (int)(currentFormat->leading) );
HXDLIN(1375)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1375)										if ((heightValue > maxHeightValue)) {
HXLINE(1375)											maxHeightValue = heightValue;
            										}
HXDLIN(1375)										if ((ascent > maxAscent)) {
HXLINE(1375)											maxAscent = ascent;
            										}
            									}
HXDLIN(1375)									int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1375)									while(true){
HXLINE(1375)										i1 = (i1 - 1);
HXDLIN(1375)										if (!((i1 > -1))) {
HXLINE(1375)											goto _hx_goto_34;
            										}
HXDLIN(1375)										 ::openfl::text::_internal::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1375)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1375)											goto _hx_goto_34;
            										}
HXDLIN(1375)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1375)											continue;
            										}
HXDLIN(1375)										lg->ascent = maxAscent;
HXDLIN(1375)										lg->height = ( (Float)(maxHeightValue) );
            									}
            									_hx_goto_34:;
HXDLIN(1375)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1375)									maxAscent = ((Float)0.0);
HXDLIN(1375)									maxHeightValue = 0;
HXDLIN(1375)									lineIndex = (lineIndex + 1);
HXDLIN(1375)									offsetX = ( (Float)(0) );
HXDLIN(1375)									firstLineOfParagraph = false;
            								}
HXDLIN(1375)								if ((placeIndex >= breakIndex)) {
HXLINE(1375)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)									widthValue = ( (Float)(0) );
            								}
            								else {
HXLINE(1375)									if ((breakIndex <= formatRange->end)) {
HXLINE(1375)										::String text8 = _gthis->text;
HXDLIN(1375)										Float letterSpacing8 = ((Float)0.0);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)											letterSpacing8 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1375)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1375)										bool positions6;
HXDLIN(1375)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)											positions6 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1375)											positions6 = true;
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1375)										 ::openfl::text::_internal::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1375)										_gthis9->set_text(text8.substring(placeIndex,breakIndex));
HXDLIN(1375)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)											positions = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1375)											positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXDLIN(1375)										Float width9 = ((Float)0.0);
HXDLIN(1375)										{
HXLINE(1375)											int _g9 = 0;
HXDLIN(1375)											while((_g9 < positions->length)){
HXLINE(1375)												 ::openfl::text::_internal::GlyphPosition position10 = positions->__get(_g9).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)												_g9 = (_g9 + 1);
HXDLIN(1375)												width9 = (width9 + position10->advance->x);
            											}
            										}
HXDLIN(1375)										widthValue = width9;
            									}
            									else {
HXLINE(1375)										int tempIndex3 = placeIndex;
HXDLIN(1375)										int tempRangeEnd4 = formatRange->end;
HXDLIN(1375)										int countRanges3 = 0;
HXDLIN(1375)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1375)										widthValue = ( (Float)(0) );
HXDLIN(1375)										while(true){
HXLINE(1375)											if ((tempIndex3 != tempRangeEnd4)) {
HXLINE(1375)												::String text9 = _gthis->text;
HXDLIN(1375)												Float letterSpacing9 = ((Float)0.0);
HXDLIN(1375)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)													letterSpacing9 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1375)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1375)												bool _hx_tmp26;
HXDLIN(1375)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)													_hx_tmp26 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1375)													_hx_tmp26 = true;
            												}
HXDLIN(1375)												_gthis->_hx___textLayout->autoHint = _hx_tmp26;
HXDLIN(1375)												 ::openfl::text::_internal::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1375)												_gthis10->set_text(text9.substring(tempIndex3,tempRangeEnd4));
HXDLIN(1375)												::Array< ::Dynamic> tempPositions3;
HXDLIN(1375)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)													tempPositions3 = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1375)													tempPositions3 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1375)												positions = positions->concat(tempPositions3);
            											}
HXDLIN(1375)											if ((tempRangeEnd4 != breakIndex)) {
HXLINE(1375)												bool _hx_tmp27;
HXDLIN(1375)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)													rangeIndex = (rangeIndex + 1);
HXDLIN(1375)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1375)													_hx_tmp27 = true;
            												}
            												else {
HXLINE(1375)													_hx_tmp27 = false;
            												}
HXDLIN(1375)												if (!(_hx_tmp27)) {
HXLINE(1375)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1375)													goto _hx_goto_36;
            												}
HXDLIN(1375)												tempIndex3 = tempRangeEnd4;
HXDLIN(1375)												if ((breakIndex < formatRange->end)) {
HXLINE(1375)													tempRangeEnd4 = breakIndex;
            												}
            												else {
HXLINE(1375)													tempRangeEnd4 = formatRange->end;
            												}
HXDLIN(1375)												countRanges3 = (countRanges3 + 1);
            											}
            											else {
HXLINE(1375)												Float width10 = ((Float)0.0);
HXDLIN(1375)												{
HXLINE(1375)													int _g10 = 0;
HXDLIN(1375)													while((_g10 < positions->length)){
HXLINE(1375)														 ::openfl::text::_internal::GlyphPosition position11 = positions->__get(_g10).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)														_g10 = (_g10 + 1);
HXDLIN(1375)														width10 = (width10 + position11->advance->x);
            													}
            												}
HXDLIN(1375)												widthValue = width10;
HXDLIN(1375)												goto _hx_goto_36;
            											}
            										}
            										_hx_goto_36:;
HXDLIN(1375)										rangeIndex = (rangeIndex - (countRanges3 + 1));
HXDLIN(1375)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)											rangeIndex = (rangeIndex + 1);
HXDLIN(1375)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
            								}
HXDLIN(1375)								remainingPositions = positions;
HXDLIN(1375)								tempWidth = widthValue;
            							}
            							_hx_goto_22:;
            						}
HXDLIN(1375)						{
HXLINE(1375)							if ((breakIndex <= formatRange->end)) {
HXLINE(1375)								::String text10 = _gthis->text;
HXDLIN(1375)								Float letterSpacing10 = ((Float)0.0);
HXDLIN(1375)								if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)									letterSpacing10 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXDLIN(1375)								if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)									_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1375)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)								if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1375)								_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1375)								bool positions7;
HXDLIN(1375)								if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)									positions7 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1375)									positions7 = true;
            								}
HXDLIN(1375)								_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1375)								 ::openfl::text::_internal::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1375)								_gthis11->set_text(text10.substring(textIndex,breakIndex));
HXDLIN(1375)								if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)									positions = _gthis->_hx___textLayout->get_positions();
            								}
            								else {
HXLINE(1375)									positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            								}
HXDLIN(1375)								Float width11 = ((Float)0.0);
HXDLIN(1375)								{
HXLINE(1375)									int _g11 = 0;
HXDLIN(1375)									while((_g11 < positions->length)){
HXLINE(1375)										 ::openfl::text::_internal::GlyphPosition position12 = positions->__get(_g11).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)										_g11 = (_g11 + 1);
HXDLIN(1375)										width11 = (width11 + position12->advance->x);
            									}
            								}
HXDLIN(1375)								widthValue = width11;
HXDLIN(1375)								bool _hx_tmp28;
HXDLIN(1375)								if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1375)									_hx_tmp28 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1375)									_hx_tmp28 = true;
            								}
HXDLIN(1375)								if (_hx_tmp28) {
HXLINE(1375)									layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1375)									_gthis->layoutGroups->push(layoutGroup);
            								}
            								else {
HXLINE(1375)									layoutGroup->format = formatRange->format;
HXDLIN(1375)									layoutGroup->startIndex = textIndex;
HXDLIN(1375)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1375)								layoutGroup->positions = positions;
HXDLIN(1375)								int _hx_tmp29;
HXDLIN(1375)								if (firstLineOfParagraph) {
HXLINE(1375)									_hx_tmp29 = indent;
            								}
            								else {
HXLINE(1375)									_hx_tmp29 = 0;
            								}
HXDLIN(1375)								layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp29)) ));
HXDLIN(1375)								layoutGroup->ascent = ascent;
HXDLIN(1375)								layoutGroup->descent = descent;
HXDLIN(1375)								layoutGroup->leading = leading;
HXDLIN(1375)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1375)								layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1375)								layoutGroup->width = widthValue;
HXDLIN(1375)								layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1375)								offsetX = (offsetX + widthValue);
HXDLIN(1375)								if ((breakIndex == formatRange->end)) {
HXLINE(1375)									layoutGroup = null();
HXDLIN(1375)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)										rangeIndex = (rangeIndex + 1);
HXDLIN(1375)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1375)									{
HXLINE(1375)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1375)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1375)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1375)											bool _hx_tmp30;
HXDLIN(1375)											if (::hx::IsNotNull( font )) {
HXLINE(1375)												_hx_tmp30 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1375)												_hx_tmp30 = false;
            											}
HXDLIN(1375)											if (_hx_tmp30) {
HXLINE(1375)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1375)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE(1375)												ascent = ( (Float)(currentFormat->size) );
HXDLIN(1375)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXDLIN(1375)										leading = ( (int)(currentFormat->leading) );
HXDLIN(1375)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1375)										if ((heightValue > maxHeightValue)) {
HXLINE(1375)											maxHeightValue = heightValue;
            										}
HXDLIN(1375)										if ((ascent > maxAscent)) {
HXLINE(1375)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1375)								while(true){
HXLINE(1375)									int tempRangeEnd5;
HXDLIN(1375)									if ((breakIndex < formatRange->end)) {
HXLINE(1375)										tempRangeEnd5 = breakIndex;
            									}
            									else {
HXLINE(1375)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1375)									if ((textIndex != tempRangeEnd5)) {
HXLINE(1375)										::String text11 = _gthis->text;
HXDLIN(1375)										Float letterSpacing11 = ((Float)0.0);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1375)											letterSpacing11 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1375)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1375)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1375)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1375)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1375)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1375)										bool positions8;
HXDLIN(1375)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1375)											positions8 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1375)											positions8 = true;
            										}
HXDLIN(1375)										_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1375)										 ::openfl::text::_internal::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1375)										_gthis12->set_text(text11.substring(textIndex,tempRangeEnd5));
HXDLIN(1375)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1375)											positions = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1375)											positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXDLIN(1375)										Float width12 = ((Float)0.0);
HXDLIN(1375)										{
HXLINE(1375)											int _g12 = 0;
HXDLIN(1375)											while((_g12 < positions->length)){
HXLINE(1375)												 ::openfl::text::_internal::GlyphPosition position13 = positions->__get(_g12).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1375)												_g12 = (_g12 + 1);
HXDLIN(1375)												width12 = (width12 + position13->advance->x);
            											}
            										}
HXDLIN(1375)										widthValue = width12;
HXDLIN(1375)										bool _hx_tmp31;
HXDLIN(1375)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1375)											_hx_tmp31 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1375)											_hx_tmp31 = true;
            										}
HXDLIN(1375)										if (_hx_tmp31) {
HXLINE(1375)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd5);
HXDLIN(1375)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1375)											layoutGroup->format = formatRange->format;
HXDLIN(1375)											layoutGroup->startIndex = textIndex;
HXDLIN(1375)											layoutGroup->endIndex = tempRangeEnd5;
            										}
HXDLIN(1375)										layoutGroup->positions = positions;
HXDLIN(1375)										int _hx_tmp32;
HXDLIN(1375)										if (firstLineOfParagraph) {
HXLINE(1375)											_hx_tmp32 = indent;
            										}
            										else {
HXLINE(1375)											_hx_tmp32 = 0;
            										}
HXDLIN(1375)										layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp32)) ));
HXDLIN(1375)										layoutGroup->ascent = ascent;
HXDLIN(1375)										layoutGroup->descent = descent;
HXDLIN(1375)										layoutGroup->leading = leading;
HXDLIN(1375)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1375)										layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1375)										layoutGroup->width = widthValue;
HXDLIN(1375)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1375)										offsetX = (offsetX + widthValue);
HXDLIN(1375)										textIndex = tempRangeEnd5;
            									}
HXDLIN(1375)									if ((tempRangeEnd5 == formatRange->end)) {
HXLINE(1375)										layoutGroup = null();
            									}
HXDLIN(1375)									if ((tempRangeEnd5 == breakIndex)) {
HXLINE(1375)										goto _hx_goto_39;
            									}
HXDLIN(1375)									bool _hx_tmp33;
HXDLIN(1375)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1375)										rangeIndex = (rangeIndex + 1);
HXDLIN(1375)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1375)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1375)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1375)										_hx_tmp33 = true;
            									}
            									else {
HXLINE(1375)										_hx_tmp33 = false;
            									}
HXDLIN(1375)									if (!(_hx_tmp33)) {
HXLINE(1375)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1375)										goto _hx_goto_39;
            									}
HXDLIN(1375)									{
HXLINE(1375)										if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1375)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1375)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1375)											bool _hx_tmp34;
HXDLIN(1375)											if (::hx::IsNotNull( font )) {
HXLINE(1375)												_hx_tmp34 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1375)												_hx_tmp34 = false;
            											}
HXDLIN(1375)											if (_hx_tmp34) {
HXLINE(1375)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1375)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE(1375)												ascent = ( (Float)(currentFormat->size) );
HXDLIN(1375)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXDLIN(1375)										leading = ( (int)(currentFormat->leading) );
HXDLIN(1375)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1375)										if ((heightValue > maxHeightValue)) {
HXLINE(1375)											maxHeightValue = heightValue;
            										}
HXDLIN(1375)										if ((ascent > maxAscent)) {
HXLINE(1375)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_39:;
            							}
HXDLIN(1375)							textIndex = breakIndex;
            						}
            					}
HXLINE(1377)					layoutGroup = null();
            				}
            				else {
HXLINE(1379)					bool _hx_tmp35;
HXDLIN(1379)					if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1379)						_hx_tmp35 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1379)						_hx_tmp35 = false;
            					}
HXDLIN(1379)					if (_hx_tmp35) {
HXLINE(1382)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1384)							 ::openfl::text::_internal::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1384)							int index = (layoutGroup->positions->length - 1);
HXDLIN(1384)							Float _hx_tmp36;
HXDLIN(1384)							bool _hx_tmp37;
HXDLIN(1384)							if ((index >= 0)) {
HXLINE(1384)								_hx_tmp37 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1384)								_hx_tmp37 = false;
            							}
HXDLIN(1384)							if (_hx_tmp37) {
HXLINE(1384)								_hx_tmp36 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1384)								_hx_tmp36 = ( (Float)(0) );
            							}
HXDLIN(1384)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp36);
            						}
HXLINE(1387)						layoutGroup = null();
            					}
            				}
HXLINE(1390)				{
HXLINE(1390)					{
HXLINE(1390)						if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1390)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1390)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1390)							bool _hx_tmp38;
HXDLIN(1390)							if (::hx::IsNotNull( font )) {
HXLINE(1390)								_hx_tmp38 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1390)								_hx_tmp38 = false;
            							}
HXDLIN(1390)							if (_hx_tmp38) {
HXLINE(1390)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1390)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE(1390)								ascent = ( (Float)(currentFormat->size) );
HXDLIN(1390)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXDLIN(1390)						leading = ( (int)(currentFormat->leading) );
HXDLIN(1390)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1390)						if ((heightValue > maxHeightValue)) {
HXLINE(1390)							maxHeightValue = heightValue;
            						}
HXDLIN(1390)						if ((ascent > maxAscent)) {
HXLINE(1390)							maxAscent = ascent;
            						}
            					}
HXDLIN(1390)					int i2 = _gthis->layoutGroups->get_length();
HXDLIN(1390)					while(true){
HXLINE(1390)						i2 = (i2 - 1);
HXDLIN(1390)						if (!((i2 > -1))) {
HXLINE(1390)							goto _hx_goto_41;
            						}
HXDLIN(1390)						 ::openfl::text::_internal::TextLayoutGroup lg1 = _gthis->layoutGroups->get(i2).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1390)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1390)							goto _hx_goto_41;
            						}
HXDLIN(1390)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1390)							continue;
            						}
HXDLIN(1390)						lg1->ascent = maxAscent;
HXDLIN(1390)						lg1->height = ( (Float)(maxHeightValue) );
            					}
            					_hx_goto_41:;
HXDLIN(1390)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1390)					maxAscent = ((Float)0.0);
HXDLIN(1390)					maxHeightValue = 0;
HXDLIN(1390)					lineIndex = (lineIndex + 1);
HXDLIN(1390)					offsetX = ( (Float)(0) );
HXDLIN(1390)					firstLineOfParagraph = false;
            				}
HXLINE(1393)				if ((formatRange->end == breakIndex)) {
HXLINE(1395)					if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1395)						rangeIndex = (rangeIndex + 1);
HXDLIN(1395)						formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1395)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1395)						font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1396)					{
HXLINE(1396)						if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1396)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1396)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1396)							bool _hx_tmp39;
HXDLIN(1396)							if (::hx::IsNotNull( font )) {
HXLINE(1396)								_hx_tmp39 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1396)								_hx_tmp39 = false;
            							}
HXDLIN(1396)							if (_hx_tmp39) {
HXLINE(1396)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1396)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE(1396)								ascent = ( (Float)(currentFormat->size) );
HXDLIN(1396)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXDLIN(1396)						leading = ( (int)(currentFormat->leading) );
HXDLIN(1396)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1396)						if ((heightValue > maxHeightValue)) {
HXLINE(1396)							maxHeightValue = heightValue;
            						}
HXDLIN(1396)						if ((ascent > maxAscent)) {
HXLINE(1396)							maxAscent = ascent;
            						}
            					}
            				}
HXLINE(1399)				textIndex = (breakIndex + 1);
HXLINE(1400)				previousBreakIndex = breakIndex;
HXLINE(1401)				breakCount = (breakCount + 1);
HXLINE(1402)				if ((breakCount < this->lineBreaks->get_length())) {
HXLINE(1402)					breakIndex = this->lineBreaks->get(breakCount);
            				}
            				else {
HXLINE(1402)					breakIndex = -1;
            				}
HXLINE(1404)				{
HXLINE(1404)					firstLineOfParagraph = true;
HXDLIN(1404)					if (::hx::IsNotNull( currentFormat->align )) {
HXLINE(1404)						align = currentFormat->align;
            					}
            					else {
HXLINE(1404)						align = 3;
            					}
HXDLIN(1404)					if (::hx::IsNotNull( currentFormat->blockIndent )) {
HXLINE(1404)						blockIndent = ( (int)(currentFormat->blockIndent) );
            					}
            					else {
HXLINE(1404)						blockIndent = 0;
            					}
HXDLIN(1404)					if (::hx::IsNotNull( currentFormat->indent )) {
HXLINE(1404)						indent = ( (int)(currentFormat->indent) );
            					}
            					else {
HXLINE(1404)						indent = 0;
            					}
HXDLIN(1404)					if (::hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE(1404)						leftMargin = ( (int)(currentFormat->leftMargin) );
            					}
            					else {
HXLINE(1404)						leftMargin = 0;
            					}
HXDLIN(1404)					if (::hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1404)						rightMargin = ( (int)(currentFormat->rightMargin) );
            					}
            					else {
HXLINE(1404)						rightMargin = 0;
            					}
HXDLIN(1404)					bool _hx_tmp40 = ::hx::IsNotNull( currentFormat->bullet );
HXDLIN(1404)					bool _hx_tmp41 = ::hx::IsNotNull( currentFormat->tabStops );
            				}
            			}
            			else {
HXLINE(1406)				if ((spaceIndex > -1)) {
HXLINE(1410)					bool _hx_tmp42;
HXDLIN(1410)					if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1410)						_hx_tmp42 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1410)						_hx_tmp42 = false;
            					}
HXDLIN(1410)					if (_hx_tmp42) {
HXLINE(1412)						layoutGroup = null();
            					}
HXLINE(1415)					wrap = false;
HXLINE(1417)					while((textIndex < this->text.length)){
HXLINE(1421)						int endIndex2 = -1;
HXLINE(1423)						if ((spaceIndex == -1)) {
HXLINE(1425)							endIndex2 = breakIndex;
            						}
            						else {
HXLINE(1429)							endIndex2 = (spaceIndex + 1);
HXLINE(1431)							bool _hx_tmp43;
HXDLIN(1431)							if ((breakIndex > -1)) {
HXLINE(1431)								_hx_tmp43 = (breakIndex < endIndex2);
            							}
            							else {
HXLINE(1431)								_hx_tmp43 = false;
            							}
HXDLIN(1431)							if (_hx_tmp43) {
HXLINE(1433)								endIndex2 = breakIndex;
            							}
            						}
HXLINE(1437)						if ((endIndex2 == -1)) {
HXLINE(1439)							endIndex2 = this->text.length;
            						}
HXLINE(1442)						if ((textIndex >= endIndex2)) {
HXLINE(1442)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1442)							widthValue = ( (Float)(0) );
            						}
            						else {
HXLINE(1442)							if ((endIndex2 <= formatRange->end)) {
HXLINE(1442)								::String text12 = _gthis->text;
HXDLIN(1442)								Float letterSpacing12 = ((Float)0.0);
HXDLIN(1442)								if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)									letterSpacing12 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXDLIN(1442)								if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)									_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1442)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)								if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1442)								_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1442)								bool positions9;
HXDLIN(1442)								if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1442)									positions9 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1442)									positions9 = true;
            								}
HXDLIN(1442)								_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1442)								 ::openfl::text::_internal::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1442)								_gthis13->set_text(text12.substring(textIndex,endIndex2));
HXDLIN(1442)								if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1442)									positions = _gthis->_hx___textLayout->get_positions();
            								}
            								else {
HXLINE(1442)									positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            								}
HXDLIN(1442)								Float width13 = ((Float)0.0);
HXDLIN(1442)								{
HXLINE(1442)									int _g13 = 0;
HXDLIN(1442)									while((_g13 < positions->length)){
HXLINE(1442)										 ::openfl::text::_internal::GlyphPosition position14 = positions->__get(_g13).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1442)										_g13 = (_g13 + 1);
HXDLIN(1442)										width13 = (width13 + position14->advance->x);
            									}
            								}
HXDLIN(1442)								widthValue = width13;
            							}
            							else {
HXLINE(1442)								int tempIndex4 = textIndex;
HXDLIN(1442)								int tempRangeEnd6 = formatRange->end;
HXDLIN(1442)								int countRanges4 = 0;
HXDLIN(1442)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1442)								widthValue = ( (Float)(0) );
HXDLIN(1442)								while(true){
HXLINE(1442)									if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1442)										::String text13 = _gthis->text;
HXDLIN(1442)										Float letterSpacing13 = ((Float)0.0);
HXDLIN(1442)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)											letterSpacing13 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1442)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1442)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1442)										_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1442)										bool _hx_tmp44;
HXDLIN(1442)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1442)											_hx_tmp44 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1442)											_hx_tmp44 = true;
            										}
HXDLIN(1442)										_gthis->_hx___textLayout->autoHint = _hx_tmp44;
HXDLIN(1442)										 ::openfl::text::_internal::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1442)										_gthis14->set_text(text13.substring(tempIndex4,tempRangeEnd6));
HXDLIN(1442)										::Array< ::Dynamic> tempPositions4;
HXDLIN(1442)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1442)											tempPositions4 = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1442)											tempPositions4 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXDLIN(1442)										positions = positions->concat(tempPositions4);
            									}
HXDLIN(1442)									if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1442)										bool _hx_tmp45;
HXDLIN(1442)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1442)											rangeIndex = (rangeIndex + 1);
HXDLIN(1442)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1442)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)											_hx_tmp45 = true;
            										}
            										else {
HXLINE(1442)											_hx_tmp45 = false;
            										}
HXDLIN(1442)										if (!(_hx_tmp45)) {
HXLINE(1442)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)											goto _hx_goto_44;
            										}
HXDLIN(1442)										tempIndex4 = tempRangeEnd6;
HXDLIN(1442)										if ((endIndex2 < formatRange->end)) {
HXLINE(1442)											tempRangeEnd6 = endIndex2;
            										}
            										else {
HXLINE(1442)											tempRangeEnd6 = formatRange->end;
            										}
HXDLIN(1442)										countRanges4 = (countRanges4 + 1);
            									}
            									else {
HXLINE(1442)										Float width14 = ((Float)0.0);
HXDLIN(1442)										{
HXLINE(1442)											int _g14 = 0;
HXDLIN(1442)											while((_g14 < positions->length)){
HXLINE(1442)												 ::openfl::text::_internal::GlyphPosition position15 = positions->__get(_g14).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1442)												_g14 = (_g14 + 1);
HXDLIN(1442)												width14 = (width14 + position15->advance->x);
            											}
            										}
HXDLIN(1442)										widthValue = width14;
HXDLIN(1442)										goto _hx_goto_44;
            									}
            								}
            								_hx_goto_44:;
HXDLIN(1442)								rangeIndex = (rangeIndex - (countRanges4 + 1));
HXDLIN(1442)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1442)									rangeIndex = (rangeIndex + 1);
HXDLIN(1442)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1442)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)									font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1444)						if (::hx::IsEq( align,2 )) {
HXLINE(1446)							bool _hx_tmp46;
HXDLIN(1446)							if ((positions->length > 0)) {
HXLINE(1446)								_hx_tmp46 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1446)								_hx_tmp46 = false;
            							}
HXDLIN(1446)							if (_hx_tmp46) {
HXLINE(1449)								textIndex = (textIndex + 1);
HXLINE(1451)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
HXLINE(1452)								widthValue = (widthValue - spaceWidth);
HXLINE(1453)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1456)							bool _hx_tmp47;
HXDLIN(1456)							if ((positions->length > 0)) {
HXLINE(1456)								_hx_tmp47 = (endIndex2 == (spaceIndex + 1));
            							}
            							else {
HXLINE(1456)								_hx_tmp47 = false;
            							}
HXDLIN(1456)							if (_hx_tmp47) {
HXLINE(1459)								endIndex2 = (endIndex2 - 1);
HXLINE(1461)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
HXLINE(1462)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1466)						if (this->wordWrap) {
HXLINE(1468)							int _hx_tmp48;
HXDLIN(1468)							if (firstLineOfParagraph) {
HXLINE(1468)								_hx_tmp48 = indent;
            							}
            							else {
HXLINE(1468)								_hx_tmp48 = 0;
            							}
HXDLIN(1468)							if (((offsetX + widthValue) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp48)) )))) {
HXLINE(1470)								wrap = true;
HXLINE(1472)								bool _hx_tmp49;
HXDLIN(1472)								if ((positions->length > 0)) {
HXLINE(1472)									_hx_tmp49 = (endIndex2 == (spaceIndex + 1));
            								}
            								else {
HXLINE(1472)									_hx_tmp49 = false;
            								}
HXDLIN(1472)								if (_hx_tmp49) {
HXLINE(1476)									 ::openfl::text::_internal::GlyphPosition lastPosition = positions->__get((positions->length - 1)).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1477)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1479)									int _hx_tmp50;
HXDLIN(1479)									if (firstLineOfParagraph) {
HXLINE(1479)										_hx_tmp50 = indent;
            									}
            									else {
HXLINE(1479)										_hx_tmp50 = 0;
            									}
HXDLIN(1479)									if ((((offsetX + widthValue) - spaceWidth2) <= (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp50)) )))) {
HXLINE(1481)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1487)						if (wrap) {
HXLINE(1489)							bool _hx_tmp51;
HXDLIN(1489)							if (::hx::IsNotEq( align,2 )) {
HXLINE(1489)								if (::hx::IsNull( layoutGroup )) {
HXLINE(1489)									_hx_tmp51 = (this->layoutGroups->get_length() > 0);
            								}
            								else {
HXLINE(1489)									_hx_tmp51 = true;
            								}
            							}
            							else {
HXLINE(1489)								_hx_tmp51 = false;
            							}
HXDLIN(1489)							if (_hx_tmp51) {
HXLINE(1491)								 ::openfl::text::_internal::TextLayoutGroup previous = layoutGroup;
HXLINE(1492)								if (::hx::IsNull( previous )) {
HXLINE(1494)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1494)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
            								}
HXLINE(1498)								 ::openfl::text::_internal::TextLayoutGroup previous1 = previous;
HXDLIN(1498)								int index1 = (previous->positions->length - 1);
HXDLIN(1498)								Float _hx_tmp52;
HXDLIN(1498)								bool _hx_tmp53;
HXDLIN(1498)								if ((index1 >= 0)) {
HXLINE(1498)									_hx_tmp53 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1498)									_hx_tmp53 = false;
            								}
HXDLIN(1498)								if (_hx_tmp53) {
HXLINE(1498)									_hx_tmp52 = previous->positions->__get(index1).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1498)									_hx_tmp52 = ( (Float)(0) );
            								}
HXDLIN(1498)								previous1->width = (previous1->width - _hx_tmp52);
HXLINE(1499)								previous->endIndex--;
            							}
HXLINE(1502)							int i3 = (this->layoutGroups->get_length() - 1);
HXLINE(1503)							int offsetCount = 0;
HXLINE(1505)							while((i3 >= 0)){
HXLINE(1507)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1509)								bool _hx_tmp54;
HXDLIN(1509)								if ((i3 > 0)) {
HXLINE(1509)									_hx_tmp54 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1509)									_hx_tmp54 = false;
            								}
HXDLIN(1509)								if (_hx_tmp54) {
HXLINE(1511)									offsetCount = (offsetCount + 1);
            								}
            								else {
HXLINE(1515)									goto _hx_goto_46;
            								}
HXLINE(1518)								i3 = (i3 - 1);
            							}
            							_hx_goto_46:;
HXLINE(1521)							if ((textIndex == (previousSpaceIndex + 1))) {
HXLINE(1523)								{
HXLINE(1523)									if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1523)										ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1523)										descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            									}
            									else {
HXLINE(1523)										bool _hx_tmp55;
HXDLIN(1523)										if (::hx::IsNotNull( font )) {
HXLINE(1523)											_hx_tmp55 = (font->unitsPerEM != 0);
            										}
            										else {
HXLINE(1523)											_hx_tmp55 = false;
            										}
HXDLIN(1523)										if (_hx_tmp55) {
HXLINE(1523)											ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1523)											descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            										}
            										else {
HXLINE(1523)											ascent = ( (Float)(currentFormat->size) );
HXDLIN(1523)											descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            										}
            									}
HXDLIN(1523)									leading = ( (int)(currentFormat->leading) );
HXDLIN(1523)									heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1523)									if ((heightValue > maxHeightValue)) {
HXLINE(1523)										maxHeightValue = heightValue;
            									}
HXDLIN(1523)									if ((ascent > maxAscent)) {
HXLINE(1523)										maxAscent = ascent;
            									}
            								}
HXDLIN(1523)								int i4 = _gthis->layoutGroups->get_length();
HXDLIN(1523)								while(true){
HXLINE(1523)									i4 = (i4 - 1);
HXDLIN(1523)									if (!((i4 > -1))) {
HXLINE(1523)										goto _hx_goto_47;
            									}
HXDLIN(1523)									 ::openfl::text::_internal::TextLayoutGroup lg2 = _gthis->layoutGroups->get(i4).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1523)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1523)										goto _hx_goto_47;
            									}
HXDLIN(1523)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1523)										continue;
            									}
HXDLIN(1523)									lg2->ascent = maxAscent;
HXDLIN(1523)									lg2->height = ( (Float)(maxHeightValue) );
            								}
            								_hx_goto_47:;
HXDLIN(1523)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1523)								maxAscent = ((Float)0.0);
HXDLIN(1523)								maxHeightValue = 0;
HXDLIN(1523)								lineIndex = (lineIndex + 1);
HXDLIN(1523)								offsetX = ( (Float)(0) );
HXDLIN(1523)								firstLineOfParagraph = false;
            							}
HXLINE(1526)							offsetX = ( (Float)(0) );
HXLINE(1528)							if ((offsetCount > 0)) {
HXLINE(1530)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1530)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->offsetX;
HXLINE(1532)								{
HXLINE(1532)									int _g15 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1532)									int _g16 = this->layoutGroups->get_length();
HXDLIN(1532)									while((_g15 < _g16)){
HXLINE(1532)										_g15 = (_g15 + 1);
HXDLIN(1532)										int i5 = (_g15 - 1);
HXLINE(1534)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1535)										 ::openfl::text::_internal::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1535)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1536)										layoutGroup->offsetY = (offsetY + 2);
HXLINE(1537)										layoutGroup->lineIndex = lineIndex;
HXLINE(1538)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1542)							{
HXLINE(1542)								bool _hx_tmp56;
HXDLIN(1542)								if ((_gthis->width >= 4)) {
HXLINE(1542)									_hx_tmp56 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1542)									_hx_tmp56 = false;
            								}
HXDLIN(1542)								if (_hx_tmp56) {
HXLINE(1542)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1542)									int bufferCount1;
HXDLIN(1542)									int placeIndex1;
HXDLIN(1542)									Float positionWidth1;
HXDLIN(1542)									 ::openfl::text::_internal::GlyphPosition currentPosition1;
HXDLIN(1542)									Float width15 = ((Float)0.0);
HXDLIN(1542)									{
HXLINE(1542)										int _g17 = 0;
HXDLIN(1542)										while((_g17 < remainingPositions1->length)){
HXLINE(1542)											 ::openfl::text::_internal::GlyphPosition position16 = remainingPositions1->__get(_g17).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)											_g17 = (_g17 + 1);
HXDLIN(1542)											width15 = (width15 + position16->advance->x);
            										}
            									}
HXDLIN(1542)									Float tempWidth1 = width15;
HXDLIN(1542)									int i6 = (remainingPositions1->length - 1);
HXDLIN(1542)									while((i6 >= 0)){
HXLINE(1542)										 ::Dynamic currentCharCode1 = _gthis->text.charCodeAt((textIndex + i6));
HXDLIN(1542)										bool _hx_tmp57;
HXDLIN(1542)										if (::hx::IsNotEq( currentCharCode1,32 )) {
HXLINE(1542)											_hx_tmp57 = ::hx::IsNotEq( currentCharCode1,9 );
            										}
            										else {
HXLINE(1542)											_hx_tmp57 = false;
            										}
HXDLIN(1542)										if (_hx_tmp57) {
HXLINE(1542)											goto _hx_goto_50;
            										}
HXDLIN(1542)										 ::openfl::text::_internal::GlyphPosition position17 = remainingPositions1->__get(i6).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)										tempWidth1 = (tempWidth1 - position17->advance->x);
HXDLIN(1542)										i6 = (i6 - 1);
            									}
            									_hx_goto_50:;
HXDLIN(1542)									while(true){
HXLINE(1542)										bool _hx_tmp58;
HXDLIN(1542)										if ((remainingPositions1->length > 0)) {
HXLINE(1542)											int _hx_tmp59;
HXDLIN(1542)											if (firstLineOfParagraph) {
HXLINE(1542)												_hx_tmp59 = indent;
            											}
            											else {
HXLINE(1542)												_hx_tmp59 = 0;
            											}
HXDLIN(1542)											_hx_tmp58 = ((offsetX + tempWidth1) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp59)) )));
            										}
            										else {
HXLINE(1542)											_hx_tmp58 = false;
            										}
HXDLIN(1542)										if (!(_hx_tmp58)) {
HXLINE(1542)											goto _hx_goto_51;
            										}
HXDLIN(1542)										bufferCount1 = 0;
HXDLIN(1542)										i6 = bufferCount1;
HXDLIN(1542)										positionWidth1 = ((Float)0.0);
HXDLIN(1542)										while(true){
HXLINE(1542)											int _hx_tmp60;
HXDLIN(1542)											if (firstLineOfParagraph) {
HXLINE(1542)												_hx_tmp60 = indent;
            											}
            											else {
HXLINE(1542)												_hx_tmp60 = 0;
            											}
HXDLIN(1542)											if (!(((offsetX + positionWidth1) < (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp60)) ))))) {
HXLINE(1542)												goto _hx_goto_52;
            											}
HXDLIN(1542)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1542)												i6 = (i6 + 1);
HXDLIN(1542)												bufferCount1 = (bufferCount1 + 1);
            											}
            											else {
HXLINE(1542)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1542)												i6 = (i6 + 1);
            											}
            										}
            										_hx_goto_52:;
HXDLIN(1542)										if ((i6 == bufferCount1)) {
HXLINE(1542)											i6 = (bufferCount1 + 1);
            										}
            										else {
HXLINE(1542)											while(true){
HXLINE(1542)												bool _hx_tmp61;
HXDLIN(1542)												if ((i6 > 1)) {
HXLINE(1542)													int _hx_tmp62;
HXDLIN(1542)													if (firstLineOfParagraph) {
HXLINE(1542)														_hx_tmp62 = indent;
            													}
            													else {
HXLINE(1542)														_hx_tmp62 = 0;
            													}
HXDLIN(1542)													_hx_tmp61 = ((offsetX + positionWidth1) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp62)) )));
            												}
            												else {
HXLINE(1542)													_hx_tmp61 = false;
            												}
HXDLIN(1542)												if (!(_hx_tmp61)) {
HXLINE(1542)													goto _hx_goto_53;
            												}
HXDLIN(1542)												i6 = (i6 - 1);
HXDLIN(1542)												if (((i6 - bufferCount1) > 0)) {
HXLINE(1542)													{
HXLINE(1542)														int endIndex3 = ((textIndex + i6) - bufferCount1);
HXDLIN(1542)														if ((textIndex >= endIndex3)) {
HXLINE(1542)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)															widthValue = ( (Float)(0) );
            														}
            														else {
HXLINE(1542)															if ((endIndex3 <= formatRange->end)) {
HXLINE(1542)																::String text14 = _gthis->text;
HXDLIN(1542)																Float letterSpacing14 = ((Float)0.0);
HXDLIN(1542)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)																	letterSpacing14 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1542)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1542)																bool positions10;
HXDLIN(1542)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)																	positions10 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1542)																	positions10 = true;
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1542)																 ::openfl::text::_internal::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1542)																_gthis15->set_text(text14.substring(textIndex,endIndex3));
HXDLIN(1542)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)																	positions = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1542)																	positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1542)																Float width16 = ((Float)0.0);
HXDLIN(1542)																{
HXLINE(1542)																	int _g18 = 0;
HXDLIN(1542)																	while((_g18 < positions->length)){
HXLINE(1542)																		 ::openfl::text::_internal::GlyphPosition position18 = positions->__get(_g18).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																		_g18 = (_g18 + 1);
HXDLIN(1542)																		width16 = (width16 + position18->advance->x);
            																	}
            																}
HXDLIN(1542)																widthValue = width16;
            															}
            															else {
HXLINE(1542)																int tempIndex5 = textIndex;
HXDLIN(1542)																int tempRangeEnd7 = formatRange->end;
HXDLIN(1542)																int countRanges5 = 0;
HXDLIN(1542)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)																widthValue = ( (Float)(0) );
HXDLIN(1542)																while(true){
HXLINE(1542)																	if ((tempIndex5 != tempRangeEnd7)) {
HXLINE(1542)																		::String text15 = _gthis->text;
HXDLIN(1542)																		Float letterSpacing15 = ((Float)0.0);
HXDLIN(1542)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)																			letterSpacing15 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXDLIN(1542)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1542)																		bool _hx_tmp63;
HXDLIN(1542)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)																			_hx_tmp63 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1542)																			_hx_tmp63 = true;
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->autoHint = _hx_tmp63;
HXDLIN(1542)																		 ::openfl::text::_internal::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1542)																		_gthis16->set_text(text15.substring(tempIndex5,tempRangeEnd7));
HXDLIN(1542)																		::Array< ::Dynamic> tempPositions5;
HXDLIN(1542)																		if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)																			tempPositions5 = _gthis->_hx___textLayout->get_positions();
            																		}
            																		else {
HXLINE(1542)																			tempPositions5 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																		}
HXDLIN(1542)																		positions = positions->concat(tempPositions5);
            																	}
HXDLIN(1542)																	if ((tempRangeEnd7 != endIndex3)) {
HXLINE(1542)																		bool _hx_tmp64;
HXDLIN(1542)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1542)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1542)																			_hx_tmp64 = true;
            																		}
            																		else {
HXLINE(1542)																			_hx_tmp64 = false;
            																		}
HXDLIN(1542)																		if (!(_hx_tmp64)) {
HXLINE(1542)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1542)																			goto _hx_goto_55;
            																		}
HXDLIN(1542)																		tempIndex5 = tempRangeEnd7;
HXDLIN(1542)																		if ((endIndex3 < formatRange->end)) {
HXLINE(1542)																			tempRangeEnd7 = endIndex3;
            																		}
            																		else {
HXLINE(1542)																			tempRangeEnd7 = formatRange->end;
            																		}
HXDLIN(1542)																		countRanges5 = (countRanges5 + 1);
            																	}
            																	else {
HXLINE(1542)																		Float width17 = ((Float)0.0);
HXDLIN(1542)																		{
HXLINE(1542)																			int _g19 = 0;
HXDLIN(1542)																			while((_g19 < positions->length)){
HXLINE(1542)																				 ::openfl::text::_internal::GlyphPosition position19 = positions->__get(_g19).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																				_g19 = (_g19 + 1);
HXDLIN(1542)																				width17 = (width17 + position19->advance->x);
            																			}
            																		}
HXDLIN(1542)																		widthValue = width17;
HXDLIN(1542)																		goto _hx_goto_55;
            																	}
            																}
            																_hx_goto_55:;
HXDLIN(1542)																rangeIndex = (rangeIndex - (countRanges5 + 1));
HXDLIN(1542)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1542)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
            													}
HXDLIN(1542)													positionWidth1 = widthValue;
            												}
            												else {
HXLINE(1542)													i6 = 1;
HXDLIN(1542)													bufferCount1 = 0;
HXDLIN(1542)													{
HXLINE(1542)														int endIndex4 = (textIndex + 1);
HXDLIN(1542)														if ((textIndex >= endIndex4)) {
HXLINE(1542)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)															widthValue = ( (Float)(0) );
            														}
            														else {
HXLINE(1542)															if ((endIndex4 <= formatRange->end)) {
HXLINE(1542)																::String text16 = _gthis->text;
HXDLIN(1542)																Float letterSpacing16 = ((Float)0.0);
HXDLIN(1542)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)																	letterSpacing16 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1542)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1542)																bool positions11;
HXDLIN(1542)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)																	positions11 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1542)																	positions11 = true;
            																}
HXDLIN(1542)																_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1542)																 ::openfl::text::_internal::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1542)																_gthis17->set_text(text16.substring(textIndex,endIndex4));
HXDLIN(1542)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)																	positions = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1542)																	positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1542)																Float width18 = ((Float)0.0);
HXDLIN(1542)																{
HXLINE(1542)																	int _g20 = 0;
HXDLIN(1542)																	while((_g20 < positions->length)){
HXLINE(1542)																		 ::openfl::text::_internal::GlyphPosition position20 = positions->__get(_g20).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																		_g20 = (_g20 + 1);
HXDLIN(1542)																		width18 = (width18 + position20->advance->x);
            																	}
            																}
HXDLIN(1542)																widthValue = width18;
            															}
            															else {
HXLINE(1542)																int tempIndex6 = textIndex;
HXDLIN(1542)																int tempRangeEnd8 = formatRange->end;
HXDLIN(1542)																int countRanges6 = 0;
HXDLIN(1542)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)																widthValue = ( (Float)(0) );
HXDLIN(1542)																while(true){
HXLINE(1542)																	if ((tempIndex6 != tempRangeEnd8)) {
HXLINE(1542)																		::String text17 = _gthis->text;
HXDLIN(1542)																		Float letterSpacing17 = ((Float)0.0);
HXDLIN(1542)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)																			letterSpacing17 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXDLIN(1542)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1542)																		bool _hx_tmp65;
HXDLIN(1542)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)																			_hx_tmp65 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1542)																			_hx_tmp65 = true;
            																		}
HXDLIN(1542)																		_gthis->_hx___textLayout->autoHint = _hx_tmp65;
HXDLIN(1542)																		 ::openfl::text::_internal::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1542)																		_gthis18->set_text(text17.substring(tempIndex6,tempRangeEnd8));
HXDLIN(1542)																		::Array< ::Dynamic> tempPositions6;
HXDLIN(1542)																		if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)																			tempPositions6 = _gthis->_hx___textLayout->get_positions();
            																		}
            																		else {
HXLINE(1542)																			tempPositions6 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																		}
HXDLIN(1542)																		positions = positions->concat(tempPositions6);
            																	}
HXDLIN(1542)																	if ((tempRangeEnd8 != endIndex4)) {
HXLINE(1542)																		bool _hx_tmp66;
HXDLIN(1542)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1542)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1542)																			_hx_tmp66 = true;
            																		}
            																		else {
HXLINE(1542)																			_hx_tmp66 = false;
            																		}
HXDLIN(1542)																		if (!(_hx_tmp66)) {
HXLINE(1542)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1542)																			goto _hx_goto_58;
            																		}
HXDLIN(1542)																		tempIndex6 = tempRangeEnd8;
HXDLIN(1542)																		if ((endIndex4 < formatRange->end)) {
HXLINE(1542)																			tempRangeEnd8 = endIndex4;
            																		}
            																		else {
HXLINE(1542)																			tempRangeEnd8 = formatRange->end;
            																		}
HXDLIN(1542)																		countRanges6 = (countRanges6 + 1);
            																	}
            																	else {
HXLINE(1542)																		Float width19 = ((Float)0.0);
HXDLIN(1542)																		{
HXLINE(1542)																			int _g21 = 0;
HXDLIN(1542)																			while((_g21 < positions->length)){
HXLINE(1542)																				 ::openfl::text::_internal::GlyphPosition position21 = positions->__get(_g21).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																				_g21 = (_g21 + 1);
HXDLIN(1542)																				width19 = (width19 + position21->advance->x);
            																			}
            																		}
HXDLIN(1542)																		widthValue = width19;
HXDLIN(1542)																		goto _hx_goto_58;
            																	}
            																}
            																_hx_goto_58:;
HXDLIN(1542)																rangeIndex = (rangeIndex - (countRanges6 + 1));
HXDLIN(1542)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1542)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
            													}
HXDLIN(1542)													positionWidth1 = ( (Float)(0) );
            												}
            											}
            											_hx_goto_53:;
            										}
HXDLIN(1542)										placeIndex1 = ((textIndex + i6) - bufferCount1);
HXDLIN(1542)										{
HXLINE(1542)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1542)												::String text18 = _gthis->text;
HXDLIN(1542)												Float letterSpacing18 = ((Float)0.0);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)													letterSpacing18 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1542)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1542)												bool positions12;
HXDLIN(1542)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)													positions12 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1542)													positions12 = true;
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1542)												 ::openfl::text::_internal::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1542)												_gthis19->set_text(text18.substring(textIndex,placeIndex1));
HXDLIN(1542)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1542)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1542)												Float width20 = ((Float)0.0);
HXDLIN(1542)												{
HXLINE(1542)													int _g22 = 0;
HXDLIN(1542)													while((_g22 < positions->length)){
HXLINE(1542)														 ::openfl::text::_internal::GlyphPosition position22 = positions->__get(_g22).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)														_g22 = (_g22 + 1);
HXDLIN(1542)														width20 = (width20 + position22->advance->x);
            													}
            												}
HXDLIN(1542)												widthValue = width20;
HXDLIN(1542)												bool _hx_tmp67;
HXDLIN(1542)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1542)													_hx_tmp67 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1542)													_hx_tmp67 = true;
            												}
HXDLIN(1542)												if (_hx_tmp67) {
HXLINE(1542)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXDLIN(1542)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1542)													layoutGroup->format = formatRange->format;
HXDLIN(1542)													layoutGroup->startIndex = textIndex;
HXDLIN(1542)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1542)												layoutGroup->positions = positions;
HXDLIN(1542)												int _hx_tmp68;
HXDLIN(1542)												if (firstLineOfParagraph) {
HXLINE(1542)													_hx_tmp68 = indent;
            												}
            												else {
HXLINE(1542)													_hx_tmp68 = 0;
            												}
HXDLIN(1542)												layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp68)) ));
HXDLIN(1542)												layoutGroup->ascent = ascent;
HXDLIN(1542)												layoutGroup->descent = descent;
HXDLIN(1542)												layoutGroup->leading = leading;
HXDLIN(1542)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1542)												layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1542)												layoutGroup->width = widthValue;
HXDLIN(1542)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1542)												offsetX = (offsetX + widthValue);
HXDLIN(1542)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1542)													layoutGroup = null();
HXDLIN(1542)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)														rangeIndex = (rangeIndex + 1);
HXDLIN(1542)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1542)													{
HXLINE(1542)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1542)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1542)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1542)															bool _hx_tmp69;
HXDLIN(1542)															if (::hx::IsNotNull( font )) {
HXLINE(1542)																_hx_tmp69 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1542)																_hx_tmp69 = false;
            															}
HXDLIN(1542)															if (_hx_tmp69) {
HXLINE(1542)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1542)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1542)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1542)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1542)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1542)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1542)														if ((heightValue > maxHeightValue)) {
HXLINE(1542)															maxHeightValue = heightValue;
            														}
HXDLIN(1542)														if ((ascent > maxAscent)) {
HXLINE(1542)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1542)												while(true){
HXLINE(1542)													int tempRangeEnd9;
HXDLIN(1542)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1542)														tempRangeEnd9 = placeIndex1;
            													}
            													else {
HXLINE(1542)														tempRangeEnd9 = formatRange->end;
            													}
HXDLIN(1542)													if ((textIndex != tempRangeEnd9)) {
HXLINE(1542)														::String text19 = _gthis->text;
HXDLIN(1542)														Float letterSpacing19 = ((Float)0.0);
HXDLIN(1542)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)															letterSpacing19 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1542)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1542)														bool positions13;
HXDLIN(1542)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)															positions13 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1542)															positions13 = true;
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1542)														 ::openfl::text::_internal::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1542)														_gthis20->set_text(text19.substring(textIndex,tempRangeEnd9));
HXDLIN(1542)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1542)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1542)														Float width21 = ((Float)0.0);
HXDLIN(1542)														{
HXLINE(1542)															int _g23 = 0;
HXDLIN(1542)															while((_g23 < positions->length)){
HXLINE(1542)																 ::openfl::text::_internal::GlyphPosition position23 = positions->__get(_g23).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																_g23 = (_g23 + 1);
HXDLIN(1542)																width21 = (width21 + position23->advance->x);
            															}
            														}
HXDLIN(1542)														widthValue = width21;
HXDLIN(1542)														bool _hx_tmp70;
HXDLIN(1542)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1542)															_hx_tmp70 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1542)															_hx_tmp70 = true;
            														}
HXDLIN(1542)														if (_hx_tmp70) {
HXLINE(1542)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXDLIN(1542)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1542)															layoutGroup->format = formatRange->format;
HXDLIN(1542)															layoutGroup->startIndex = textIndex;
HXDLIN(1542)															layoutGroup->endIndex = tempRangeEnd9;
            														}
HXDLIN(1542)														layoutGroup->positions = positions;
HXDLIN(1542)														int _hx_tmp71;
HXDLIN(1542)														if (firstLineOfParagraph) {
HXLINE(1542)															_hx_tmp71 = indent;
            														}
            														else {
HXLINE(1542)															_hx_tmp71 = 0;
            														}
HXDLIN(1542)														layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp71)) ));
HXDLIN(1542)														layoutGroup->ascent = ascent;
HXDLIN(1542)														layoutGroup->descent = descent;
HXDLIN(1542)														layoutGroup->leading = leading;
HXDLIN(1542)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1542)														layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1542)														layoutGroup->width = widthValue;
HXDLIN(1542)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1542)														offsetX = (offsetX + widthValue);
HXDLIN(1542)														textIndex = tempRangeEnd9;
            													}
HXDLIN(1542)													if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1542)														layoutGroup = null();
            													}
HXDLIN(1542)													if ((tempRangeEnd9 == placeIndex1)) {
HXLINE(1542)														goto _hx_goto_61;
            													}
HXDLIN(1542)													bool _hx_tmp72;
HXDLIN(1542)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)														rangeIndex = (rangeIndex + 1);
HXDLIN(1542)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1542)														_hx_tmp72 = true;
            													}
            													else {
HXLINE(1542)														_hx_tmp72 = false;
            													}
HXDLIN(1542)													if (!(_hx_tmp72)) {
HXLINE(1542)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1542)														goto _hx_goto_61;
            													}
HXDLIN(1542)													{
HXLINE(1542)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1542)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1542)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1542)															bool _hx_tmp73;
HXDLIN(1542)															if (::hx::IsNotNull( font )) {
HXLINE(1542)																_hx_tmp73 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1542)																_hx_tmp73 = false;
            															}
HXDLIN(1542)															if (_hx_tmp73) {
HXLINE(1542)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1542)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1542)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1542)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1542)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1542)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1542)														if ((heightValue > maxHeightValue)) {
HXLINE(1542)															maxHeightValue = heightValue;
            														}
HXDLIN(1542)														if ((ascent > maxAscent)) {
HXLINE(1542)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_61:;
            											}
HXDLIN(1542)											textIndex = placeIndex1;
            										}
HXDLIN(1542)										{
HXLINE(1542)											{
HXLINE(1542)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1542)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1542)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1542)													bool _hx_tmp74;
HXDLIN(1542)													if (::hx::IsNotNull( font )) {
HXLINE(1542)														_hx_tmp74 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1542)														_hx_tmp74 = false;
            													}
HXDLIN(1542)													if (_hx_tmp74) {
HXLINE(1542)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1542)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1542)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1542)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1542)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1542)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1542)												if ((heightValue > maxHeightValue)) {
HXLINE(1542)													maxHeightValue = heightValue;
            												}
HXDLIN(1542)												if ((ascent > maxAscent)) {
HXLINE(1542)													maxAscent = ascent;
            												}
            											}
HXDLIN(1542)											int i7 = _gthis->layoutGroups->get_length();
HXDLIN(1542)											while(true){
HXLINE(1542)												i7 = (i7 - 1);
HXDLIN(1542)												if (!((i7 > -1))) {
HXLINE(1542)													goto _hx_goto_63;
            												}
HXDLIN(1542)												 ::openfl::text::_internal::TextLayoutGroup lg3 = _gthis->layoutGroups->get(i7).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1542)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1542)													goto _hx_goto_63;
            												}
HXDLIN(1542)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1542)													continue;
            												}
HXDLIN(1542)												lg3->ascent = maxAscent;
HXDLIN(1542)												lg3->height = ( (Float)(maxHeightValue) );
            											}
            											_hx_goto_63:;
HXDLIN(1542)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1542)											maxAscent = ((Float)0.0);
HXDLIN(1542)											maxHeightValue = 0;
HXDLIN(1542)											lineIndex = (lineIndex + 1);
HXDLIN(1542)											offsetX = ( (Float)(0) );
HXDLIN(1542)											firstLineOfParagraph = false;
            										}
HXDLIN(1542)										if ((placeIndex1 >= endIndex2)) {
HXLINE(1542)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)											widthValue = ( (Float)(0) );
            										}
            										else {
HXLINE(1542)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1542)												::String text20 = _gthis->text;
HXDLIN(1542)												Float letterSpacing20 = ((Float)0.0);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)													letterSpacing20 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1542)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1542)												bool positions14;
HXDLIN(1542)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)													positions14 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1542)													positions14 = true;
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1542)												 ::openfl::text::_internal::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1542)												_gthis21->set_text(text20.substring(placeIndex1,endIndex2));
HXDLIN(1542)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1542)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1542)												Float width22 = ((Float)0.0);
HXDLIN(1542)												{
HXLINE(1542)													int _g24 = 0;
HXDLIN(1542)													while((_g24 < positions->length)){
HXLINE(1542)														 ::openfl::text::_internal::GlyphPosition position24 = positions->__get(_g24).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)														_g24 = (_g24 + 1);
HXDLIN(1542)														width22 = (width22 + position24->advance->x);
            													}
            												}
HXDLIN(1542)												widthValue = width22;
            											}
            											else {
HXLINE(1542)												int tempIndex7 = placeIndex1;
HXDLIN(1542)												int tempRangeEnd10 = formatRange->end;
HXDLIN(1542)												int countRanges7 = 0;
HXDLIN(1542)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1542)												widthValue = ( (Float)(0) );
HXDLIN(1542)												while(true){
HXLINE(1542)													if ((tempIndex7 != tempRangeEnd10)) {
HXLINE(1542)														::String text21 = _gthis->text;
HXDLIN(1542)														Float letterSpacing21 = ((Float)0.0);
HXDLIN(1542)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)															letterSpacing21 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1542)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1542)														bool _hx_tmp75;
HXDLIN(1542)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)															_hx_tmp75 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1542)															_hx_tmp75 = true;
            														}
HXDLIN(1542)														_gthis->_hx___textLayout->autoHint = _hx_tmp75;
HXDLIN(1542)														 ::openfl::text::_internal::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1542)														_gthis22->set_text(text21.substring(tempIndex7,tempRangeEnd10));
HXDLIN(1542)														::Array< ::Dynamic> tempPositions7;
HXDLIN(1542)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)															tempPositions7 = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1542)															tempPositions7 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1542)														positions = positions->concat(tempPositions7);
            													}
HXDLIN(1542)													if ((tempRangeEnd10 != endIndex2)) {
HXLINE(1542)														bool _hx_tmp76;
HXDLIN(1542)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)															rangeIndex = (rangeIndex + 1);
HXDLIN(1542)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1542)															_hx_tmp76 = true;
            														}
            														else {
HXLINE(1542)															_hx_tmp76 = false;
            														}
HXDLIN(1542)														if (!(_hx_tmp76)) {
HXLINE(1542)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1542)															goto _hx_goto_65;
            														}
HXDLIN(1542)														tempIndex7 = tempRangeEnd10;
HXDLIN(1542)														if ((endIndex2 < formatRange->end)) {
HXLINE(1542)															tempRangeEnd10 = endIndex2;
            														}
            														else {
HXLINE(1542)															tempRangeEnd10 = formatRange->end;
            														}
HXDLIN(1542)														countRanges7 = (countRanges7 + 1);
            													}
            													else {
HXLINE(1542)														Float width23 = ((Float)0.0);
HXDLIN(1542)														{
HXLINE(1542)															int _g25 = 0;
HXDLIN(1542)															while((_g25 < positions->length)){
HXLINE(1542)																 ::openfl::text::_internal::GlyphPosition position25 = positions->__get(_g25).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)																_g25 = (_g25 + 1);
HXDLIN(1542)																width23 = (width23 + position25->advance->x);
            															}
            														}
HXDLIN(1542)														widthValue = width23;
HXDLIN(1542)														goto _hx_goto_65;
            													}
            												}
            												_hx_goto_65:;
HXDLIN(1542)												rangeIndex = (rangeIndex - (countRanges7 + 1));
HXDLIN(1542)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)													rangeIndex = (rangeIndex + 1);
HXDLIN(1542)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
            										}
HXDLIN(1542)										remainingPositions1 = positions;
HXDLIN(1542)										tempWidth1 = widthValue;
            									}
            									_hx_goto_51:;
            								}
HXDLIN(1542)								{
HXLINE(1542)									if ((endIndex2 <= formatRange->end)) {
HXLINE(1542)										::String text22 = _gthis->text;
HXDLIN(1542)										Float letterSpacing22 = ((Float)0.0);
HXDLIN(1542)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)											letterSpacing22 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1542)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1542)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1542)										_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1542)										bool positions15;
HXDLIN(1542)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)											positions15 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1542)											positions15 = true;
            										}
HXDLIN(1542)										_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1542)										 ::openfl::text::_internal::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1542)										_gthis23->set_text(text22.substring(textIndex,endIndex2));
HXDLIN(1542)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)											positions = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1542)											positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXDLIN(1542)										Float width24 = ((Float)0.0);
HXDLIN(1542)										{
HXLINE(1542)											int _g26 = 0;
HXDLIN(1542)											while((_g26 < positions->length)){
HXLINE(1542)												 ::openfl::text::_internal::GlyphPosition position26 = positions->__get(_g26).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)												_g26 = (_g26 + 1);
HXDLIN(1542)												width24 = (width24 + position26->advance->x);
            											}
            										}
HXDLIN(1542)										widthValue = width24;
HXDLIN(1542)										bool _hx_tmp77;
HXDLIN(1542)										if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1542)											_hx_tmp77 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1542)											_hx_tmp77 = true;
            										}
HXDLIN(1542)										if (_hx_tmp77) {
HXLINE(1542)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1542)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1542)											layoutGroup->format = formatRange->format;
HXDLIN(1542)											layoutGroup->startIndex = textIndex;
HXDLIN(1542)											layoutGroup->endIndex = endIndex2;
            										}
HXDLIN(1542)										layoutGroup->positions = positions;
HXDLIN(1542)										int _hx_tmp78;
HXDLIN(1542)										if (firstLineOfParagraph) {
HXLINE(1542)											_hx_tmp78 = indent;
            										}
            										else {
HXLINE(1542)											_hx_tmp78 = 0;
            										}
HXDLIN(1542)										layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp78)) ));
HXDLIN(1542)										layoutGroup->ascent = ascent;
HXDLIN(1542)										layoutGroup->descent = descent;
HXDLIN(1542)										layoutGroup->leading = leading;
HXDLIN(1542)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1542)										layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1542)										layoutGroup->width = widthValue;
HXDLIN(1542)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1542)										offsetX = (offsetX + widthValue);
HXDLIN(1542)										if ((endIndex2 == formatRange->end)) {
HXLINE(1542)											layoutGroup = null();
HXDLIN(1542)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)												rangeIndex = (rangeIndex + 1);
HXDLIN(1542)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1542)											{
HXLINE(1542)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1542)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1542)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1542)													bool _hx_tmp79;
HXDLIN(1542)													if (::hx::IsNotNull( font )) {
HXLINE(1542)														_hx_tmp79 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1542)														_hx_tmp79 = false;
            													}
HXDLIN(1542)													if (_hx_tmp79) {
HXLINE(1542)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1542)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1542)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1542)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1542)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1542)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1542)												if ((heightValue > maxHeightValue)) {
HXLINE(1542)													maxHeightValue = heightValue;
            												}
HXDLIN(1542)												if ((ascent > maxAscent)) {
HXLINE(1542)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1542)										while(true){
HXLINE(1542)											int tempRangeEnd11;
HXDLIN(1542)											if ((endIndex2 < formatRange->end)) {
HXLINE(1542)												tempRangeEnd11 = endIndex2;
            											}
            											else {
HXLINE(1542)												tempRangeEnd11 = formatRange->end;
            											}
HXDLIN(1542)											if ((textIndex != tempRangeEnd11)) {
HXLINE(1542)												::String text23 = _gthis->text;
HXDLIN(1542)												Float letterSpacing23 = ((Float)0.0);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1542)													letterSpacing23 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1542)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1542)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1542)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1542)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1542)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1542)												bool positions16;
HXDLIN(1542)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1542)													positions16 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1542)													positions16 = true;
            												}
HXDLIN(1542)												_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1542)												 ::openfl::text::_internal::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1542)												_gthis24->set_text(text23.substring(textIndex,tempRangeEnd11));
HXDLIN(1542)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1542)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1542)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1542)												Float width25 = ((Float)0.0);
HXDLIN(1542)												{
HXLINE(1542)													int _g27 = 0;
HXDLIN(1542)													while((_g27 < positions->length)){
HXLINE(1542)														 ::openfl::text::_internal::GlyphPosition position27 = positions->__get(_g27).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1542)														_g27 = (_g27 + 1);
HXDLIN(1542)														width25 = (width25 + position27->advance->x);
            													}
            												}
HXDLIN(1542)												widthValue = width25;
HXDLIN(1542)												bool _hx_tmp80;
HXDLIN(1542)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1542)													_hx_tmp80 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1542)													_hx_tmp80 = true;
            												}
HXDLIN(1542)												if (_hx_tmp80) {
HXLINE(1542)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXDLIN(1542)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1542)													layoutGroup->format = formatRange->format;
HXDLIN(1542)													layoutGroup->startIndex = textIndex;
HXDLIN(1542)													layoutGroup->endIndex = tempRangeEnd11;
            												}
HXDLIN(1542)												layoutGroup->positions = positions;
HXDLIN(1542)												int _hx_tmp81;
HXDLIN(1542)												if (firstLineOfParagraph) {
HXLINE(1542)													_hx_tmp81 = indent;
            												}
            												else {
HXLINE(1542)													_hx_tmp81 = 0;
            												}
HXDLIN(1542)												layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp81)) ));
HXDLIN(1542)												layoutGroup->ascent = ascent;
HXDLIN(1542)												layoutGroup->descent = descent;
HXDLIN(1542)												layoutGroup->leading = leading;
HXDLIN(1542)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1542)												layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1542)												layoutGroup->width = widthValue;
HXDLIN(1542)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1542)												offsetX = (offsetX + widthValue);
HXDLIN(1542)												textIndex = tempRangeEnd11;
            											}
HXDLIN(1542)											if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1542)												layoutGroup = null();
            											}
HXDLIN(1542)											if ((tempRangeEnd11 == endIndex2)) {
HXLINE(1542)												goto _hx_goto_68;
            											}
HXDLIN(1542)											bool _hx_tmp82;
HXDLIN(1542)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1542)												rangeIndex = (rangeIndex + 1);
HXDLIN(1542)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1542)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1542)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1542)												_hx_tmp82 = true;
            											}
            											else {
HXLINE(1542)												_hx_tmp82 = false;
            											}
HXDLIN(1542)											if (!(_hx_tmp82)) {
HXLINE(1542)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1542)												goto _hx_goto_68;
            											}
HXDLIN(1542)											{
HXLINE(1542)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1542)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1542)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1542)													bool _hx_tmp83;
HXDLIN(1542)													if (::hx::IsNotNull( font )) {
HXLINE(1542)														_hx_tmp83 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1542)														_hx_tmp83 = false;
            													}
HXDLIN(1542)													if (_hx_tmp83) {
HXLINE(1542)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1542)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1542)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1542)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1542)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1542)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1542)												if ((heightValue > maxHeightValue)) {
HXLINE(1542)													maxHeightValue = heightValue;
            												}
HXDLIN(1542)												if ((ascent > maxAscent)) {
HXLINE(1542)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_68:;
            									}
HXDLIN(1542)									textIndex = endIndex2;
            								}
            							}
HXLINE(1544)							wrap = false;
            						}
            						else {
HXLINE(1548)							bool _hx_tmp84;
HXDLIN(1548)							bool _hx_tmp85;
HXDLIN(1548)							if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1548)								_hx_tmp85 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1548)								_hx_tmp85 = false;
            							}
HXDLIN(1548)							if (_hx_tmp85) {
HXLINE(1548)								_hx_tmp84 = (previousSpaceIndex != (spaceIndex - 1));
            							}
            							else {
HXLINE(1548)								_hx_tmp84 = false;
            							}
HXDLIN(1548)							if (_hx_tmp84) {
HXLINE(1551)								if (::hx::IsNotEq( align,2 )) {
HXLINE(1553)									layoutGroup->endIndex = spaceIndex;
HXLINE(1554)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1555)									 ::openfl::text::_internal::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1555)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1557)								offsetX = (offsetX + widthValue);
HXLINE(1559)								textIndex = endIndex2;
            							}
            							else {
HXLINE(1561)								bool _hx_tmp86;
HXDLIN(1561)								if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1561)									_hx_tmp86 = ::hx::IsEq( align,2 );
            								}
            								else {
HXLINE(1561)									_hx_tmp86 = true;
            								}
HXDLIN(1561)								if (_hx_tmp86) {
HXLINE(1563)									{
HXLINE(1563)										bool _hx_tmp87;
HXDLIN(1563)										if ((_gthis->width >= 4)) {
HXLINE(1563)											_hx_tmp87 = _gthis->wordWrap;
            										}
            										else {
HXLINE(1563)											_hx_tmp87 = false;
            										}
HXDLIN(1563)										if (_hx_tmp87) {
HXLINE(1563)											::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1563)											int bufferCount2;
HXDLIN(1563)											int placeIndex2;
HXDLIN(1563)											Float positionWidth2;
HXDLIN(1563)											 ::openfl::text::_internal::GlyphPosition currentPosition2;
HXDLIN(1563)											Float width26 = ((Float)0.0);
HXDLIN(1563)											{
HXLINE(1563)												int _g28 = 0;
HXDLIN(1563)												while((_g28 < remainingPositions2->length)){
HXLINE(1563)													 ::openfl::text::_internal::GlyphPosition position28 = remainingPositions2->__get(_g28).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)													_g28 = (_g28 + 1);
HXDLIN(1563)													width26 = (width26 + position28->advance->x);
            												}
            											}
HXDLIN(1563)											Float tempWidth2 = width26;
HXDLIN(1563)											int i8 = (remainingPositions2->length - 1);
HXDLIN(1563)											while((i8 >= 0)){
HXLINE(1563)												 ::Dynamic currentCharCode2 = _gthis->text.charCodeAt((textIndex + i8));
HXDLIN(1563)												bool _hx_tmp88;
HXDLIN(1563)												if (::hx::IsNotEq( currentCharCode2,32 )) {
HXLINE(1563)													_hx_tmp88 = ::hx::IsNotEq( currentCharCode2,9 );
            												}
            												else {
HXLINE(1563)													_hx_tmp88 = false;
            												}
HXDLIN(1563)												if (_hx_tmp88) {
HXLINE(1563)													goto _hx_goto_71;
            												}
HXDLIN(1563)												 ::openfl::text::_internal::GlyphPosition position29 = remainingPositions2->__get(i8).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)												tempWidth2 = (tempWidth2 - position29->advance->x);
HXDLIN(1563)												i8 = (i8 - 1);
            											}
            											_hx_goto_71:;
HXDLIN(1563)											while(true){
HXLINE(1563)												bool _hx_tmp89;
HXDLIN(1563)												if ((remainingPositions2->length > 0)) {
HXLINE(1563)													int _hx_tmp90;
HXDLIN(1563)													if (firstLineOfParagraph) {
HXLINE(1563)														_hx_tmp90 = indent;
            													}
            													else {
HXLINE(1563)														_hx_tmp90 = 0;
            													}
HXDLIN(1563)													_hx_tmp89 = ((offsetX + tempWidth2) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp90)) )));
            												}
            												else {
HXLINE(1563)													_hx_tmp89 = false;
            												}
HXDLIN(1563)												if (!(_hx_tmp89)) {
HXLINE(1563)													goto _hx_goto_72;
            												}
HXDLIN(1563)												bufferCount2 = 0;
HXDLIN(1563)												i8 = bufferCount2;
HXDLIN(1563)												positionWidth2 = ((Float)0.0);
HXDLIN(1563)												while(true){
HXLINE(1563)													int _hx_tmp91;
HXDLIN(1563)													if (firstLineOfParagraph) {
HXLINE(1563)														_hx_tmp91 = indent;
            													}
            													else {
HXLINE(1563)														_hx_tmp91 = 0;
            													}
HXDLIN(1563)													if (!(((offsetX + positionWidth2) < (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp91)) ))))) {
HXLINE(1563)														goto _hx_goto_73;
            													}
HXDLIN(1563)													currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)													if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1563)														i8 = (i8 + 1);
HXDLIN(1563)														bufferCount2 = (bufferCount2 + 1);
            													}
            													else {
HXLINE(1563)														positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1563)														i8 = (i8 + 1);
            													}
            												}
            												_hx_goto_73:;
HXDLIN(1563)												if ((i8 == bufferCount2)) {
HXLINE(1563)													i8 = (bufferCount2 + 1);
            												}
            												else {
HXLINE(1563)													while(true){
HXLINE(1563)														bool _hx_tmp92;
HXDLIN(1563)														if ((i8 > 1)) {
HXLINE(1563)															int _hx_tmp93;
HXDLIN(1563)															if (firstLineOfParagraph) {
HXLINE(1563)																_hx_tmp93 = indent;
            															}
            															else {
HXLINE(1563)																_hx_tmp93 = 0;
            															}
HXDLIN(1563)															_hx_tmp92 = ((offsetX + positionWidth2) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp93)) )));
            														}
            														else {
HXLINE(1563)															_hx_tmp92 = false;
            														}
HXDLIN(1563)														if (!(_hx_tmp92)) {
HXLINE(1563)															goto _hx_goto_74;
            														}
HXDLIN(1563)														i8 = (i8 - 1);
HXDLIN(1563)														if (((i8 - bufferCount2) > 0)) {
HXLINE(1563)															{
HXLINE(1563)																int endIndex5 = ((textIndex + i8) - bufferCount2);
HXDLIN(1563)																if ((textIndex >= endIndex5)) {
HXLINE(1563)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)																	widthValue = ( (Float)(0) );
            																}
            																else {
HXLINE(1563)																	if ((endIndex5 <= formatRange->end)) {
HXLINE(1563)																		::String text24 = _gthis->text;
HXDLIN(1563)																		Float letterSpacing24 = ((Float)0.0);
HXDLIN(1563)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																			letterSpacing24 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXDLIN(1563)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1563)																		bool positions17;
HXDLIN(1563)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																			positions17 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1563)																			positions17 = true;
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1563)																		 ::openfl::text::_internal::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1563)																		_gthis25->set_text(text24.substring(textIndex,endIndex5));
HXDLIN(1563)																		if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																			positions = _gthis->_hx___textLayout->get_positions();
            																		}
            																		else {
HXLINE(1563)																			positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																		}
HXDLIN(1563)																		Float width27 = ((Float)0.0);
HXDLIN(1563)																		{
HXLINE(1563)																			int _g29 = 0;
HXDLIN(1563)																			while((_g29 < positions->length)){
HXLINE(1563)																				 ::openfl::text::_internal::GlyphPosition position30 = positions->__get(_g29).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																				_g29 = (_g29 + 1);
HXDLIN(1563)																				width27 = (width27 + position30->advance->x);
            																			}
            																		}
HXDLIN(1563)																		widthValue = width27;
            																	}
            																	else {
HXLINE(1563)																		int tempIndex8 = textIndex;
HXDLIN(1563)																		int tempRangeEnd12 = formatRange->end;
HXDLIN(1563)																		int countRanges8 = 0;
HXDLIN(1563)																		positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)																		widthValue = ( (Float)(0) );
HXDLIN(1563)																		while(true){
HXLINE(1563)																			if ((tempIndex8 != tempRangeEnd12)) {
HXLINE(1563)																				::String text25 = _gthis->text;
HXDLIN(1563)																				Float letterSpacing25 = ((Float)0.0);
HXDLIN(1563)																				if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																					letterSpacing25 = ( (Float)(formatRange->format->letterSpacing) );
            																				}
HXDLIN(1563)																				if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																					_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																				_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																				if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																					_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1563)																				bool _hx_tmp94;
HXDLIN(1563)																				if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																					_hx_tmp94 = (_gthis->sharpness < 400);
            																				}
            																				else {
HXLINE(1563)																					_hx_tmp94 = true;
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->autoHint = _hx_tmp94;
HXDLIN(1563)																				 ::openfl::text::_internal::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1563)																				_gthis26->set_text(text25.substring(tempIndex8,tempRangeEnd12));
HXDLIN(1563)																				::Array< ::Dynamic> tempPositions8;
HXDLIN(1563)																				if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																					tempPositions8 = _gthis->_hx___textLayout->get_positions();
            																				}
            																				else {
HXLINE(1563)																					tempPositions8 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																				}
HXDLIN(1563)																				positions = positions->concat(tempPositions8);
            																			}
HXDLIN(1563)																			if ((tempRangeEnd12 != endIndex5)) {
HXLINE(1563)																				bool _hx_tmp95;
HXDLIN(1563)																				if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																					rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																					formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																					currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																					font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)																					_hx_tmp95 = true;
            																				}
            																				else {
HXLINE(1563)																					_hx_tmp95 = false;
            																				}
HXDLIN(1563)																				if (!(_hx_tmp95)) {
HXLINE(1563)																					::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1563)																					goto _hx_goto_76;
            																				}
HXDLIN(1563)																				tempIndex8 = tempRangeEnd12;
HXDLIN(1563)																				if ((endIndex5 < formatRange->end)) {
HXLINE(1563)																					tempRangeEnd12 = endIndex5;
            																				}
            																				else {
HXLINE(1563)																					tempRangeEnd12 = formatRange->end;
            																				}
HXDLIN(1563)																				countRanges8 = (countRanges8 + 1);
            																			}
            																			else {
HXLINE(1563)																				Float width28 = ((Float)0.0);
HXDLIN(1563)																				{
HXLINE(1563)																					int _g30 = 0;
HXDLIN(1563)																					while((_g30 < positions->length)){
HXLINE(1563)																						 ::openfl::text::_internal::GlyphPosition position31 = positions->__get(_g30).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																						_g30 = (_g30 + 1);
HXDLIN(1563)																						width28 = (width28 + position31->advance->x);
            																					}
            																				}
HXDLIN(1563)																				widthValue = width28;
HXDLIN(1563)																				goto _hx_goto_76;
            																			}
            																		}
            																		_hx_goto_76:;
HXDLIN(1563)																		rangeIndex = (rangeIndex - (countRanges8 + 1));
HXDLIN(1563)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																		}
            																	}
            																}
            															}
HXDLIN(1563)															positionWidth2 = widthValue;
            														}
            														else {
HXLINE(1563)															i8 = 1;
HXDLIN(1563)															bufferCount2 = 0;
HXDLIN(1563)															{
HXLINE(1563)																int endIndex6 = (textIndex + 1);
HXDLIN(1563)																if ((textIndex >= endIndex6)) {
HXLINE(1563)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)																	widthValue = ( (Float)(0) );
            																}
            																else {
HXLINE(1563)																	if ((endIndex6 <= formatRange->end)) {
HXLINE(1563)																		::String text26 = _gthis->text;
HXDLIN(1563)																		Float letterSpacing26 = ((Float)0.0);
HXDLIN(1563)																		if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																			letterSpacing26 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXDLIN(1563)																		if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																		if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1563)																		bool positions18;
HXDLIN(1563)																		if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																			positions18 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1563)																			positions18 = true;
            																		}
HXDLIN(1563)																		_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1563)																		 ::openfl::text::_internal::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1563)																		_gthis27->set_text(text26.substring(textIndex,endIndex6));
HXDLIN(1563)																		if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																			positions = _gthis->_hx___textLayout->get_positions();
            																		}
            																		else {
HXLINE(1563)																			positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																		}
HXDLIN(1563)																		Float width29 = ((Float)0.0);
HXDLIN(1563)																		{
HXLINE(1563)																			int _g31 = 0;
HXDLIN(1563)																			while((_g31 < positions->length)){
HXLINE(1563)																				 ::openfl::text::_internal::GlyphPosition position32 = positions->__get(_g31).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																				_g31 = (_g31 + 1);
HXDLIN(1563)																				width29 = (width29 + position32->advance->x);
            																			}
            																		}
HXDLIN(1563)																		widthValue = width29;
            																	}
            																	else {
HXLINE(1563)																		int tempIndex9 = textIndex;
HXDLIN(1563)																		int tempRangeEnd13 = formatRange->end;
HXDLIN(1563)																		int countRanges9 = 0;
HXDLIN(1563)																		positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)																		widthValue = ( (Float)(0) );
HXDLIN(1563)																		while(true){
HXLINE(1563)																			if ((tempIndex9 != tempRangeEnd13)) {
HXLINE(1563)																				::String text27 = _gthis->text;
HXDLIN(1563)																				Float letterSpacing27 = ((Float)0.0);
HXDLIN(1563)																				if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																					letterSpacing27 = ( (Float)(formatRange->format->letterSpacing) );
            																				}
HXDLIN(1563)																				if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																					_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																				_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																				if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																					_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1563)																				bool _hx_tmp96;
HXDLIN(1563)																				if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																					_hx_tmp96 = (_gthis->sharpness < 400);
            																				}
            																				else {
HXLINE(1563)																					_hx_tmp96 = true;
            																				}
HXDLIN(1563)																				_gthis->_hx___textLayout->autoHint = _hx_tmp96;
HXDLIN(1563)																				 ::openfl::text::_internal::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1563)																				_gthis28->set_text(text27.substring(tempIndex9,tempRangeEnd13));
HXDLIN(1563)																				::Array< ::Dynamic> tempPositions9;
HXDLIN(1563)																				if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																					tempPositions9 = _gthis->_hx___textLayout->get_positions();
            																				}
            																				else {
HXLINE(1563)																					tempPositions9 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																				}
HXDLIN(1563)																				positions = positions->concat(tempPositions9);
            																			}
HXDLIN(1563)																			if ((tempRangeEnd13 != endIndex6)) {
HXLINE(1563)																				bool _hx_tmp97;
HXDLIN(1563)																				if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																					rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																					formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																					currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																					font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)																					_hx_tmp97 = true;
            																				}
            																				else {
HXLINE(1563)																					_hx_tmp97 = false;
            																				}
HXDLIN(1563)																				if (!(_hx_tmp97)) {
HXLINE(1563)																					::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1563)																					goto _hx_goto_79;
            																				}
HXDLIN(1563)																				tempIndex9 = tempRangeEnd13;
HXDLIN(1563)																				if ((endIndex6 < formatRange->end)) {
HXLINE(1563)																					tempRangeEnd13 = endIndex6;
            																				}
            																				else {
HXLINE(1563)																					tempRangeEnd13 = formatRange->end;
            																				}
HXDLIN(1563)																				countRanges9 = (countRanges9 + 1);
            																			}
            																			else {
HXLINE(1563)																				Float width30 = ((Float)0.0);
HXDLIN(1563)																				{
HXLINE(1563)																					int _g32 = 0;
HXDLIN(1563)																					while((_g32 < positions->length)){
HXLINE(1563)																						 ::openfl::text::_internal::GlyphPosition position33 = positions->__get(_g32).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																						_g32 = (_g32 + 1);
HXDLIN(1563)																						width30 = (width30 + position33->advance->x);
            																					}
            																				}
HXDLIN(1563)																				widthValue = width30;
HXDLIN(1563)																				goto _hx_goto_79;
            																			}
            																		}
            																		_hx_goto_79:;
HXDLIN(1563)																		rangeIndex = (rangeIndex - (countRanges9 + 1));
HXDLIN(1563)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																		}
            																	}
            																}
            															}
HXDLIN(1563)															positionWidth2 = ( (Float)(0) );
            														}
            													}
            													_hx_goto_74:;
            												}
HXDLIN(1563)												placeIndex2 = ((textIndex + i8) - bufferCount2);
HXDLIN(1563)												{
HXLINE(1563)													if ((placeIndex2 <= formatRange->end)) {
HXLINE(1563)														::String text28 = _gthis->text;
HXDLIN(1563)														Float letterSpacing28 = ((Float)0.0);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)															letterSpacing28 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1563)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1563)														bool positions19;
HXDLIN(1563)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)															positions19 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1563)															positions19 = true;
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1563)														 ::openfl::text::_internal::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1563)														_gthis29->set_text(text28.substring(textIndex,placeIndex2));
HXDLIN(1563)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1563)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1563)														Float width31 = ((Float)0.0);
HXDLIN(1563)														{
HXLINE(1563)															int _g33 = 0;
HXDLIN(1563)															while((_g33 < positions->length)){
HXLINE(1563)																 ::openfl::text::_internal::GlyphPosition position34 = positions->__get(_g33).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																_g33 = (_g33 + 1);
HXDLIN(1563)																width31 = (width31 + position34->advance->x);
            															}
            														}
HXDLIN(1563)														widthValue = width31;
HXDLIN(1563)														bool _hx_tmp98;
HXDLIN(1563)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1563)															_hx_tmp98 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1563)															_hx_tmp98 = true;
            														}
HXDLIN(1563)														if (_hx_tmp98) {
HXLINE(1563)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXDLIN(1563)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1563)															layoutGroup->format = formatRange->format;
HXDLIN(1563)															layoutGroup->startIndex = textIndex;
HXDLIN(1563)															layoutGroup->endIndex = placeIndex2;
            														}
HXDLIN(1563)														layoutGroup->positions = positions;
HXDLIN(1563)														int _hx_tmp99;
HXDLIN(1563)														if (firstLineOfParagraph) {
HXLINE(1563)															_hx_tmp99 = indent;
            														}
            														else {
HXLINE(1563)															_hx_tmp99 = 0;
            														}
HXDLIN(1563)														layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp99)) ));
HXDLIN(1563)														layoutGroup->ascent = ascent;
HXDLIN(1563)														layoutGroup->descent = descent;
HXDLIN(1563)														layoutGroup->leading = leading;
HXDLIN(1563)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1563)														layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1563)														layoutGroup->width = widthValue;
HXDLIN(1563)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1563)														offsetX = (offsetX + widthValue);
HXDLIN(1563)														if ((placeIndex2 == formatRange->end)) {
HXLINE(1563)															layoutGroup = null();
HXDLIN(1563)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            															}
HXDLIN(1563)															{
HXLINE(1563)																if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)																	ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1563)																	descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            																}
            																else {
HXLINE(1563)																	bool _hx_tmp100;
HXDLIN(1563)																	if (::hx::IsNotNull( font )) {
HXLINE(1563)																		_hx_tmp100 = (font->unitsPerEM != 0);
            																	}
            																	else {
HXLINE(1563)																		_hx_tmp100 = false;
            																	}
HXDLIN(1563)																	if (_hx_tmp100) {
HXLINE(1563)																		ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1563)																		descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																	}
            																	else {
HXLINE(1563)																		ascent = ( (Float)(currentFormat->size) );
HXDLIN(1563)																		descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																	}
            																}
HXDLIN(1563)																leading = ( (int)(currentFormat->leading) );
HXDLIN(1563)																heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1563)																if ((heightValue > maxHeightValue)) {
HXLINE(1563)																	maxHeightValue = heightValue;
            																}
HXDLIN(1563)																if ((ascent > maxAscent)) {
HXLINE(1563)																	maxAscent = ascent;
            																}
            															}
            														}
            													}
            													else {
HXLINE(1563)														while(true){
HXLINE(1563)															int tempRangeEnd14;
HXDLIN(1563)															if ((placeIndex2 < formatRange->end)) {
HXLINE(1563)																tempRangeEnd14 = placeIndex2;
            															}
            															else {
HXLINE(1563)																tempRangeEnd14 = formatRange->end;
            															}
HXDLIN(1563)															if ((textIndex != tempRangeEnd14)) {
HXLINE(1563)																::String text29 = _gthis->text;
HXDLIN(1563)																Float letterSpacing29 = ((Float)0.0);
HXDLIN(1563)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																	letterSpacing29 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1563)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1563)																bool positions20;
HXDLIN(1563)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																	positions20 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1563)																	positions20 = true;
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1563)																 ::openfl::text::_internal::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1563)																_gthis30->set_text(text29.substring(textIndex,tempRangeEnd14));
HXDLIN(1563)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																	positions = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1563)																	positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1563)																Float width32 = ((Float)0.0);
HXDLIN(1563)																{
HXLINE(1563)																	int _g34 = 0;
HXDLIN(1563)																	while((_g34 < positions->length)){
HXLINE(1563)																		 ::openfl::text::_internal::GlyphPosition position35 = positions->__get(_g34).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																		_g34 = (_g34 + 1);
HXDLIN(1563)																		width32 = (width32 + position35->advance->x);
            																	}
            																}
HXDLIN(1563)																widthValue = width32;
HXDLIN(1563)																bool _hx_tmp101;
HXDLIN(1563)																if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1563)																	_hx_tmp101 = (layoutGroup->startIndex != layoutGroup->endIndex);
            																}
            																else {
HXLINE(1563)																	_hx_tmp101 = true;
            																}
HXDLIN(1563)																if (_hx_tmp101) {
HXLINE(1563)																	layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd14);
HXDLIN(1563)																	_gthis->layoutGroups->push(layoutGroup);
            																}
            																else {
HXLINE(1563)																	layoutGroup->format = formatRange->format;
HXDLIN(1563)																	layoutGroup->startIndex = textIndex;
HXDLIN(1563)																	layoutGroup->endIndex = tempRangeEnd14;
            																}
HXDLIN(1563)																layoutGroup->positions = positions;
HXDLIN(1563)																int _hx_tmp102;
HXDLIN(1563)																if (firstLineOfParagraph) {
HXLINE(1563)																	_hx_tmp102 = indent;
            																}
            																else {
HXLINE(1563)																	_hx_tmp102 = 0;
            																}
HXDLIN(1563)																layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp102)) ));
HXDLIN(1563)																layoutGroup->ascent = ascent;
HXDLIN(1563)																layoutGroup->descent = descent;
HXDLIN(1563)																layoutGroup->leading = leading;
HXDLIN(1563)																layoutGroup->lineIndex = lineIndex;
HXDLIN(1563)																layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1563)																layoutGroup->width = widthValue;
HXDLIN(1563)																layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1563)																offsetX = (offsetX + widthValue);
HXDLIN(1563)																textIndex = tempRangeEnd14;
            															}
HXDLIN(1563)															if ((tempRangeEnd14 == formatRange->end)) {
HXLINE(1563)																layoutGroup = null();
            															}
HXDLIN(1563)															if ((tempRangeEnd14 == placeIndex2)) {
HXLINE(1563)																goto _hx_goto_82;
            															}
HXDLIN(1563)															bool _hx_tmp103;
HXDLIN(1563)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)																_hx_tmp103 = true;
            															}
            															else {
HXLINE(1563)																_hx_tmp103 = false;
            															}
HXDLIN(1563)															if (!(_hx_tmp103)) {
HXLINE(1563)																::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1563)																goto _hx_goto_82;
            															}
HXDLIN(1563)															{
HXLINE(1563)																if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)																	ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1563)																	descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            																}
            																else {
HXLINE(1563)																	bool _hx_tmp104;
HXDLIN(1563)																	if (::hx::IsNotNull( font )) {
HXLINE(1563)																		_hx_tmp104 = (font->unitsPerEM != 0);
            																	}
            																	else {
HXLINE(1563)																		_hx_tmp104 = false;
            																	}
HXDLIN(1563)																	if (_hx_tmp104) {
HXLINE(1563)																		ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1563)																		descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																	}
            																	else {
HXLINE(1563)																		ascent = ( (Float)(currentFormat->size) );
HXDLIN(1563)																		descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																	}
            																}
HXDLIN(1563)																leading = ( (int)(currentFormat->leading) );
HXDLIN(1563)																heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1563)																if ((heightValue > maxHeightValue)) {
HXLINE(1563)																	maxHeightValue = heightValue;
            																}
HXDLIN(1563)																if ((ascent > maxAscent)) {
HXLINE(1563)																	maxAscent = ascent;
            																}
            															}
            														}
            														_hx_goto_82:;
            													}
HXDLIN(1563)													textIndex = placeIndex2;
            												}
HXDLIN(1563)												{
HXLINE(1563)													{
HXLINE(1563)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1563)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1563)															bool _hx_tmp105;
HXDLIN(1563)															if (::hx::IsNotNull( font )) {
HXLINE(1563)																_hx_tmp105 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1563)																_hx_tmp105 = false;
            															}
HXDLIN(1563)															if (_hx_tmp105) {
HXLINE(1563)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1563)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1563)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1563)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1563)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1563)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1563)														if ((heightValue > maxHeightValue)) {
HXLINE(1563)															maxHeightValue = heightValue;
            														}
HXDLIN(1563)														if ((ascent > maxAscent)) {
HXLINE(1563)															maxAscent = ascent;
            														}
            													}
HXDLIN(1563)													int i9 = _gthis->layoutGroups->get_length();
HXDLIN(1563)													while(true){
HXLINE(1563)														i9 = (i9 - 1);
HXDLIN(1563)														if (!((i9 > -1))) {
HXLINE(1563)															goto _hx_goto_84;
            														}
HXDLIN(1563)														 ::openfl::text::_internal::TextLayoutGroup lg4 = _gthis->layoutGroups->get(i9).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1563)														if ((lg4->lineIndex < lineIndex)) {
HXLINE(1563)															goto _hx_goto_84;
            														}
HXDLIN(1563)														if ((lg4->lineIndex > lineIndex)) {
HXLINE(1563)															continue;
            														}
HXDLIN(1563)														lg4->ascent = maxAscent;
HXDLIN(1563)														lg4->height = ( (Float)(maxHeightValue) );
            													}
            													_hx_goto_84:;
HXDLIN(1563)													offsetY = (offsetY + maxHeightValue);
HXDLIN(1563)													maxAscent = ((Float)0.0);
HXDLIN(1563)													maxHeightValue = 0;
HXDLIN(1563)													lineIndex = (lineIndex + 1);
HXDLIN(1563)													offsetX = ( (Float)(0) );
HXDLIN(1563)													firstLineOfParagraph = false;
            												}
HXDLIN(1563)												if ((placeIndex2 >= endIndex2)) {
HXLINE(1563)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)													widthValue = ( (Float)(0) );
            												}
            												else {
HXLINE(1563)													if ((endIndex2 <= formatRange->end)) {
HXLINE(1563)														::String text30 = _gthis->text;
HXDLIN(1563)														Float letterSpacing30 = ((Float)0.0);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)															letterSpacing30 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1563)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1563)														bool positions21;
HXDLIN(1563)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)															positions21 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1563)															positions21 = true;
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1563)														 ::openfl::text::_internal::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1563)														_gthis31->set_text(text30.substring(placeIndex2,endIndex2));
HXDLIN(1563)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1563)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1563)														Float width33 = ((Float)0.0);
HXDLIN(1563)														{
HXLINE(1563)															int _g35 = 0;
HXDLIN(1563)															while((_g35 < positions->length)){
HXLINE(1563)																 ::openfl::text::_internal::GlyphPosition position36 = positions->__get(_g35).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																_g35 = (_g35 + 1);
HXDLIN(1563)																width33 = (width33 + position36->advance->x);
            															}
            														}
HXDLIN(1563)														widthValue = width33;
            													}
            													else {
HXLINE(1563)														int tempIndex10 = placeIndex2;
HXDLIN(1563)														int tempRangeEnd15 = formatRange->end;
HXDLIN(1563)														int countRanges10 = 0;
HXDLIN(1563)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1563)														widthValue = ( (Float)(0) );
HXDLIN(1563)														while(true){
HXLINE(1563)															if ((tempIndex10 != tempRangeEnd15)) {
HXLINE(1563)																::String text31 = _gthis->text;
HXDLIN(1563)																Float letterSpacing31 = ((Float)0.0);
HXDLIN(1563)																if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)																	letterSpacing31 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXDLIN(1563)																if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)																if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1563)																bool _hx_tmp106;
HXDLIN(1563)																if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)																	_hx_tmp106 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1563)																	_hx_tmp106 = true;
            																}
HXDLIN(1563)																_gthis->_hx___textLayout->autoHint = _hx_tmp106;
HXDLIN(1563)																 ::openfl::text::_internal::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1563)																_gthis32->set_text(text31.substring(tempIndex10,tempRangeEnd15));
HXDLIN(1563)																::Array< ::Dynamic> tempPositions10;
HXDLIN(1563)																if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)																	tempPositions10 = _gthis->_hx___textLayout->get_positions();
            																}
            																else {
HXLINE(1563)																	tempPositions10 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																}
HXDLIN(1563)																positions = positions->concat(tempPositions10);
            															}
HXDLIN(1563)															if ((tempRangeEnd15 != endIndex2)) {
HXLINE(1563)																bool _hx_tmp107;
HXDLIN(1563)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1563)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)																	_hx_tmp107 = true;
            																}
            																else {
HXLINE(1563)																	_hx_tmp107 = false;
            																}
HXDLIN(1563)																if (!(_hx_tmp107)) {
HXLINE(1563)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1563)																	goto _hx_goto_86;
            																}
HXDLIN(1563)																tempIndex10 = tempRangeEnd15;
HXDLIN(1563)																if ((endIndex2 < formatRange->end)) {
HXLINE(1563)																	tempRangeEnd15 = endIndex2;
            																}
            																else {
HXLINE(1563)																	tempRangeEnd15 = formatRange->end;
            																}
HXDLIN(1563)																countRanges10 = (countRanges10 + 1);
            															}
            															else {
HXLINE(1563)																Float width34 = ((Float)0.0);
HXDLIN(1563)																{
HXLINE(1563)																	int _g36 = 0;
HXDLIN(1563)																	while((_g36 < positions->length)){
HXLINE(1563)																		 ::openfl::text::_internal::GlyphPosition position37 = positions->__get(_g36).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																		_g36 = (_g36 + 1);
HXDLIN(1563)																		width34 = (width34 + position37->advance->x);
            																	}
            																}
HXDLIN(1563)																widthValue = width34;
HXDLIN(1563)																goto _hx_goto_86;
            															}
            														}
            														_hx_goto_86:;
HXDLIN(1563)														rangeIndex = (rangeIndex - (countRanges10 + 1));
HXDLIN(1563)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)															rangeIndex = (rangeIndex + 1);
HXDLIN(1563)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXDLIN(1563)												remainingPositions2 = positions;
HXDLIN(1563)												tempWidth2 = widthValue;
            											}
            											_hx_goto_72:;
            										}
HXDLIN(1563)										{
HXLINE(1563)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1563)												::String text32 = _gthis->text;
HXDLIN(1563)												Float letterSpacing32 = ((Float)0.0);
HXDLIN(1563)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)													letterSpacing32 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1563)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1563)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1563)												_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1563)												bool positions22;
HXDLIN(1563)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)													positions22 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1563)													positions22 = true;
            												}
HXDLIN(1563)												_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1563)												 ::openfl::text::_internal::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1563)												_gthis33->set_text(text32.substring(textIndex,endIndex2));
HXDLIN(1563)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1563)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1563)												Float width35 = ((Float)0.0);
HXDLIN(1563)												{
HXLINE(1563)													int _g37 = 0;
HXDLIN(1563)													while((_g37 < positions->length)){
HXLINE(1563)														 ::openfl::text::_internal::GlyphPosition position38 = positions->__get(_g37).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)														_g37 = (_g37 + 1);
HXDLIN(1563)														width35 = (width35 + position38->advance->x);
            													}
            												}
HXDLIN(1563)												widthValue = width35;
HXDLIN(1563)												bool _hx_tmp108;
HXDLIN(1563)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1563)													_hx_tmp108 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1563)													_hx_tmp108 = true;
            												}
HXDLIN(1563)												if (_hx_tmp108) {
HXLINE(1563)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1563)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1563)													layoutGroup->format = formatRange->format;
HXDLIN(1563)													layoutGroup->startIndex = textIndex;
HXDLIN(1563)													layoutGroup->endIndex = endIndex2;
            												}
HXDLIN(1563)												layoutGroup->positions = positions;
HXDLIN(1563)												int _hx_tmp109;
HXDLIN(1563)												if (firstLineOfParagraph) {
HXLINE(1563)													_hx_tmp109 = indent;
            												}
            												else {
HXLINE(1563)													_hx_tmp109 = 0;
            												}
HXDLIN(1563)												layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp109)) ));
HXDLIN(1563)												layoutGroup->ascent = ascent;
HXDLIN(1563)												layoutGroup->descent = descent;
HXDLIN(1563)												layoutGroup->leading = leading;
HXDLIN(1563)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1563)												layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1563)												layoutGroup->width = widthValue;
HXDLIN(1563)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1563)												offsetX = (offsetX + widthValue);
HXDLIN(1563)												if ((endIndex2 == formatRange->end)) {
HXLINE(1563)													layoutGroup = null();
HXDLIN(1563)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)														rangeIndex = (rangeIndex + 1);
HXDLIN(1563)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1563)													{
HXLINE(1563)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1563)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1563)															bool _hx_tmp110;
HXDLIN(1563)															if (::hx::IsNotNull( font )) {
HXLINE(1563)																_hx_tmp110 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1563)																_hx_tmp110 = false;
            															}
HXDLIN(1563)															if (_hx_tmp110) {
HXLINE(1563)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1563)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1563)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1563)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1563)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1563)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1563)														if ((heightValue > maxHeightValue)) {
HXLINE(1563)															maxHeightValue = heightValue;
            														}
HXDLIN(1563)														if ((ascent > maxAscent)) {
HXLINE(1563)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1563)												while(true){
HXLINE(1563)													int tempRangeEnd16;
HXDLIN(1563)													if ((endIndex2 < formatRange->end)) {
HXLINE(1563)														tempRangeEnd16 = endIndex2;
            													}
            													else {
HXLINE(1563)														tempRangeEnd16 = formatRange->end;
            													}
HXDLIN(1563)													if ((textIndex != tempRangeEnd16)) {
HXLINE(1563)														::String text33 = _gthis->text;
HXDLIN(1563)														Float letterSpacing33 = ((Float)0.0);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1563)															letterSpacing33 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1563)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1563)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1563)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1563)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1563)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1563)														bool positions23;
HXDLIN(1563)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1563)															positions23 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1563)															positions23 = true;
            														}
HXDLIN(1563)														_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1563)														 ::openfl::text::_internal::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1563)														_gthis34->set_text(text33.substring(textIndex,tempRangeEnd16));
HXDLIN(1563)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1563)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1563)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1563)														Float width36 = ((Float)0.0);
HXDLIN(1563)														{
HXLINE(1563)															int _g38 = 0;
HXDLIN(1563)															while((_g38 < positions->length)){
HXLINE(1563)																 ::openfl::text::_internal::GlyphPosition position39 = positions->__get(_g38).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1563)																_g38 = (_g38 + 1);
HXDLIN(1563)																width36 = (width36 + position39->advance->x);
            															}
            														}
HXDLIN(1563)														widthValue = width36;
HXDLIN(1563)														bool _hx_tmp111;
HXDLIN(1563)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1563)															_hx_tmp111 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1563)															_hx_tmp111 = true;
            														}
HXDLIN(1563)														if (_hx_tmp111) {
HXLINE(1563)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd16);
HXDLIN(1563)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1563)															layoutGroup->format = formatRange->format;
HXDLIN(1563)															layoutGroup->startIndex = textIndex;
HXDLIN(1563)															layoutGroup->endIndex = tempRangeEnd16;
            														}
HXDLIN(1563)														layoutGroup->positions = positions;
HXDLIN(1563)														int _hx_tmp112;
HXDLIN(1563)														if (firstLineOfParagraph) {
HXLINE(1563)															_hx_tmp112 = indent;
            														}
            														else {
HXLINE(1563)															_hx_tmp112 = 0;
            														}
HXDLIN(1563)														layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp112)) ));
HXDLIN(1563)														layoutGroup->ascent = ascent;
HXDLIN(1563)														layoutGroup->descent = descent;
HXDLIN(1563)														layoutGroup->leading = leading;
HXDLIN(1563)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1563)														layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1563)														layoutGroup->width = widthValue;
HXDLIN(1563)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1563)														offsetX = (offsetX + widthValue);
HXDLIN(1563)														textIndex = tempRangeEnd16;
            													}
HXDLIN(1563)													if ((tempRangeEnd16 == formatRange->end)) {
HXLINE(1563)														layoutGroup = null();
            													}
HXDLIN(1563)													if ((tempRangeEnd16 == endIndex2)) {
HXLINE(1563)														goto _hx_goto_89;
            													}
HXDLIN(1563)													bool _hx_tmp113;
HXDLIN(1563)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1563)														rangeIndex = (rangeIndex + 1);
HXDLIN(1563)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1563)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1563)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1563)														_hx_tmp113 = true;
            													}
            													else {
HXLINE(1563)														_hx_tmp113 = false;
            													}
HXDLIN(1563)													if (!(_hx_tmp113)) {
HXLINE(1563)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1563)														goto _hx_goto_89;
            													}
HXDLIN(1563)													{
HXLINE(1563)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1563)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1563)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1563)															bool _hx_tmp114;
HXDLIN(1563)															if (::hx::IsNotNull( font )) {
HXLINE(1563)																_hx_tmp114 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1563)																_hx_tmp114 = false;
            															}
HXDLIN(1563)															if (_hx_tmp114) {
HXLINE(1563)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1563)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1563)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1563)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1563)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1563)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1563)														if ((heightValue > maxHeightValue)) {
HXLINE(1563)															maxHeightValue = heightValue;
            														}
HXDLIN(1563)														if ((ascent > maxAscent)) {
HXLINE(1563)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_89:;
            											}
HXDLIN(1563)											textIndex = endIndex2;
            										}
            									}
HXLINE(1564)									if ((endIndex2 == this->text.length)) {
HXLINE(1564)										{
HXLINE(1564)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1564)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1564)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1564)												bool _hx_tmp115;
HXDLIN(1564)												if (::hx::IsNotNull( font )) {
HXLINE(1564)													_hx_tmp115 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1564)													_hx_tmp115 = false;
            												}
HXDLIN(1564)												if (_hx_tmp115) {
HXLINE(1564)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1564)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE(1564)													ascent = ( (Float)(currentFormat->size) );
HXDLIN(1564)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXDLIN(1564)											leading = ( (int)(currentFormat->leading) );
HXDLIN(1564)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1564)											if ((heightValue > maxHeightValue)) {
HXLINE(1564)												maxHeightValue = heightValue;
            											}
HXDLIN(1564)											if ((ascent > maxAscent)) {
HXLINE(1564)												maxAscent = ascent;
            											}
            										}
HXDLIN(1564)										int i10 = _gthis->layoutGroups->get_length();
HXDLIN(1564)										while(true){
HXLINE(1564)											i10 = (i10 - 1);
HXDLIN(1564)											if (!((i10 > -1))) {
HXLINE(1564)												goto _hx_goto_91;
            											}
HXDLIN(1564)											 ::openfl::text::_internal::TextLayoutGroup lg5 = _gthis->layoutGroups->get(i10).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1564)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1564)												goto _hx_goto_91;
            											}
HXDLIN(1564)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1564)												continue;
            											}
HXDLIN(1564)											lg5->ascent = maxAscent;
HXDLIN(1564)											lg5->height = ( (Float)(maxHeightValue) );
            										}
            										_hx_goto_91:;
HXDLIN(1564)										offsetY = (offsetY + maxHeightValue);
HXDLIN(1564)										maxAscent = ((Float)0.0);
HXDLIN(1564)										maxHeightValue = 0;
HXDLIN(1564)										lineIndex = (lineIndex + 1);
HXDLIN(1564)										offsetX = ( (Float)(0) );
HXDLIN(1564)										firstLineOfParagraph = false;
            									}
            								}
            								else {
HXLINE(1568)									int tempRangeEnd17;
HXDLIN(1568)									if ((endIndex2 < formatRange->end)) {
HXLINE(1568)										tempRangeEnd17 = endIndex2;
            									}
            									else {
HXLINE(1568)										tempRangeEnd17 = formatRange->end;
            									}
HXLINE(1570)									if ((tempRangeEnd17 < endIndex2)) {
HXLINE(1572)										::String text34 = this->text;
HXDLIN(1572)										Float letterSpacing34 = ((Float)0.0);
HXDLIN(1572)										if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1572)											letterSpacing34 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXDLIN(1572)										if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1572)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1572)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1572)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1572)										if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1572)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1572)										_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1572)										bool positions24;
HXDLIN(1572)										if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1572)											positions24 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1572)											positions24 = true;
            										}
HXDLIN(1572)										_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1572)										 ::openfl::text::_internal::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1572)										_gthis35->set_text(text34.substring(textIndex,tempRangeEnd17));
HXDLIN(1572)										if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1572)											positions = _gthis->_hx___textLayout->get_positions();
            										}
            										else {
HXLINE(1572)											positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            										}
HXLINE(1573)										Float width37 = ((Float)0.0);
HXDLIN(1573)										{
HXLINE(1573)											int _g39 = 0;
HXDLIN(1573)											while((_g39 < positions->length)){
HXLINE(1573)												 ::openfl::text::_internal::GlyphPosition position40 = positions->__get(_g39).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1573)												_g39 = (_g39 + 1);
HXDLIN(1573)												width37 = (width37 + position40->advance->x);
            											}
            										}
HXDLIN(1573)										widthValue = width37;
            									}
HXLINE(1576)									layoutGroup->endIndex = tempRangeEnd17;
HXLINE(1577)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1578)									 ::openfl::text::_internal::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1578)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1580)									offsetX = (offsetX + widthValue);
HXLINE(1582)									if ((tempRangeEnd17 == formatRange->end)) {
HXLINE(1584)										layoutGroup = null();
HXLINE(1585)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1585)											rangeIndex = (rangeIndex + 1);
HXDLIN(1585)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1585)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1585)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1586)										{
HXLINE(1586)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1586)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1586)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1586)												bool _hx_tmp116;
HXDLIN(1586)												if (::hx::IsNotNull( font )) {
HXLINE(1586)													_hx_tmp116 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1586)													_hx_tmp116 = false;
            												}
HXDLIN(1586)												if (_hx_tmp116) {
HXLINE(1586)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1586)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE(1586)													ascent = ( (Float)(currentFormat->size) );
HXDLIN(1586)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXDLIN(1586)											leading = ( (int)(currentFormat->leading) );
HXDLIN(1586)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1586)											if ((heightValue > maxHeightValue)) {
HXLINE(1586)												maxHeightValue = heightValue;
            											}
HXDLIN(1586)											if ((ascent > maxAscent)) {
HXLINE(1586)												maxAscent = ascent;
            											}
            										}
HXLINE(1588)										textIndex = tempRangeEnd17;
HXLINE(1590)										if ((tempRangeEnd17 != endIndex2)) {
HXLINE(1592)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1592)												::String text35 = _gthis->text;
HXDLIN(1592)												Float letterSpacing35 = ((Float)0.0);
HXDLIN(1592)												if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1592)													letterSpacing35 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXDLIN(1592)												if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1592)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1592)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1592)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1592)												if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1592)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1592)												_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1592)												bool positions25;
HXDLIN(1592)												if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1592)													positions25 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1592)													positions25 = true;
            												}
HXDLIN(1592)												_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1592)												 ::openfl::text::_internal::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1592)												_gthis36->set_text(text35.substring(textIndex,endIndex2));
HXDLIN(1592)												if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1592)													positions = _gthis->_hx___textLayout->get_positions();
            												}
            												else {
HXLINE(1592)													positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            												}
HXDLIN(1592)												Float width38 = ((Float)0.0);
HXDLIN(1592)												{
HXLINE(1592)													int _g40 = 0;
HXDLIN(1592)													while((_g40 < positions->length)){
HXLINE(1592)														 ::openfl::text::_internal::GlyphPosition position41 = positions->__get(_g40).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1592)														_g40 = (_g40 + 1);
HXDLIN(1592)														width38 = (width38 + position41->advance->x);
            													}
            												}
HXDLIN(1592)												widthValue = width38;
HXDLIN(1592)												bool _hx_tmp117;
HXDLIN(1592)												if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1592)													_hx_tmp117 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1592)													_hx_tmp117 = true;
            												}
HXDLIN(1592)												if (_hx_tmp117) {
HXLINE(1592)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1592)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1592)													layoutGroup->format = formatRange->format;
HXDLIN(1592)													layoutGroup->startIndex = textIndex;
HXDLIN(1592)													layoutGroup->endIndex = endIndex2;
            												}
HXDLIN(1592)												layoutGroup->positions = positions;
HXDLIN(1592)												int _hx_tmp118;
HXDLIN(1592)												if (firstLineOfParagraph) {
HXLINE(1592)													_hx_tmp118 = indent;
            												}
            												else {
HXLINE(1592)													_hx_tmp118 = 0;
            												}
HXDLIN(1592)												layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp118)) ));
HXDLIN(1592)												layoutGroup->ascent = ascent;
HXDLIN(1592)												layoutGroup->descent = descent;
HXDLIN(1592)												layoutGroup->leading = leading;
HXDLIN(1592)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1592)												layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1592)												layoutGroup->width = widthValue;
HXDLIN(1592)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1592)												offsetX = (offsetX + widthValue);
HXDLIN(1592)												if ((endIndex2 == formatRange->end)) {
HXLINE(1592)													layoutGroup = null();
HXDLIN(1592)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1592)														rangeIndex = (rangeIndex + 1);
HXDLIN(1592)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1592)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1592)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1592)													{
HXLINE(1592)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1592)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1592)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1592)															bool _hx_tmp119;
HXDLIN(1592)															if (::hx::IsNotNull( font )) {
HXLINE(1592)																_hx_tmp119 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1592)																_hx_tmp119 = false;
            															}
HXDLIN(1592)															if (_hx_tmp119) {
HXLINE(1592)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1592)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1592)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1592)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1592)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1592)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1592)														if ((heightValue > maxHeightValue)) {
HXLINE(1592)															maxHeightValue = heightValue;
            														}
HXDLIN(1592)														if ((ascent > maxAscent)) {
HXLINE(1592)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1592)												while(true){
HXLINE(1592)													int tempRangeEnd18;
HXDLIN(1592)													if ((endIndex2 < formatRange->end)) {
HXLINE(1592)														tempRangeEnd18 = endIndex2;
            													}
            													else {
HXLINE(1592)														tempRangeEnd18 = formatRange->end;
            													}
HXDLIN(1592)													if ((textIndex != tempRangeEnd18)) {
HXLINE(1592)														::String text36 = _gthis->text;
HXDLIN(1592)														Float letterSpacing36 = ((Float)0.0);
HXDLIN(1592)														if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1592)															letterSpacing36 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXDLIN(1592)														if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1592)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1592)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1592)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1592)														if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1592)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1592)														_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1592)														bool positions26;
HXDLIN(1592)														if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1592)															positions26 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1592)															positions26 = true;
            														}
HXDLIN(1592)														_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1592)														 ::openfl::text::_internal::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1592)														_gthis37->set_text(text36.substring(textIndex,tempRangeEnd18));
HXDLIN(1592)														if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1592)															positions = _gthis->_hx___textLayout->get_positions();
            														}
            														else {
HXLINE(1592)															positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            														}
HXDLIN(1592)														Float width39 = ((Float)0.0);
HXDLIN(1592)														{
HXLINE(1592)															int _g41 = 0;
HXDLIN(1592)															while((_g41 < positions->length)){
HXLINE(1592)																 ::openfl::text::_internal::GlyphPosition position42 = positions->__get(_g41).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1592)																_g41 = (_g41 + 1);
HXDLIN(1592)																width39 = (width39 + position42->advance->x);
            															}
            														}
HXDLIN(1592)														widthValue = width39;
HXDLIN(1592)														bool _hx_tmp120;
HXDLIN(1592)														if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1592)															_hx_tmp120 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1592)															_hx_tmp120 = true;
            														}
HXDLIN(1592)														if (_hx_tmp120) {
HXLINE(1592)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXDLIN(1592)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1592)															layoutGroup->format = formatRange->format;
HXDLIN(1592)															layoutGroup->startIndex = textIndex;
HXDLIN(1592)															layoutGroup->endIndex = tempRangeEnd18;
            														}
HXDLIN(1592)														layoutGroup->positions = positions;
HXDLIN(1592)														int _hx_tmp121;
HXDLIN(1592)														if (firstLineOfParagraph) {
HXLINE(1592)															_hx_tmp121 = indent;
            														}
            														else {
HXLINE(1592)															_hx_tmp121 = 0;
            														}
HXDLIN(1592)														layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp121)) ));
HXDLIN(1592)														layoutGroup->ascent = ascent;
HXDLIN(1592)														layoutGroup->descent = descent;
HXDLIN(1592)														layoutGroup->leading = leading;
HXDLIN(1592)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1592)														layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1592)														layoutGroup->width = widthValue;
HXDLIN(1592)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1592)														offsetX = (offsetX + widthValue);
HXDLIN(1592)														textIndex = tempRangeEnd18;
            													}
HXDLIN(1592)													if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1592)														layoutGroup = null();
            													}
HXDLIN(1592)													if ((tempRangeEnd18 == endIndex2)) {
HXLINE(1592)														goto _hx_goto_94;
            													}
HXDLIN(1592)													bool _hx_tmp122;
HXDLIN(1592)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1592)														rangeIndex = (rangeIndex + 1);
HXDLIN(1592)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1592)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1592)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1592)														_hx_tmp122 = true;
            													}
            													else {
HXLINE(1592)														_hx_tmp122 = false;
            													}
HXDLIN(1592)													if (!(_hx_tmp122)) {
HXLINE(1592)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1592)														goto _hx_goto_94;
            													}
HXDLIN(1592)													{
HXLINE(1592)														if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1592)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1592)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1592)															bool _hx_tmp123;
HXDLIN(1592)															if (::hx::IsNotNull( font )) {
HXLINE(1592)																_hx_tmp123 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1592)																_hx_tmp123 = false;
            															}
HXDLIN(1592)															if (_hx_tmp123) {
HXLINE(1592)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1592)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE(1592)																ascent = ( (Float)(currentFormat->size) );
HXDLIN(1592)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXDLIN(1592)														leading = ( (int)(currentFormat->leading) );
HXDLIN(1592)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1592)														if ((heightValue > maxHeightValue)) {
HXLINE(1592)															maxHeightValue = heightValue;
            														}
HXDLIN(1592)														if ((ascent > maxAscent)) {
HXLINE(1592)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_94:;
            											}
HXDLIN(1592)											textIndex = endIndex2;
            										}
            									}
HXLINE(1598)									if ((breakIndex == endIndex2)) {
HXLINE(1598)										endIndex2 = (endIndex2 + 1);
            									}
HXLINE(1600)									textIndex = endIndex2;
HXLINE(1602)									if ((endIndex2 == this->text.length)) {
HXLINE(1604)										{
HXLINE(1604)											{
HXLINE(1604)												if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1604)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1604)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1604)													bool _hx_tmp124;
HXDLIN(1604)													if (::hx::IsNotNull( font )) {
HXLINE(1604)														_hx_tmp124 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1604)														_hx_tmp124 = false;
            													}
HXDLIN(1604)													if (_hx_tmp124) {
HXLINE(1604)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1604)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE(1604)														ascent = ( (Float)(currentFormat->size) );
HXDLIN(1604)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXDLIN(1604)												leading = ( (int)(currentFormat->leading) );
HXDLIN(1604)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1604)												if ((heightValue > maxHeightValue)) {
HXLINE(1604)													maxHeightValue = heightValue;
            												}
HXDLIN(1604)												if ((ascent > maxAscent)) {
HXLINE(1604)													maxAscent = ascent;
            												}
            											}
HXDLIN(1604)											int i11 = _gthis->layoutGroups->get_length();
HXDLIN(1604)											while(true){
HXLINE(1604)												i11 = (i11 - 1);
HXDLIN(1604)												if (!((i11 > -1))) {
HXLINE(1604)													goto _hx_goto_96;
            												}
HXDLIN(1604)												 ::openfl::text::_internal::TextLayoutGroup lg6 = _gthis->layoutGroups->get(i11).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1604)												if ((lg6->lineIndex < lineIndex)) {
HXLINE(1604)													goto _hx_goto_96;
            												}
HXDLIN(1604)												if ((lg6->lineIndex > lineIndex)) {
HXLINE(1604)													continue;
            												}
HXDLIN(1604)												lg6->ascent = maxAscent;
HXDLIN(1604)												lg6->height = ( (Float)(maxHeightValue) );
            											}
            											_hx_goto_96:;
HXDLIN(1604)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1604)											maxAscent = ((Float)0.0);
HXDLIN(1604)											maxHeightValue = 0;
HXDLIN(1604)											lineIndex = (lineIndex + 1);
HXDLIN(1604)											offsetX = ( (Float)(0) );
HXDLIN(1604)											firstLineOfParagraph = false;
            										}
HXLINE(1606)										if ((breakIndex != -1)) {
HXLINE(1608)											previousBreakIndex = breakIndex;
HXLINE(1609)											breakCount = (breakCount + 1);
HXLINE(1610)											if ((breakCount < this->lineBreaks->get_length())) {
HXLINE(1610)												breakIndex = this->lineBreaks->get(breakCount);
            											}
            											else {
HXLINE(1610)												breakIndex = -1;
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE(1616)						int nextSpaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),textIndex);
HXLINE(1621)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1623)							layoutGroup->endIndex = breakIndex;
HXLINE(1625)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < 0)) {
HXLINE(1628)								layoutGroup->positions->push(null());
            							}
HXLINE(1631)							textIndex = (breakIndex + 1);
            						}
HXLINE(1634)						previousSpaceIndex = spaceIndex;
HXLINE(1635)						spaceIndex = nextSpaceIndex;
HXLINE(1637)						bool _hx_tmp125;
HXDLIN(1637)						bool _hx_tmp126;
HXDLIN(1637)						bool _hx_tmp127;
HXDLIN(1637)						if ((breakIndex > -1)) {
HXLINE(1637)							_hx_tmp127 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1637)							_hx_tmp127 = false;
            						}
HXDLIN(1637)						if (_hx_tmp127) {
HXLINE(1637)							if ((spaceIndex <= breakIndex)) {
HXLINE(1637)								_hx_tmp126 = (spaceIndex == -1);
            							}
            							else {
HXLINE(1637)								_hx_tmp126 = true;
            							}
            						}
            						else {
HXLINE(1637)							_hx_tmp126 = false;
            						}
HXDLIN(1637)						if (!(_hx_tmp126)) {
HXLINE(1637)							_hx_tmp125 = (textIndex > this->text.length);
            						}
            						else {
HXLINE(1637)							_hx_tmp125 = true;
            						}
HXDLIN(1637)						if (_hx_tmp125) {
HXLINE(1640)							goto _hx_goto_42;
            						}
            					}
            					_hx_goto_42:;
            				}
            				else {
HXLINE(1646)					if ((textIndex < this->text.length)) {
HXLINE(1649)						{
HXLINE(1649)							int endIndex7 = this->text.length;
HXDLIN(1649)							if ((textIndex >= endIndex7)) {
HXLINE(1649)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1649)								widthValue = ( (Float)(0) );
            							}
            							else {
HXLINE(1649)								if ((endIndex7 <= formatRange->end)) {
HXLINE(1649)									::String text37 = _gthis->text;
HXDLIN(1649)									Float letterSpacing37 = ((Float)0.0);
HXDLIN(1649)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1649)										letterSpacing37 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXDLIN(1649)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1649)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1649)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1649)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1649)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1649)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1649)									_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1649)									bool positions27;
HXDLIN(1649)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1649)										positions27 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1649)										positions27 = true;
            									}
HXDLIN(1649)									_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1649)									 ::openfl::text::_internal::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1649)									_gthis38->set_text(text37.substring(textIndex,endIndex7));
HXDLIN(1649)									if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1649)										positions = _gthis->_hx___textLayout->get_positions();
            									}
            									else {
HXLINE(1649)										positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            									}
HXDLIN(1649)									Float width40 = ((Float)0.0);
HXDLIN(1649)									{
HXLINE(1649)										int _g42 = 0;
HXDLIN(1649)										while((_g42 < positions->length)){
HXLINE(1649)											 ::openfl::text::_internal::GlyphPosition position43 = positions->__get(_g42).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1649)											_g42 = (_g42 + 1);
HXDLIN(1649)											width40 = (width40 + position43->advance->x);
            										}
            									}
HXDLIN(1649)									widthValue = width40;
            								}
            								else {
HXLINE(1649)									int tempIndex11 = textIndex;
HXDLIN(1649)									int tempRangeEnd19 = formatRange->end;
HXDLIN(1649)									int countRanges11 = 0;
HXDLIN(1649)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1649)									widthValue = ( (Float)(0) );
HXDLIN(1649)									while(true){
HXLINE(1649)										if ((tempIndex11 != tempRangeEnd19)) {
HXLINE(1649)											::String text38 = _gthis->text;
HXDLIN(1649)											Float letterSpacing38 = ((Float)0.0);
HXDLIN(1649)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1649)												letterSpacing38 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXDLIN(1649)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1649)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1649)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1649)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1649)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1649)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1649)											_gthis->_hx___textLayout->letterSpacing = letterSpacing38;
HXDLIN(1649)											bool _hx_tmp128;
HXDLIN(1649)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1649)												_hx_tmp128 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1649)												_hx_tmp128 = true;
            											}
HXDLIN(1649)											_gthis->_hx___textLayout->autoHint = _hx_tmp128;
HXDLIN(1649)											 ::openfl::text::_internal::TextLayout _gthis39 = _gthis->_hx___textLayout;
HXDLIN(1649)											_gthis39->set_text(text38.substring(tempIndex11,tempRangeEnd19));
HXDLIN(1649)											::Array< ::Dynamic> tempPositions11;
HXDLIN(1649)											if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1649)												tempPositions11 = _gthis->_hx___textLayout->get_positions();
            											}
            											else {
HXLINE(1649)												tempPositions11 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            											}
HXDLIN(1649)											positions = positions->concat(tempPositions11);
            										}
HXDLIN(1649)										if ((tempRangeEnd19 != endIndex7)) {
HXLINE(1649)											bool _hx_tmp129;
HXDLIN(1649)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1649)												rangeIndex = (rangeIndex + 1);
HXDLIN(1649)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1649)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1649)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1649)												_hx_tmp129 = true;
            											}
            											else {
HXLINE(1649)												_hx_tmp129 = false;
            											}
HXDLIN(1649)											if (!(_hx_tmp129)) {
HXLINE(1649)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1649)												goto _hx_goto_98;
            											}
HXDLIN(1649)											tempIndex11 = tempRangeEnd19;
HXDLIN(1649)											if ((endIndex7 < formatRange->end)) {
HXLINE(1649)												tempRangeEnd19 = endIndex7;
            											}
            											else {
HXLINE(1649)												tempRangeEnd19 = formatRange->end;
            											}
HXDLIN(1649)											countRanges11 = (countRanges11 + 1);
            										}
            										else {
HXLINE(1649)											Float width41 = ((Float)0.0);
HXDLIN(1649)											{
HXLINE(1649)												int _g43 = 0;
HXDLIN(1649)												while((_g43 < positions->length)){
HXLINE(1649)													 ::openfl::text::_internal::GlyphPosition position44 = positions->__get(_g43).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1649)													_g43 = (_g43 + 1);
HXDLIN(1649)													width41 = (width41 + position44->advance->x);
            												}
            											}
HXDLIN(1649)											widthValue = width41;
HXDLIN(1649)											goto _hx_goto_98;
            										}
            									}
            									_hx_goto_98:;
HXDLIN(1649)									rangeIndex = (rangeIndex - (countRanges11 + 1));
HXDLIN(1649)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1649)										rangeIndex = (rangeIndex + 1);
HXDLIN(1649)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1649)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1649)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
            							}
            						}
HXLINE(1650)						{
HXLINE(1650)							int endIndex8 = this->text.length;
HXDLIN(1650)							bool _hx_tmp130;
HXDLIN(1650)							if ((_gthis->width >= 4)) {
HXLINE(1650)								_hx_tmp130 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1650)								_hx_tmp130 = false;
            							}
HXDLIN(1650)							if (_hx_tmp130) {
HXLINE(1650)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1650)								int bufferCount3;
HXDLIN(1650)								int placeIndex3;
HXDLIN(1650)								Float positionWidth3;
HXDLIN(1650)								 ::openfl::text::_internal::GlyphPosition currentPosition3;
HXDLIN(1650)								Float width42 = ((Float)0.0);
HXDLIN(1650)								{
HXLINE(1650)									int _g44 = 0;
HXDLIN(1650)									while((_g44 < remainingPositions3->length)){
HXLINE(1650)										 ::openfl::text::_internal::GlyphPosition position45 = remainingPositions3->__get(_g44).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)										_g44 = (_g44 + 1);
HXDLIN(1650)										width42 = (width42 + position45->advance->x);
            									}
            								}
HXDLIN(1650)								Float tempWidth3 = width42;
HXDLIN(1650)								int i12 = (remainingPositions3->length - 1);
HXDLIN(1650)								while((i12 >= 0)){
HXLINE(1650)									 ::Dynamic currentCharCode3 = _gthis->text.charCodeAt((textIndex + i12));
HXDLIN(1650)									bool _hx_tmp131;
HXDLIN(1650)									if (::hx::IsNotEq( currentCharCode3,32 )) {
HXLINE(1650)										_hx_tmp131 = ::hx::IsNotEq( currentCharCode3,9 );
            									}
            									else {
HXLINE(1650)										_hx_tmp131 = false;
            									}
HXDLIN(1650)									if (_hx_tmp131) {
HXLINE(1650)										goto _hx_goto_101;
            									}
HXDLIN(1650)									 ::openfl::text::_internal::GlyphPosition position46 = remainingPositions3->__get(i12).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)									tempWidth3 = (tempWidth3 - position46->advance->x);
HXDLIN(1650)									i12 = (i12 - 1);
            								}
            								_hx_goto_101:;
HXDLIN(1650)								while(true){
HXLINE(1650)									bool _hx_tmp132;
HXDLIN(1650)									if ((remainingPositions3->length > 0)) {
HXLINE(1650)										int _hx_tmp133;
HXDLIN(1650)										if (firstLineOfParagraph) {
HXLINE(1650)											_hx_tmp133 = indent;
            										}
            										else {
HXLINE(1650)											_hx_tmp133 = 0;
            										}
HXDLIN(1650)										_hx_tmp132 = ((offsetX + tempWidth3) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp133)) )));
            									}
            									else {
HXLINE(1650)										_hx_tmp132 = false;
            									}
HXDLIN(1650)									if (!(_hx_tmp132)) {
HXLINE(1650)										goto _hx_goto_102;
            									}
HXDLIN(1650)									bufferCount3 = 0;
HXDLIN(1650)									i12 = bufferCount3;
HXDLIN(1650)									positionWidth3 = ((Float)0.0);
HXDLIN(1650)									while(true){
HXLINE(1650)										int _hx_tmp134;
HXDLIN(1650)										if (firstLineOfParagraph) {
HXLINE(1650)											_hx_tmp134 = indent;
            										}
            										else {
HXLINE(1650)											_hx_tmp134 = 0;
            										}
HXDLIN(1650)										if (!(((offsetX + positionWidth3) < (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp134)) ))))) {
HXLINE(1650)											goto _hx_goto_103;
            										}
HXDLIN(1650)										currentPosition3 = remainingPositions3->__get(i12).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1650)											i12 = (i12 + 1);
HXDLIN(1650)											bufferCount3 = (bufferCount3 + 1);
            										}
            										else {
HXLINE(1650)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1650)											i12 = (i12 + 1);
            										}
            									}
            									_hx_goto_103:;
HXDLIN(1650)									if ((i12 == bufferCount3)) {
HXLINE(1650)										i12 = (bufferCount3 + 1);
            									}
            									else {
HXLINE(1650)										while(true){
HXLINE(1650)											bool _hx_tmp135;
HXDLIN(1650)											if ((i12 > 1)) {
HXLINE(1650)												int _hx_tmp136;
HXDLIN(1650)												if (firstLineOfParagraph) {
HXLINE(1650)													_hx_tmp136 = indent;
            												}
            												else {
HXLINE(1650)													_hx_tmp136 = 0;
            												}
HXDLIN(1650)												_hx_tmp135 = ((offsetX + positionWidth3) > (((_gthis->width - ( (Float)(2) )) - ( (Float)(rightMargin) )) - ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp136)) )));
            											}
            											else {
HXLINE(1650)												_hx_tmp135 = false;
            											}
HXDLIN(1650)											if (!(_hx_tmp135)) {
HXLINE(1650)												goto _hx_goto_104;
            											}
HXDLIN(1650)											i12 = (i12 - 1);
HXDLIN(1650)											if (((i12 - bufferCount3) > 0)) {
HXLINE(1650)												{
HXLINE(1650)													int endIndex9 = ((textIndex + i12) - bufferCount3);
HXDLIN(1650)													if ((textIndex >= endIndex9)) {
HXLINE(1650)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)														widthValue = ( (Float)(0) );
            													}
            													else {
HXLINE(1650)														if ((endIndex9 <= formatRange->end)) {
HXLINE(1650)															::String text39 = _gthis->text;
HXDLIN(1650)															Float letterSpacing39 = ((Float)0.0);
HXDLIN(1650)															if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)																letterSpacing39 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXDLIN(1650)															if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)																_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)															if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->letterSpacing = letterSpacing39;
HXDLIN(1650)															bool positions28;
HXDLIN(1650)															if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)																positions28 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1650)																positions28 = true;
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->autoHint = positions28;
HXDLIN(1650)															 ::openfl::text::_internal::TextLayout _gthis40 = _gthis->_hx___textLayout;
HXDLIN(1650)															_gthis40->set_text(text39.substring(textIndex,endIndex9));
HXDLIN(1650)															if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)																positions = _gthis->_hx___textLayout->get_positions();
            															}
            															else {
HXLINE(1650)																positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            															}
HXDLIN(1650)															Float width43 = ((Float)0.0);
HXDLIN(1650)															{
HXLINE(1650)																int _g45 = 0;
HXDLIN(1650)																while((_g45 < positions->length)){
HXLINE(1650)																	 ::openfl::text::_internal::GlyphPosition position47 = positions->__get(_g45).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)																	_g45 = (_g45 + 1);
HXDLIN(1650)																	width43 = (width43 + position47->advance->x);
            																}
            															}
HXDLIN(1650)															widthValue = width43;
            														}
            														else {
HXLINE(1650)															int tempIndex12 = textIndex;
HXDLIN(1650)															int tempRangeEnd20 = formatRange->end;
HXDLIN(1650)															int countRanges12 = 0;
HXDLIN(1650)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)															widthValue = ( (Float)(0) );
HXDLIN(1650)															while(true){
HXLINE(1650)																if ((tempIndex12 != tempRangeEnd20)) {
HXLINE(1650)																	::String text40 = _gthis->text;
HXDLIN(1650)																	Float letterSpacing40 = ((Float)0.0);
HXDLIN(1650)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)																		letterSpacing40 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXDLIN(1650)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing40;
HXDLIN(1650)																	bool _hx_tmp137;
HXDLIN(1650)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)																		_hx_tmp137 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1650)																		_hx_tmp137 = true;
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->autoHint = _hx_tmp137;
HXDLIN(1650)																	 ::openfl::text::_internal::TextLayout _gthis41 = _gthis->_hx___textLayout;
HXDLIN(1650)																	_gthis41->set_text(text40.substring(tempIndex12,tempRangeEnd20));
HXDLIN(1650)																	::Array< ::Dynamic> tempPositions12;
HXDLIN(1650)																	if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)																		tempPositions12 = _gthis->_hx___textLayout->get_positions();
            																	}
            																	else {
HXLINE(1650)																		tempPositions12 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																	}
HXDLIN(1650)																	positions = positions->concat(tempPositions12);
            																}
HXDLIN(1650)																if ((tempRangeEnd20 != endIndex9)) {
HXLINE(1650)																	bool _hx_tmp138;
HXDLIN(1650)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1650)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1650)																		_hx_tmp138 = true;
            																	}
            																	else {
HXLINE(1650)																		_hx_tmp138 = false;
            																	}
HXDLIN(1650)																	if (!(_hx_tmp138)) {
HXLINE(1650)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1650)																		goto _hx_goto_106;
            																	}
HXDLIN(1650)																	tempIndex12 = tempRangeEnd20;
HXDLIN(1650)																	if ((endIndex9 < formatRange->end)) {
HXLINE(1650)																		tempRangeEnd20 = endIndex9;
            																	}
            																	else {
HXLINE(1650)																		tempRangeEnd20 = formatRange->end;
            																	}
HXDLIN(1650)																	countRanges12 = (countRanges12 + 1);
            																}
            																else {
HXLINE(1650)																	Float width44 = ((Float)0.0);
HXDLIN(1650)																	{
HXLINE(1650)																		int _g46 = 0;
HXDLIN(1650)																		while((_g46 < positions->length)){
HXLINE(1650)																			 ::openfl::text::_internal::GlyphPosition position48 = positions->__get(_g46).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)																			_g46 = (_g46 + 1);
HXDLIN(1650)																			width44 = (width44 + position48->advance->x);
            																		}
            																	}
HXDLIN(1650)																	widthValue = width44;
HXDLIN(1650)																	goto _hx_goto_106;
            																}
            															}
            															_hx_goto_106:;
HXDLIN(1650)															rangeIndex = (rangeIndex - (countRanges12 + 1));
HXDLIN(1650)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)																rangeIndex = (rangeIndex + 1);
HXDLIN(1650)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
            												}
HXDLIN(1650)												positionWidth3 = widthValue;
            											}
            											else {
HXLINE(1650)												i12 = 1;
HXDLIN(1650)												bufferCount3 = 0;
HXDLIN(1650)												{
HXLINE(1650)													int endIndex10 = (textIndex + 1);
HXDLIN(1650)													if ((textIndex >= endIndex10)) {
HXLINE(1650)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)														widthValue = ( (Float)(0) );
            													}
            													else {
HXLINE(1650)														if ((endIndex10 <= formatRange->end)) {
HXLINE(1650)															::String text41 = _gthis->text;
HXDLIN(1650)															Float letterSpacing41 = ((Float)0.0);
HXDLIN(1650)															if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)																letterSpacing41 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXDLIN(1650)															if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)																_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)															if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->letterSpacing = letterSpacing41;
HXDLIN(1650)															bool positions29;
HXDLIN(1650)															if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)																positions29 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1650)																positions29 = true;
            															}
HXDLIN(1650)															_gthis->_hx___textLayout->autoHint = positions29;
HXDLIN(1650)															 ::openfl::text::_internal::TextLayout _gthis42 = _gthis->_hx___textLayout;
HXDLIN(1650)															_gthis42->set_text(text41.substring(textIndex,endIndex10));
HXDLIN(1650)															if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)																positions = _gthis->_hx___textLayout->get_positions();
            															}
            															else {
HXLINE(1650)																positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            															}
HXDLIN(1650)															Float width45 = ((Float)0.0);
HXDLIN(1650)															{
HXLINE(1650)																int _g47 = 0;
HXDLIN(1650)																while((_g47 < positions->length)){
HXLINE(1650)																	 ::openfl::text::_internal::GlyphPosition position49 = positions->__get(_g47).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)																	_g47 = (_g47 + 1);
HXDLIN(1650)																	width45 = (width45 + position49->advance->x);
            																}
            															}
HXDLIN(1650)															widthValue = width45;
            														}
            														else {
HXLINE(1650)															int tempIndex13 = textIndex;
HXDLIN(1650)															int tempRangeEnd21 = formatRange->end;
HXDLIN(1650)															int countRanges13 = 0;
HXDLIN(1650)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)															widthValue = ( (Float)(0) );
HXDLIN(1650)															while(true){
HXLINE(1650)																if ((tempIndex13 != tempRangeEnd21)) {
HXLINE(1650)																	::String text42 = _gthis->text;
HXDLIN(1650)																	Float letterSpacing42 = ((Float)0.0);
HXDLIN(1650)																	if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)																		letterSpacing42 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXDLIN(1650)																	if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)																	if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing42;
HXDLIN(1650)																	bool _hx_tmp139;
HXDLIN(1650)																	if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)																		_hx_tmp139 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1650)																		_hx_tmp139 = true;
            																	}
HXDLIN(1650)																	_gthis->_hx___textLayout->autoHint = _hx_tmp139;
HXDLIN(1650)																	 ::openfl::text::_internal::TextLayout _gthis43 = _gthis->_hx___textLayout;
HXDLIN(1650)																	_gthis43->set_text(text42.substring(tempIndex13,tempRangeEnd21));
HXDLIN(1650)																	::Array< ::Dynamic> tempPositions13;
HXDLIN(1650)																	if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)																		tempPositions13 = _gthis->_hx___textLayout->get_positions();
            																	}
            																	else {
HXLINE(1650)																		tempPositions13 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            																	}
HXDLIN(1650)																	positions = positions->concat(tempPositions13);
            																}
HXDLIN(1650)																if ((tempRangeEnd21 != endIndex10)) {
HXLINE(1650)																	bool _hx_tmp140;
HXDLIN(1650)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1650)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1650)																		_hx_tmp140 = true;
            																	}
            																	else {
HXLINE(1650)																		_hx_tmp140 = false;
            																	}
HXDLIN(1650)																	if (!(_hx_tmp140)) {
HXLINE(1650)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1650)																		goto _hx_goto_109;
            																	}
HXDLIN(1650)																	tempIndex13 = tempRangeEnd21;
HXDLIN(1650)																	if ((endIndex10 < formatRange->end)) {
HXLINE(1650)																		tempRangeEnd21 = endIndex10;
            																	}
            																	else {
HXLINE(1650)																		tempRangeEnd21 = formatRange->end;
            																	}
HXDLIN(1650)																	countRanges13 = (countRanges13 + 1);
            																}
            																else {
HXLINE(1650)																	Float width46 = ((Float)0.0);
HXDLIN(1650)																	{
HXLINE(1650)																		int _g48 = 0;
HXDLIN(1650)																		while((_g48 < positions->length)){
HXLINE(1650)																			 ::openfl::text::_internal::GlyphPosition position50 = positions->__get(_g48).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)																			_g48 = (_g48 + 1);
HXDLIN(1650)																			width46 = (width46 + position50->advance->x);
            																		}
            																	}
HXDLIN(1650)																	widthValue = width46;
HXDLIN(1650)																	goto _hx_goto_109;
            																}
            															}
            															_hx_goto_109:;
HXDLIN(1650)															rangeIndex = (rangeIndex - (countRanges13 + 1));
HXDLIN(1650)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)																rangeIndex = (rangeIndex + 1);
HXDLIN(1650)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
            												}
HXDLIN(1650)												positionWidth3 = ( (Float)(0) );
            											}
            										}
            										_hx_goto_104:;
            									}
HXDLIN(1650)									placeIndex3 = ((textIndex + i12) - bufferCount3);
HXDLIN(1650)									{
HXLINE(1650)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1650)											::String text43 = _gthis->text;
HXDLIN(1650)											Float letterSpacing43 = ((Float)0.0);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)												letterSpacing43 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXDLIN(1650)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->letterSpacing = letterSpacing43;
HXDLIN(1650)											bool positions30;
HXDLIN(1650)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)												positions30 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1650)												positions30 = true;
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->autoHint = positions30;
HXDLIN(1650)											 ::openfl::text::_internal::TextLayout _gthis44 = _gthis->_hx___textLayout;
HXDLIN(1650)											_gthis44->set_text(text43.substring(textIndex,placeIndex3));
HXDLIN(1650)											if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)												positions = _gthis->_hx___textLayout->get_positions();
            											}
            											else {
HXLINE(1650)												positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            											}
HXDLIN(1650)											Float width47 = ((Float)0.0);
HXDLIN(1650)											{
HXLINE(1650)												int _g49 = 0;
HXDLIN(1650)												while((_g49 < positions->length)){
HXLINE(1650)													 ::openfl::text::_internal::GlyphPosition position51 = positions->__get(_g49).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)													_g49 = (_g49 + 1);
HXDLIN(1650)													width47 = (width47 + position51->advance->x);
            												}
            											}
HXDLIN(1650)											widthValue = width47;
HXDLIN(1650)											bool _hx_tmp141;
HXDLIN(1650)											if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1650)												_hx_tmp141 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1650)												_hx_tmp141 = true;
            											}
HXDLIN(1650)											if (_hx_tmp141) {
HXLINE(1650)												layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXDLIN(1650)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1650)												layoutGroup->format = formatRange->format;
HXDLIN(1650)												layoutGroup->startIndex = textIndex;
HXDLIN(1650)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1650)											layoutGroup->positions = positions;
HXDLIN(1650)											int _hx_tmp142;
HXDLIN(1650)											if (firstLineOfParagraph) {
HXLINE(1650)												_hx_tmp142 = indent;
            											}
            											else {
HXLINE(1650)												_hx_tmp142 = 0;
            											}
HXDLIN(1650)											layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp142)) ));
HXDLIN(1650)											layoutGroup->ascent = ascent;
HXDLIN(1650)											layoutGroup->descent = descent;
HXDLIN(1650)											layoutGroup->leading = leading;
HXDLIN(1650)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1650)											layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1650)											layoutGroup->width = widthValue;
HXDLIN(1650)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1650)											offsetX = (offsetX + widthValue);
HXDLIN(1650)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1650)												layoutGroup = null();
HXDLIN(1650)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)													rangeIndex = (rangeIndex + 1);
HXDLIN(1650)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1650)												{
HXLINE(1650)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1650)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1650)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1650)														bool _hx_tmp143;
HXDLIN(1650)														if (::hx::IsNotNull( font )) {
HXLINE(1650)															_hx_tmp143 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1650)															_hx_tmp143 = false;
            														}
HXDLIN(1650)														if (_hx_tmp143) {
HXLINE(1650)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1650)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE(1650)															ascent = ( (Float)(currentFormat->size) );
HXDLIN(1650)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXDLIN(1650)													leading = ( (int)(currentFormat->leading) );
HXDLIN(1650)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1650)													if ((heightValue > maxHeightValue)) {
HXLINE(1650)														maxHeightValue = heightValue;
            													}
HXDLIN(1650)													if ((ascent > maxAscent)) {
HXLINE(1650)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1650)											while(true){
HXLINE(1650)												int tempRangeEnd22;
HXDLIN(1650)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1650)													tempRangeEnd22 = placeIndex3;
            												}
            												else {
HXLINE(1650)													tempRangeEnd22 = formatRange->end;
            												}
HXDLIN(1650)												if ((textIndex != tempRangeEnd22)) {
HXLINE(1650)													::String text44 = _gthis->text;
HXDLIN(1650)													Float letterSpacing44 = ((Float)0.0);
HXDLIN(1650)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)														letterSpacing44 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXDLIN(1650)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->letterSpacing = letterSpacing44;
HXDLIN(1650)													bool positions31;
HXDLIN(1650)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)														positions31 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1650)														positions31 = true;
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->autoHint = positions31;
HXDLIN(1650)													 ::openfl::text::_internal::TextLayout _gthis45 = _gthis->_hx___textLayout;
HXDLIN(1650)													_gthis45->set_text(text44.substring(textIndex,tempRangeEnd22));
HXDLIN(1650)													if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)														positions = _gthis->_hx___textLayout->get_positions();
            													}
            													else {
HXLINE(1650)														positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            													}
HXDLIN(1650)													Float width48 = ((Float)0.0);
HXDLIN(1650)													{
HXLINE(1650)														int _g50 = 0;
HXDLIN(1650)														while((_g50 < positions->length)){
HXLINE(1650)															 ::openfl::text::_internal::GlyphPosition position52 = positions->__get(_g50).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)															_g50 = (_g50 + 1);
HXDLIN(1650)															width48 = (width48 + position52->advance->x);
            														}
            													}
HXDLIN(1650)													widthValue = width48;
HXDLIN(1650)													bool _hx_tmp144;
HXDLIN(1650)													if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1650)														_hx_tmp144 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1650)														_hx_tmp144 = true;
            													}
HXDLIN(1650)													if (_hx_tmp144) {
HXLINE(1650)														layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd22);
HXDLIN(1650)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1650)														layoutGroup->format = formatRange->format;
HXDLIN(1650)														layoutGroup->startIndex = textIndex;
HXDLIN(1650)														layoutGroup->endIndex = tempRangeEnd22;
            													}
HXDLIN(1650)													layoutGroup->positions = positions;
HXDLIN(1650)													int _hx_tmp145;
HXDLIN(1650)													if (firstLineOfParagraph) {
HXLINE(1650)														_hx_tmp145 = indent;
            													}
            													else {
HXLINE(1650)														_hx_tmp145 = 0;
            													}
HXDLIN(1650)													layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp145)) ));
HXDLIN(1650)													layoutGroup->ascent = ascent;
HXDLIN(1650)													layoutGroup->descent = descent;
HXDLIN(1650)													layoutGroup->leading = leading;
HXDLIN(1650)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1650)													layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1650)													layoutGroup->width = widthValue;
HXDLIN(1650)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1650)													offsetX = (offsetX + widthValue);
HXDLIN(1650)													textIndex = tempRangeEnd22;
            												}
HXDLIN(1650)												if ((tempRangeEnd22 == formatRange->end)) {
HXLINE(1650)													layoutGroup = null();
            												}
HXDLIN(1650)												if ((tempRangeEnd22 == placeIndex3)) {
HXLINE(1650)													goto _hx_goto_112;
            												}
HXDLIN(1650)												bool _hx_tmp146;
HXDLIN(1650)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)													rangeIndex = (rangeIndex + 1);
HXDLIN(1650)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1650)													_hx_tmp146 = true;
            												}
            												else {
HXLINE(1650)													_hx_tmp146 = false;
            												}
HXDLIN(1650)												if (!(_hx_tmp146)) {
HXLINE(1650)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1650)													goto _hx_goto_112;
            												}
HXDLIN(1650)												{
HXLINE(1650)													if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1650)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1650)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1650)														bool _hx_tmp147;
HXDLIN(1650)														if (::hx::IsNotNull( font )) {
HXLINE(1650)															_hx_tmp147 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1650)															_hx_tmp147 = false;
            														}
HXDLIN(1650)														if (_hx_tmp147) {
HXLINE(1650)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1650)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE(1650)															ascent = ( (Float)(currentFormat->size) );
HXDLIN(1650)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXDLIN(1650)													leading = ( (int)(currentFormat->leading) );
HXDLIN(1650)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1650)													if ((heightValue > maxHeightValue)) {
HXLINE(1650)														maxHeightValue = heightValue;
            													}
HXDLIN(1650)													if ((ascent > maxAscent)) {
HXLINE(1650)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_112:;
            										}
HXDLIN(1650)										textIndex = placeIndex3;
            									}
HXDLIN(1650)									{
HXLINE(1650)										{
HXLINE(1650)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1650)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1650)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1650)												bool _hx_tmp148;
HXDLIN(1650)												if (::hx::IsNotNull( font )) {
HXLINE(1650)													_hx_tmp148 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1650)													_hx_tmp148 = false;
            												}
HXDLIN(1650)												if (_hx_tmp148) {
HXLINE(1650)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1650)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE(1650)													ascent = ( (Float)(currentFormat->size) );
HXDLIN(1650)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXDLIN(1650)											leading = ( (int)(currentFormat->leading) );
HXDLIN(1650)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1650)											if ((heightValue > maxHeightValue)) {
HXLINE(1650)												maxHeightValue = heightValue;
            											}
HXDLIN(1650)											if ((ascent > maxAscent)) {
HXLINE(1650)												maxAscent = ascent;
            											}
            										}
HXDLIN(1650)										int i13 = _gthis->layoutGroups->get_length();
HXDLIN(1650)										while(true){
HXLINE(1650)											i13 = (i13 - 1);
HXDLIN(1650)											if (!((i13 > -1))) {
HXLINE(1650)												goto _hx_goto_114;
            											}
HXDLIN(1650)											 ::openfl::text::_internal::TextLayoutGroup lg7 = _gthis->layoutGroups->get(i13).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1650)											if ((lg7->lineIndex < lineIndex)) {
HXLINE(1650)												goto _hx_goto_114;
            											}
HXDLIN(1650)											if ((lg7->lineIndex > lineIndex)) {
HXLINE(1650)												continue;
            											}
HXDLIN(1650)											lg7->ascent = maxAscent;
HXDLIN(1650)											lg7->height = ( (Float)(maxHeightValue) );
            										}
            										_hx_goto_114:;
HXDLIN(1650)										offsetY = (offsetY + maxHeightValue);
HXDLIN(1650)										maxAscent = ((Float)0.0);
HXDLIN(1650)										maxHeightValue = 0;
HXDLIN(1650)										lineIndex = (lineIndex + 1);
HXDLIN(1650)										offsetX = ( (Float)(0) );
HXDLIN(1650)										firstLineOfParagraph = false;
            									}
HXDLIN(1650)									if ((placeIndex3 >= endIndex8)) {
HXLINE(1650)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)										widthValue = ( (Float)(0) );
            									}
            									else {
HXLINE(1650)										if ((endIndex8 <= formatRange->end)) {
HXLINE(1650)											::String text45 = _gthis->text;
HXDLIN(1650)											Float letterSpacing45 = ((Float)0.0);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)												letterSpacing45 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXDLIN(1650)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->letterSpacing = letterSpacing45;
HXDLIN(1650)											bool positions32;
HXDLIN(1650)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)												positions32 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1650)												positions32 = true;
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->autoHint = positions32;
HXDLIN(1650)											 ::openfl::text::_internal::TextLayout _gthis46 = _gthis->_hx___textLayout;
HXDLIN(1650)											_gthis46->set_text(text45.substring(placeIndex3,endIndex8));
HXDLIN(1650)											if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)												positions = _gthis->_hx___textLayout->get_positions();
            											}
            											else {
HXLINE(1650)												positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            											}
HXDLIN(1650)											Float width49 = ((Float)0.0);
HXDLIN(1650)											{
HXLINE(1650)												int _g51 = 0;
HXDLIN(1650)												while((_g51 < positions->length)){
HXLINE(1650)													 ::openfl::text::_internal::GlyphPosition position53 = positions->__get(_g51).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)													_g51 = (_g51 + 1);
HXDLIN(1650)													width49 = (width49 + position53->advance->x);
            												}
            											}
HXDLIN(1650)											widthValue = width49;
            										}
            										else {
HXLINE(1650)											int tempIndex14 = placeIndex3;
HXDLIN(1650)											int tempRangeEnd23 = formatRange->end;
HXDLIN(1650)											int countRanges14 = 0;
HXDLIN(1650)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1650)											widthValue = ( (Float)(0) );
HXDLIN(1650)											while(true){
HXLINE(1650)												if ((tempIndex14 != tempRangeEnd23)) {
HXLINE(1650)													::String text46 = _gthis->text;
HXDLIN(1650)													Float letterSpacing46 = ((Float)0.0);
HXDLIN(1650)													if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)														letterSpacing46 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXDLIN(1650)													if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)													if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->letterSpacing = letterSpacing46;
HXDLIN(1650)													bool _hx_tmp149;
HXDLIN(1650)													if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)														_hx_tmp149 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1650)														_hx_tmp149 = true;
            													}
HXDLIN(1650)													_gthis->_hx___textLayout->autoHint = _hx_tmp149;
HXDLIN(1650)													 ::openfl::text::_internal::TextLayout _gthis47 = _gthis->_hx___textLayout;
HXDLIN(1650)													_gthis47->set_text(text46.substring(tempIndex14,tempRangeEnd23));
HXDLIN(1650)													::Array< ::Dynamic> tempPositions14;
HXDLIN(1650)													if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)														tempPositions14 = _gthis->_hx___textLayout->get_positions();
            													}
            													else {
HXLINE(1650)														tempPositions14 = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            													}
HXDLIN(1650)													positions = positions->concat(tempPositions14);
            												}
HXDLIN(1650)												if ((tempRangeEnd23 != endIndex8)) {
HXLINE(1650)													bool _hx_tmp150;
HXDLIN(1650)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)														rangeIndex = (rangeIndex + 1);
HXDLIN(1650)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1650)														_hx_tmp150 = true;
            													}
            													else {
HXLINE(1650)														_hx_tmp150 = false;
            													}
HXDLIN(1650)													if (!(_hx_tmp150)) {
HXLINE(1650)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1117,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1650)														goto _hx_goto_116;
            													}
HXDLIN(1650)													tempIndex14 = tempRangeEnd23;
HXDLIN(1650)													if ((endIndex8 < formatRange->end)) {
HXLINE(1650)														tempRangeEnd23 = endIndex8;
            													}
            													else {
HXLINE(1650)														tempRangeEnd23 = formatRange->end;
            													}
HXDLIN(1650)													countRanges14 = (countRanges14 + 1);
            												}
            												else {
HXLINE(1650)													Float width50 = ((Float)0.0);
HXDLIN(1650)													{
HXLINE(1650)														int _g52 = 0;
HXDLIN(1650)														while((_g52 < positions->length)){
HXLINE(1650)															 ::openfl::text::_internal::GlyphPosition position54 = positions->__get(_g52).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)															_g52 = (_g52 + 1);
HXDLIN(1650)															width50 = (width50 + position54->advance->x);
            														}
            													}
HXDLIN(1650)													widthValue = width50;
HXDLIN(1650)													goto _hx_goto_116;
            												}
            											}
            											_hx_goto_116:;
HXDLIN(1650)											rangeIndex = (rangeIndex - (countRanges14 + 1));
HXDLIN(1650)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)												rangeIndex = (rangeIndex + 1);
HXDLIN(1650)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
            									}
HXDLIN(1650)									remainingPositions3 = positions;
HXDLIN(1650)									tempWidth3 = widthValue;
            								}
            								_hx_goto_102:;
            							}
HXDLIN(1650)							{
HXLINE(1650)								if ((endIndex8 <= formatRange->end)) {
HXLINE(1650)									::String text47 = _gthis->text;
HXDLIN(1650)									Float letterSpacing47 = ((Float)0.0);
HXDLIN(1650)									if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)										letterSpacing47 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXDLIN(1650)									if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1650)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)									if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1650)									_gthis->_hx___textLayout->letterSpacing = letterSpacing47;
HXDLIN(1650)									bool positions33;
HXDLIN(1650)									if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)										positions33 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1650)										positions33 = true;
            									}
HXDLIN(1650)									_gthis->_hx___textLayout->autoHint = positions33;
HXDLIN(1650)									 ::openfl::text::_internal::TextLayout _gthis48 = _gthis->_hx___textLayout;
HXDLIN(1650)									_gthis48->set_text(text47.substring(textIndex,endIndex8));
HXDLIN(1650)									if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)										positions = _gthis->_hx___textLayout->get_positions();
            									}
            									else {
HXLINE(1650)										positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            									}
HXDLIN(1650)									Float width51 = ((Float)0.0);
HXDLIN(1650)									{
HXLINE(1650)										int _g53 = 0;
HXDLIN(1650)										while((_g53 < positions->length)){
HXLINE(1650)											 ::openfl::text::_internal::GlyphPosition position55 = positions->__get(_g53).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)											_g53 = (_g53 + 1);
HXDLIN(1650)											width51 = (width51 + position55->advance->x);
            										}
            									}
HXDLIN(1650)									widthValue = width51;
HXDLIN(1650)									bool _hx_tmp151;
HXDLIN(1650)									if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1650)										_hx_tmp151 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1650)										_hx_tmp151 = true;
            									}
HXDLIN(1650)									if (_hx_tmp151) {
HXLINE(1650)										layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex8);
HXDLIN(1650)										_gthis->layoutGroups->push(layoutGroup);
            									}
            									else {
HXLINE(1650)										layoutGroup->format = formatRange->format;
HXDLIN(1650)										layoutGroup->startIndex = textIndex;
HXDLIN(1650)										layoutGroup->endIndex = endIndex8;
            									}
HXDLIN(1650)									layoutGroup->positions = positions;
HXDLIN(1650)									int _hx_tmp152;
HXDLIN(1650)									if (firstLineOfParagraph) {
HXLINE(1650)										_hx_tmp152 = indent;
            									}
            									else {
HXLINE(1650)										_hx_tmp152 = 0;
            									}
HXDLIN(1650)									layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp152)) ));
HXDLIN(1650)									layoutGroup->ascent = ascent;
HXDLIN(1650)									layoutGroup->descent = descent;
HXDLIN(1650)									layoutGroup->leading = leading;
HXDLIN(1650)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1650)									layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1650)									layoutGroup->width = widthValue;
HXDLIN(1650)									layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1650)									offsetX = (offsetX + widthValue);
HXDLIN(1650)									if ((endIndex8 == formatRange->end)) {
HXLINE(1650)										layoutGroup = null();
HXDLIN(1650)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)											rangeIndex = (rangeIndex + 1);
HXDLIN(1650)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1650)										{
HXLINE(1650)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1650)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1650)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1650)												bool _hx_tmp153;
HXDLIN(1650)												if (::hx::IsNotNull( font )) {
HXLINE(1650)													_hx_tmp153 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1650)													_hx_tmp153 = false;
            												}
HXDLIN(1650)												if (_hx_tmp153) {
HXLINE(1650)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1650)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE(1650)													ascent = ( (Float)(currentFormat->size) );
HXDLIN(1650)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXDLIN(1650)											leading = ( (int)(currentFormat->leading) );
HXDLIN(1650)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1650)											if ((heightValue > maxHeightValue)) {
HXLINE(1650)												maxHeightValue = heightValue;
            											}
HXDLIN(1650)											if ((ascent > maxAscent)) {
HXLINE(1650)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1650)									while(true){
HXLINE(1650)										int tempRangeEnd24;
HXDLIN(1650)										if ((endIndex8 < formatRange->end)) {
HXLINE(1650)											tempRangeEnd24 = endIndex8;
            										}
            										else {
HXLINE(1650)											tempRangeEnd24 = formatRange->end;
            										}
HXDLIN(1650)										if ((textIndex != tempRangeEnd24)) {
HXLINE(1650)											::String text48 = _gthis->text;
HXDLIN(1650)											Float letterSpacing48 = ((Float)0.0);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1650)												letterSpacing48 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXDLIN(1650)											if (::hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1650)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1650)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1650)											if (::hx::IsNotNull( formatRange->format->size )) {
HXLINE(1650)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->letterSpacing = letterSpacing48;
HXDLIN(1650)											bool positions34;
HXDLIN(1650)											if (::hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1650)												positions34 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1650)												positions34 = true;
            											}
HXDLIN(1650)											_gthis->_hx___textLayout->autoHint = positions34;
HXDLIN(1650)											 ::openfl::text::_internal::TextLayout _gthis49 = _gthis->_hx___textLayout;
HXDLIN(1650)											_gthis49->set_text(text48.substring(textIndex,tempRangeEnd24));
HXDLIN(1650)											if (::hx::IsEq( currentFormat->align,2 )) {
HXLINE(1650)												positions = _gthis->_hx___textLayout->get_positions();
            											}
            											else {
HXLINE(1650)												positions = _gthis->_hx___shapeCache->cache(formatRange,_gthis->_hx___textLayout);
            											}
HXDLIN(1650)											Float width52 = ((Float)0.0);
HXDLIN(1650)											{
HXLINE(1650)												int _g54 = 0;
HXDLIN(1650)												while((_g54 < positions->length)){
HXLINE(1650)													 ::openfl::text::_internal::GlyphPosition position56 = positions->__get(_g54).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1650)													_g54 = (_g54 + 1);
HXDLIN(1650)													width52 = (width52 + position56->advance->x);
            												}
            											}
HXDLIN(1650)											widthValue = width52;
HXDLIN(1650)											bool _hx_tmp154;
HXDLIN(1650)											if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1650)												_hx_tmp154 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1650)												_hx_tmp154 = true;
            											}
HXDLIN(1650)											if (_hx_tmp154) {
HXLINE(1650)												layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd24);
HXDLIN(1650)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1650)												layoutGroup->format = formatRange->format;
HXDLIN(1650)												layoutGroup->startIndex = textIndex;
HXDLIN(1650)												layoutGroup->endIndex = tempRangeEnd24;
            											}
HXDLIN(1650)											layoutGroup->positions = positions;
HXDLIN(1650)											int _hx_tmp155;
HXDLIN(1650)											if (firstLineOfParagraph) {
HXLINE(1650)												_hx_tmp155 = indent;
            											}
            											else {
HXLINE(1650)												_hx_tmp155 = 0;
            											}
HXDLIN(1650)											layoutGroup->offsetX = (offsetX + ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp155)) ));
HXDLIN(1650)											layoutGroup->ascent = ascent;
HXDLIN(1650)											layoutGroup->descent = descent;
HXDLIN(1650)											layoutGroup->leading = leading;
HXDLIN(1650)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1650)											layoutGroup->offsetY = (offsetY + 2);
HXDLIN(1650)											layoutGroup->width = widthValue;
HXDLIN(1650)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1650)											offsetX = (offsetX + widthValue);
HXDLIN(1650)											textIndex = tempRangeEnd24;
            										}
HXDLIN(1650)										if ((tempRangeEnd24 == formatRange->end)) {
HXLINE(1650)											layoutGroup = null();
            										}
HXDLIN(1650)										if ((tempRangeEnd24 == endIndex8)) {
HXLINE(1650)											goto _hx_goto_119;
            										}
HXDLIN(1650)										bool _hx_tmp156;
HXDLIN(1650)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1650)											rangeIndex = (rangeIndex + 1);
HXDLIN(1650)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1650)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1650)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1650)											_hx_tmp156 = true;
            										}
            										else {
HXLINE(1650)											_hx_tmp156 = false;
            										}
HXDLIN(1650)										if (!(_hx_tmp156)) {
HXLINE(1650)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",8e,c1,17,2f),::hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1205,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1650)											goto _hx_goto_119;
            										}
HXDLIN(1650)										{
HXLINE(1650)											if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1650)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1650)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1650)												bool _hx_tmp157;
HXDLIN(1650)												if (::hx::IsNotNull( font )) {
HXLINE(1650)													_hx_tmp157 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1650)													_hx_tmp157 = false;
            												}
HXDLIN(1650)												if (_hx_tmp157) {
HXLINE(1650)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1650)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE(1650)													ascent = ( (Float)(currentFormat->size) );
HXDLIN(1650)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXDLIN(1650)											leading = ( (int)(currentFormat->leading) );
HXDLIN(1650)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1650)											if ((heightValue > maxHeightValue)) {
HXLINE(1650)												maxHeightValue = heightValue;
            											}
HXDLIN(1650)											if ((ascent > maxAscent)) {
HXLINE(1650)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_119:;
            								}
HXDLIN(1650)								textIndex = endIndex8;
            							}
            						}
HXLINE(1652)						{
HXLINE(1652)							{
HXLINE(1652)								if (::hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1652)									ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXDLIN(1652)									descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            								}
            								else {
HXLINE(1652)									bool _hx_tmp158;
HXDLIN(1652)									if (::hx::IsNotNull( font )) {
HXLINE(1652)										_hx_tmp158 = (font->unitsPerEM != 0);
            									}
            									else {
HXLINE(1652)										_hx_tmp158 = false;
            									}
HXDLIN(1652)									if (_hx_tmp158) {
HXLINE(1652)										ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXDLIN(1652)										descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            									}
            									else {
HXLINE(1652)										ascent = ( (Float)(currentFormat->size) );
HXDLIN(1652)										descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            									}
            								}
HXDLIN(1652)								leading = ( (int)(currentFormat->leading) );
HXDLIN(1652)								heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1652)								if ((heightValue > maxHeightValue)) {
HXLINE(1652)									maxHeightValue = heightValue;
            								}
HXDLIN(1652)								if ((ascent > maxAscent)) {
HXLINE(1652)									maxAscent = ascent;
            								}
            							}
HXDLIN(1652)							int i14 = _gthis->layoutGroups->get_length();
HXDLIN(1652)							while(true){
HXLINE(1652)								i14 = (i14 - 1);
HXDLIN(1652)								if (!((i14 > -1))) {
HXLINE(1652)									goto _hx_goto_121;
            								}
HXDLIN(1652)								 ::openfl::text::_internal::TextLayoutGroup lg8 = _gthis->layoutGroups->get(i14).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1652)								if ((lg8->lineIndex < lineIndex)) {
HXLINE(1652)									goto _hx_goto_121;
            								}
HXDLIN(1652)								if ((lg8->lineIndex > lineIndex)) {
HXLINE(1652)									continue;
            								}
HXDLIN(1652)								lg8->ascent = maxAscent;
HXDLIN(1652)								lg8->height = ( (Float)(maxHeightValue) );
            							}
            							_hx_goto_121:;
HXDLIN(1652)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1652)							maxAscent = ((Float)0.0);
HXDLIN(1652)							maxHeightValue = 0;
HXDLIN(1652)							lineIndex = (lineIndex + 1);
HXDLIN(1652)							offsetX = ( (Float)(0) );
HXDLIN(1652)							firstLineOfParagraph = false;
            						}
            					}
HXLINE(1655)					textIndex = (textIndex + 1);
            				}
            			}
            		}
HXLINE(1660)		bool _hx_tmp159;
HXDLIN(1660)		if ((previousBreakIndex == (textIndex - 2))) {
HXLINE(1660)			_hx_tmp159 = (previousBreakIndex > -1);
            		}
            		else {
HXLINE(1660)			_hx_tmp159 = false;
            		}
HXDLIN(1660)		if (_hx_tmp159) {
HXLINE(1662)			{
HXLINE(1662)				int startIndex = (textIndex - 1);
HXDLIN(1662)				int endIndex11 = (textIndex - 1);
HXDLIN(1662)				bool _hx_tmp160;
HXDLIN(1662)				if (::hx::IsNotNull( layoutGroup )) {
HXLINE(1662)					_hx_tmp160 = (layoutGroup->startIndex != layoutGroup->endIndex);
            				}
            				else {
HXLINE(1662)					_hx_tmp160 = true;
            				}
HXDLIN(1662)				if (_hx_tmp160) {
HXLINE(1662)					layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,startIndex,endIndex11);
HXDLIN(1662)					_gthis->layoutGroups->push(layoutGroup);
            				}
            				else {
HXLINE(1662)					layoutGroup->format = formatRange->format;
HXDLIN(1662)					layoutGroup->startIndex = startIndex;
HXDLIN(1662)					layoutGroup->endIndex = endIndex11;
            				}
            			}
HXLINE(1664)			layoutGroup->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1665)			layoutGroup->ascent = ascent;
HXLINE(1666)			layoutGroup->descent = descent;
HXLINE(1667)			layoutGroup->leading = leading;
HXLINE(1668)			layoutGroup->lineIndex = lineIndex;
HXLINE(1669)			int _hx_tmp161;
HXDLIN(1669)			if (firstLineOfParagraph) {
HXLINE(1669)				_hx_tmp161 = indent;
            			}
            			else {
HXLINE(1669)				_hx_tmp161 = 0;
            			}
HXDLIN(1669)			layoutGroup->offsetX = ( (Float)((((2 + leftMargin) + blockIndent) + _hx_tmp161)) );
HXLINE(1670)			layoutGroup->offsetY = (offsetY + 2);
HXLINE(1671)			layoutGroup->width = ( (Float)(0) );
HXLINE(1672)			layoutGroup->height = ( (Float)(heightValue) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1696_restrictText)
HXLINE(1697)		if (::hx::IsNull( value )) {
HXLINE(1699)			return value;
            		}
HXLINE(1702)		if (::hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1704)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1713)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1717_setTextAlignment)
HXLINE(1718)		int lineIndex = -1;
HXLINE(1719)		Float offsetX = ((Float)0.0);
HXLINE(1720)		Float totalWidth = (this->width - ( (Float)(4) ));
HXLINE(1721)		 ::openfl::text::_internal::TextLayoutGroup group;
HXDLIN(1721)		int lineLength;
HXLINE(1722)		bool lineMeasurementsDirty = false;
HXLINE(1724)		{
HXLINE(1724)			int _g = 0;
HXDLIN(1724)			int _g1 = this->layoutGroups->get_length();
HXDLIN(1724)			while((_g < _g1)){
HXLINE(1724)				_g = (_g + 1);
HXDLIN(1724)				int i = (_g - 1);
HXLINE(1726)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1728)				if ((group->lineIndex != lineIndex)) {
HXLINE(1730)					lineIndex = group->lineIndex;
HXLINE(1731)					totalWidth = ((this->width - ( (Float)(4) )) - ( (Float)(group->format->rightMargin) ));
HXLINE(1733)					 ::Dynamic _hx_switch_0 = group->format->align;
            					if (  (_hx_switch_0==0) ){
HXLINE(1736)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1738)							offsetX = ( (Float)(::Math_obj::round(((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)(2) )))) );
            						}
            						else {
HXLINE(1742)							offsetX = ( (Float)(0) );
            						}
HXLINE(1736)						goto _hx_goto_125;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(1756)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1758)							lineLength = 1;
HXLINE(1760)							{
HXLINE(1760)								int _g2 = (i + 1);
HXDLIN(1760)								int _g3 = this->layoutGroups->get_length();
HXDLIN(1760)								while((_g2 < _g3)){
HXLINE(1760)									_g2 = (_g2 + 1);
HXDLIN(1760)									int j = (_g2 - 1);
HXLINE(1762)									if ((this->layoutGroups->get(j).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->lineIndex == lineIndex)) {
HXLINE(1764)										bool _hx_tmp;
HXDLIN(1764)										if ((j != 0)) {
HXLINE(1764)											::String _hx_tmp1 = this->text;
HXDLIN(1764)											_hx_tmp = ::hx::IsEq( _hx_tmp1.charCodeAt((this->layoutGroups->get(j).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->startIndex - 1)),32 );
            										}
            										else {
HXLINE(1764)											_hx_tmp = true;
            										}
HXDLIN(1764)										if (_hx_tmp) {
HXLINE(1766)											lineLength = (lineLength + 1);
            										}
            									}
            									else {
HXLINE(1771)										goto _hx_goto_126;
            									}
            								}
            								_hx_goto_126:;
            							}
HXLINE(1775)							if ((lineLength > 1)) {
HXLINE(1777)								group = this->layoutGroups->get(((i + lineLength) - 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1779)								 ::Dynamic endChar = this->text.charCodeAt(group->endIndex);
HXLINE(1780)								bool _hx_tmp2;
HXDLIN(1780)								bool _hx_tmp3;
HXDLIN(1780)								if ((group->endIndex < this->text.length)) {
HXLINE(1780)									_hx_tmp3 = ::hx::IsNotEq( endChar,10 );
            								}
            								else {
HXLINE(1780)									_hx_tmp3 = false;
            								}
HXDLIN(1780)								if (_hx_tmp3) {
HXLINE(1780)									_hx_tmp2 = ::hx::IsNotEq( endChar,13 );
            								}
            								else {
HXLINE(1780)									_hx_tmp2 = false;
            								}
HXDLIN(1780)								if (_hx_tmp2) {
HXLINE(1782)									offsetX = ((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)((lineLength - 1)) ));
HXLINE(1783)									lineMeasurementsDirty = true;
HXLINE(1785)									int j1 = 1;
HXLINE(1786)									do {
HXLINE(1795)										 ::openfl::text::_internal::TextLayoutGroup fh = this->layoutGroups->get((i + j1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1795)										fh->offsetX = (fh->offsetX + (offsetX * ( (Float)(j1) )));
HXLINE(1797)										j1 = (j1 + 1);
            									} while((j1 < lineLength));
;
            								}
            							}
            						}
HXLINE(1802)						offsetX = ( (Float)(0) );
HXLINE(1755)						goto _hx_goto_125;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(1746)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1748)							offsetX = ( (Float)(::Math_obj::round((totalWidth - this->lineWidths->get(lineIndex)))) );
            						}
            						else {
HXLINE(1752)							offsetX = ( (Float)(0) );
            						}
HXLINE(1746)						goto _hx_goto_125;
            					}
            					/* default */{
HXLINE(1805)						offsetX = ( (Float)(0) );
            					}
            					_hx_goto_125:;
            				}
HXLINE(1809)				if ((offsetX > 0)) {
HXLINE(1811)					 ::openfl::text::_internal::TextLayoutGroup group1 = group;
HXDLIN(1811)					group1->offsetX = (group1->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1815)		if (lineMeasurementsDirty) {
HXLINE(1819)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1824_trimText)
HXLINE(1825)		if (::hx::IsNull( value )) {
HXLINE(1827)			return value;
            		}
HXLINE(1830)		bool _hx_tmp;
HXDLIN(1830)		if ((this->maxChars > 0)) {
HXLINE(1830)			_hx_tmp = (value.length > this->maxChars);
            		}
            		else {
HXLINE(1830)			_hx_tmp = false;
            		}
HXDLIN(1830)		if (_hx_tmp) {
HXLINE(1832)			value = value.substr(0,this->maxChars);
            		}
HXLINE(1835)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1839_update)
HXLINE(1840)		bool _hx_tmp;
HXDLIN(1840)		if (::hx::IsNotNull( this->text )) {
HXLINE(1840)			_hx_tmp = (this->textFormatRanges->get_length() == 0);
            		}
            		else {
HXLINE(1840)			_hx_tmp = true;
            		}
HXDLIN(1840)		if (_hx_tmp) {
HXLINE(1842)			this->lineAscents->set_length(0);
HXLINE(1843)			this->lineBreaks->set_length(0);
HXLINE(1844)			this->lineDescents->set_length(0);
HXLINE(1845)			this->lineLeadings->set_length(0);
HXLINE(1846)			this->lineHeights->set_length(0);
HXLINE(1847)			this->lineWidths->set_length(0);
HXLINE(1848)			this->layoutGroups->set_length(0);
HXLINE(1850)			this->textWidth = ( (Float)(0) );
HXLINE(1851)			this->textHeight = ( (Float)(0) );
HXLINE(1852)			this->numLines = 1;
HXLINE(1853)			this->maxScrollH = 0;
HXLINE(1854)			this->maxScrollV = 1;
HXLINE(1855)			this->bottomScrollV = 1;
            		}
            		else {
HXLINE(1859)			this->getLineBreaks();
HXLINE(1860)			this->getLayoutGroups();
HXLINE(1861)			this->getLineMeasurements();
HXLINE(1862)			this->setTextAlignment();
            		}
HXLINE(1865)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

int TextEngine_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1872_get_bottomScrollV)
HXDLIN(1872)		bool _hx_tmp;
HXDLIN(1872)		if ((this->numLines != 1)) {
HXDLIN(1872)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1872)			_hx_tmp = true;
            		}
HXDLIN(1872)		if (_hx_tmp) {
HXLINE(1874)			return 1;
            		}
            		else {
HXLINE(1878)			int ret = this->lineHeights->get_length();
HXLINE(1880)			Float tempHeight;
HXDLIN(1880)			if ((this->lineLeadings->get_length() == ret)) {
HXLINE(1880)				tempHeight = -(this->lineLeadings->get((ret - 1)));
            			}
            			else {
HXLINE(1880)				tempHeight = ((Float)0.0);
            			}
HXLINE(1882)			{
HXLINE(1882)				int _g;
HXDLIN(1882)				if ((this->get_scrollV() > 0)) {
HXLINE(1882)					_g = this->get_scrollV();
            				}
            				else {
HXLINE(1882)					_g = 1;
            				}
HXDLIN(1882)				int _g1 = (_g - 1);
HXDLIN(1882)				int _g2 = this->lineHeights->get_length();
HXDLIN(1882)				while((_g1 < _g2)){
HXLINE(1882)					_g1 = (_g1 + 1);
HXDLIN(1882)					int i = (_g1 - 1);
HXLINE(1884)					Float lineHeight = this->lineHeights->get(i);
HXLINE(1886)					tempHeight = (tempHeight + lineHeight);
HXLINE(1888)					if ((tempHeight > (this->height - ( (Float)(4) )))) {
HXLINE(1890)						int ret1;
HXDLIN(1890)						if (((tempHeight - this->height) >= 0)) {
HXLINE(1890)							ret1 = 0;
            						}
            						else {
HXLINE(1890)							ret1 = 1;
            						}
HXDLIN(1890)						ret = (i + ret1);
HXLINE(1891)						goto _hx_goto_131;
            					}
            				}
            				_hx_goto_131:;
            			}
HXLINE(1906)			if ((ret < this->get_scrollV())) {
HXLINE(1906)				return this->get_scrollV();
            			}
HXLINE(1912)			return ret;
            		}
HXLINE(1872)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_bottomScrollV,return )

int TextEngine_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1919_get_maxScrollV)
HXDLIN(1919)		bool _hx_tmp;
HXDLIN(1919)		if ((this->numLines != 1)) {
HXDLIN(1919)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1919)			_hx_tmp = true;
            		}
HXDLIN(1919)		if (_hx_tmp) {
HXLINE(1921)			return 1;
            		}
            		else {
HXLINE(1925)			int i = (this->numLines - 1);
HXDLIN(1925)			Float tempHeight = ((Float)0.0);
HXLINE(1926)			int j = i;
HXLINE(1929)			while((i >= 0)){
HXLINE(1931)				tempHeight = (tempHeight + this->lineHeights->get(i));
HXLINE(1933)				if ((tempHeight > (this->height - ( (Float)(4) )))) {
HXLINE(1935)					int i1;
HXDLIN(1935)					if (((tempHeight - this->height) < 0)) {
HXLINE(1935)						i1 = 1;
            					}
            					else {
HXLINE(1935)						i1 = 2;
            					}
HXDLIN(1935)					i = (i + i1);
HXLINE(1936)					goto _hx_goto_133;
            				}
HXLINE(1938)				i = (i - 1);
            			}
            			_hx_goto_133:;
HXLINE(1954)			if ((i < 1)) {
HXLINE(1954)				return 1;
            			}
HXLINE(1955)			return i;
            		}
HXLINE(1919)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_maxScrollV,return )

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1960_set_restrict)
HXLINE(1961)		if ((this->restrict == value)) {
HXLINE(1963)			return this->restrict;
            		}
HXLINE(1966)		this->restrict = value;
HXLINE(1968)		bool _hx_tmp;
HXDLIN(1968)		if (::hx::IsNotNull( this->restrict )) {
HXLINE(1968)			_hx_tmp = (this->restrict.length == 0);
            		}
            		else {
HXLINE(1968)			_hx_tmp = true;
            		}
HXDLIN(1968)		if (_hx_tmp) {
HXLINE(1970)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1974)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1977)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

int TextEngine_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1981_get_scrollV)
HXLINE(1982)		bool _hx_tmp;
HXDLIN(1982)		if ((this->numLines != 1)) {
HXLINE(1982)			_hx_tmp = ::hx::IsNull( this->lineHeights );
            		}
            		else {
HXLINE(1982)			_hx_tmp = true;
            		}
HXDLIN(1982)		if (_hx_tmp) {
HXLINE(1982)			return 1;
            		}
HXLINE(1984)		int max = this->get_maxScrollV();
HXLINE(1987)		if ((this->scrollV > max)) {
HXLINE(1987)			return max;
            		}
HXLINE(1989)		return this->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_scrollV,return )

int TextEngine_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1993_set_scrollV)
HXLINE(1994)		if ((value < 1)) {
HXLINE(1994)			value = 1;
            		}
            		else {
HXLINE(1995)			if ((value > this->get_maxScrollV())) {
HXLINE(1995)				value = this->get_maxScrollV();
            			}
            		}
HXLINE(1997)		return (this->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_scrollV,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_2002_set_text)
HXDLIN(2002)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::GUTTER;

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_207_findFont)
HXLINE( 211)		{
HXLINE( 211)			int _g = 0;
HXDLIN( 211)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 211)			while((_g < _g1->length)){
HXLINE( 211)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 211)				_g = (_g + 1);
HXLINE( 213)				if (::hx::IsNull( registeredFont )) {
HXLINE( 213)					continue;
            				}
HXLINE( 215)				bool _hx_tmp;
HXDLIN( 215)				if ((registeredFont->name != name)) {
HXLINE( 216)					if (::hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 217)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 215)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 215)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 215)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 215)					_hx_tmp = true;
            				}
HXDLIN( 215)				if (_hx_tmp) {
HXLINE( 219)					if (registeredFont->_hx___initialize()) {
HXLINE( 221)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 230)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 232)		if (::hx::IsNotNull( font )) {
HXLINE( 234)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 235)			::openfl::text::Font_obj::_hx___fontByName->set(font->name,font);
HXLINE( 236)			return font;
            		}
HXLINE( 240)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_244_findFontVariant)
HXLINE( 245)		::String fontName = format->font;
HXLINE( 246)		 ::Dynamic bold = format->bold;
HXLINE( 247)		 ::Dynamic italic = format->italic;
HXLINE( 249)		if (::hx::IsNull( fontName )) {
HXLINE( 249)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 250)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 252)		bool _hx_tmp;
HXDLIN( 252)		bool _hx_tmp1;
HXDLIN( 252)		if (( (bool)(bold) )) {
HXLINE( 252)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 252)			_hx_tmp1 = false;
            		}
HXDLIN( 252)		if (_hx_tmp1) {
HXLINE( 252)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 252)			_hx_tmp = false;
            		}
HXDLIN( 252)		if (_hx_tmp) {
HXLINE( 254)			return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 256)			bool _hx_tmp2;
HXDLIN( 256)			if (( (bool)(bold) )) {
HXLINE( 256)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 256)				_hx_tmp2 = false;
            			}
HXDLIN( 256)			if (_hx_tmp2) {
HXLINE( 258)				return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 260)				bool _hx_tmp3;
HXDLIN( 260)				if (( (bool)(italic) )) {
HXLINE( 260)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 260)					_hx_tmp3 = false;
            				}
HXDLIN( 260)				if (_hx_tmp3) {
HXLINE( 262)					return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 265)		return ::openfl::text::_internal::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

 ::openfl::text::Font TextEngine_obj::getDefaultFont(::String name,bool bold,bool italic){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_301_getDefaultFont)
HXLINE( 302)		if (::hx::IsNull( ::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::openfl::text::Font _hx_run(::Array< ::String > list){
            				HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_310_getDefaultFont)
HXLINE( 311)				 ::openfl::text::Font font = null();
HXLINE( 312)				{
HXLINE( 312)					int _g = 0;
HXDLIN( 312)					while((_g < list->length)){
HXLINE( 312)						::String path = list->__get(_g);
HXDLIN( 312)						_g = (_g + 1);
HXLINE( 314)						font = ::openfl::text::_internal::TextEngine_obj::findFont(path);
HXLINE( 315)						if (::hx::IsNotNull( font )) {
HXLINE( 315)							goto _hx_goto_142;
            						}
            					}
            					_hx_goto_142:;
            				}
HXLINE( 317)				return font;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 304)			::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 307)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 309)			 ::Dynamic processFontList =  ::Dynamic(new _hx_Closure_0());
HXLINE( 321)			{
HXLINE( 321)				::Dynamic this1 = ::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts;
HXLINE( 322)				 ::openfl::text::Font value = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
HXDLIN( 322)				 ::openfl::text::Font value1 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
HXLINE( 323)				 ::openfl::text::Font value2 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
HXLINE( 321)				( ( ::haxe::ds::StringMap)(this1) )->set(HX_("_sans",32,a0,5e,ff), ::openfl::text::_internal::_TextEngine::DefaultFontSet_obj::__alloc( HX_CTX ,value,value1,value2,::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)))));
            			}
HXLINE( 325)			{
HXLINE( 325)				::Dynamic this2 = ::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts;
HXLINE( 326)				 ::openfl::text::Font value3 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/times.ttf",2f,58,44,c5)));
HXDLIN( 326)				 ::openfl::text::Font value4 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/timesbd.ttf",b1,92,19,47)));
HXLINE( 327)				 ::openfl::text::Font value5 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/timesi.ttf",ca,27,e8,a0)));
HXLINE( 325)				( ( ::haxe::ds::StringMap)(this2) )->set(HX_("_serif",be,66,15,76), ::openfl::text::_internal::_TextEngine::DefaultFontSet_obj::__alloc( HX_CTX ,value3,value4,value5,::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/timesbi.ttf",36,79,1a,28)))));
            			}
HXLINE( 329)			{
HXLINE( 329)				::Dynamic this3 = ::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts;
HXLINE( 330)				 ::openfl::text::Font value6 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
HXDLIN( 330)				 ::openfl::text::Font value7 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
HXLINE( 331)				 ::openfl::text::Font value8 = ::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
HXLINE( 329)				( ( ::haxe::ds::StringMap)(this3) )->set(HX_("_typewriter",0c,5e,52,94), ::openfl::text::_internal::_TextEngine::DefaultFontSet_obj::__alloc( HX_CTX ,value6,value7,value8,::openfl::text::_internal::TextEngine_obj::findFont((systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)))));
            			}
            		}
HXLINE( 423)		 ::openfl::text::_internal::_TextEngine::DefaultFontSet fontSet = ( ( ::openfl::text::_internal::_TextEngine::DefaultFontSet)(::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->get(name)) );
HXLINE( 424)		if (::hx::IsNull( fontSet )) {
HXLINE( 424)			return null();
            		}
HXLINE( 426)		bool _hx_tmp;
HXDLIN( 426)		bool _hx_tmp1;
HXDLIN( 426)		if (bold) {
HXLINE( 426)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 426)			_hx_tmp1 = false;
            		}
HXDLIN( 426)		if (_hx_tmp1) {
HXLINE( 426)			_hx_tmp = ::hx::IsNotNull( fontSet->boldItalic );
            		}
            		else {
HXLINE( 426)			_hx_tmp = false;
            		}
HXDLIN( 426)		if (_hx_tmp) {
HXLINE( 426)			return fontSet->boldItalic;
            		}
            		else {
HXLINE( 426)			bool _hx_tmp2;
HXDLIN( 426)			if (italic) {
HXLINE( 426)				_hx_tmp2 = ::hx::IsNotNull( fontSet->italic );
            			}
            			else {
HXLINE( 426)				_hx_tmp2 = false;
            			}
HXDLIN( 426)			if (_hx_tmp2) {
HXLINE( 426)				return fontSet->italic;
            			}
            			else {
HXLINE( 426)				bool _hx_tmp3;
HXDLIN( 426)				if (bold) {
HXLINE( 426)					_hx_tmp3 = ::hx::IsNotNull( fontSet->bold );
            				}
            				else {
HXLINE( 426)					_hx_tmp3 = false;
            				}
HXDLIN( 426)				if (_hx_tmp3) {
HXLINE( 426)					return fontSet->bold;
            				}
            				else {
HXLINE( 426)					return fontSet->normal;
            				}
            			}
            		}
HXDLIN( 426)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TextEngine_obj,getDefaultFont,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_430_getFormatHeight)
HXLINE( 431)		Float ascent;
HXDLIN( 431)		Float descent;
HXLINE( 441)		 ::openfl::text::Font font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(format);
HXLINE( 443)		if (::hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 445)			ascent = (( (Float)(format->size) ) * ( (Float)(format->_hx___ascent) ));
HXLINE( 446)			descent = (( (Float)(format->size) ) * ( (Float)(format->_hx___descent) ));
            		}
            		else {
HXLINE( 448)			bool _hx_tmp;
HXDLIN( 448)			if (::hx::IsNotNull( font )) {
HXLINE( 448)				_hx_tmp = (font->unitsPerEM != 0);
            			}
            			else {
HXLINE( 448)				_hx_tmp = false;
            			}
HXDLIN( 448)			if (_hx_tmp) {
HXLINE( 451)				ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) ));
HXLINE( 452)				descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) )));
            			}
            			else {
HXLINE( 460)				ascent = ( (Float)(format->size) );
HXLINE( 461)				descent = (( (Float)(format->size) ) * ((Float)0.185));
            			}
            		}
HXLINE( 431)		int leading = ( (int)(format->leading) );
HXLINE( 466)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_470_getFont)
HXLINE( 471)		::String fontName = format->font;
HXLINE( 472)		 ::Dynamic bold = format->bold;
HXLINE( 473)		 ::Dynamic italic = format->italic;
HXLINE( 475)		if (::hx::IsNull( fontName )) {
HXLINE( 475)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 476)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 478)		bool _hx_tmp;
HXDLIN( 478)		bool _hx_tmp1;
HXDLIN( 478)		if (( (bool)(bold) )) {
HXLINE( 478)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 478)			_hx_tmp1 = false;
            		}
HXDLIN( 478)		if (_hx_tmp1) {
HXLINE( 478)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 478)			_hx_tmp = false;
            		}
HXDLIN( 478)		if (_hx_tmp) {
HXLINE( 480)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 481)			bold = false;
HXLINE( 482)			italic = false;
            		}
            		else {
HXLINE( 484)			bool _hx_tmp2;
HXDLIN( 484)			if (( (bool)(bold) )) {
HXLINE( 484)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 484)				_hx_tmp2 = false;
            			}
HXDLIN( 484)			if (_hx_tmp2) {
HXLINE( 486)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 487)				bold = false;
            			}
            			else {
HXLINE( 489)				bool _hx_tmp3;
HXDLIN( 489)				if (( (bool)(italic) )) {
HXLINE( 489)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 489)					_hx_tmp3 = false;
            				}
HXDLIN( 489)				if (_hx_tmp3) {
HXLINE( 491)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 492)					italic = false;
            				}
            				else {
HXLINE( 498)					bool _hx_tmp4;
HXDLIN( 498)					if (( (bool)(bold) )) {
HXLINE( 498)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= -1)) {
HXLINE( 498)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 498)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 498)						_hx_tmp4 = false;
            					}
HXDLIN( 498)					if (_hx_tmp4) {
HXLINE( 500)						bold = false;
            					}
HXLINE( 503)					bool _hx_tmp5;
HXDLIN( 503)					if (( (bool)(italic) )) {
HXLINE( 503)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= -1)) {
HXLINE( 503)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 503)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 503)						_hx_tmp5 = false;
            					}
HXDLIN( 503)					if (_hx_tmp5) {
HXLINE( 505)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 509)		::String font;
HXDLIN( 509)		if (( (bool)(italic) )) {
HXLINE( 509)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 509)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 510)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 511)		::String font1;
HXDLIN( 511)		if (( (bool)(bold) )) {
HXLINE( 511)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 511)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 511)		font = (font + font1);
HXLINE( 512)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 514)		font = (font + ((HX_("/",2f,00,00,00) + (format->size + 3)) + HX_("px ",18,65,55,00)));
HXLINE( 516)		::String font2;
HXDLIN( 516)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 516)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 516)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 516)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 516)			goto _hx_goto_146;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 516)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 516)			goto _hx_goto_146;
            		}
            		/* default */{
HXLINE( 516)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_146:;
HXDLIN( 516)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 524)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_528_getFontInstance)
HXLINE( 532)		 ::openfl::text::Font instance = null();
HXLINE( 533)		 ::Dynamic fontList = null();
HXLINE( 535)		bool _hx_tmp;
HXDLIN( 535)		if (::hx::IsNotNull( format )) {
HXLINE( 535)			_hx_tmp = ::hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 535)			_hx_tmp = false;
            		}
HXDLIN( 535)		if (_hx_tmp) {
HXLINE( 537)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 540)				instance = ::openfl::text::_internal::TextEngine_obj::getDefaultFont(format->font,( (bool)(format->bold) ),( (bool)(format->italic) ));
HXLINE( 541)				if (::hx::IsNotNull( instance )) {
HXLINE( 541)					return instance;
            				}
HXLINE( 539)				goto _hx_goto_148;
            			}
            			/* default */{
            			}
            			_hx_goto_148:;
HXLINE( 545)			instance = ::openfl::text::_internal::TextEngine_obj::findFontVariant(format);
HXLINE( 546)			if (::hx::IsNotNull( instance )) {
HXLINE( 546)				return instance;
            			}
            		}
HXLINE( 549)		instance = ::openfl::text::_internal::TextEngine_obj::getDefaultFont(HX_("_serif",be,66,15,76),( (bool)(format->bold) ),( (bool)(format->italic) ));
HXLINE( 550)		if (::hx::IsNotNull( instance )) {
HXLINE( 550)			return instance;
            		}
HXLINE( 553)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


::hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	::hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

::hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl.text._internal.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___shapeCache,"__shapeCache");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___shapeCache,"__shapeCache");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

::hx::Val TextEngine_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return ::hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return ::hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return ::hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return ::hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_scrollV() : scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return ::hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return ::hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return ::hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return ::hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return ::hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return ::hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return ::hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return ::hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return ::hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return ::hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return ::hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return ::hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return ::hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return ::hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return ::hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return ::hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return ::hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_maxScrollV() : maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return ::hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return ::hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return ::hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return ::hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return ::hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return ::hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return ::hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return ::hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return ::hx::Val( _hx___cairoFont ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return ::hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return ::hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return ::hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__shapeCache") ) { return ::hx::Val( _hx___shapeCache ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return ::hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return ::hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return ::hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_bottomScrollV() : bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"getLineBreaks") ) { return ::hx::Val( getLineBreaks_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return ::hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return ::hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return ::hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return ::hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return ::hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return ::hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return ::hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return ::hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return ::hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return ::hx::Val( getLineBreakIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return ::hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return ::hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		if (HX_FIELD_EQ(inName,"getDefaultFont") ) { outValue = getDefaultFont_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

::hx::Val TextEngine_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) );scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__shapeCache") ) { _hx___shapeCache=inValue.Cast<  ::openfl::text::_internal::ShapeCache >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::text::_internal::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("layoutGroups",9e,a2,6c,37));
	outFields->push(HX_("lineAscents",45,0c,c2,3e));
	outFields->push(HX_("lineBreaks",e8,fd,5b,ea));
	outFields->push(HX_("lineDescents",0d,ad,64,49));
	outFields->push(HX_("lineLeadings",01,23,97,76));
	outFields->push(HX_("lineHeights",18,99,8e,3e));
	outFields->push(HX_("lineWidths",c1,8a,a4,20));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textBounds",02,07,0e,9d));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textFormatRanges",fa,0e,49,a2));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__hasFocus",3e,1d,1a,34));
	outFields->push(HX_("__isKeyDown",b7,2f,72,ce));
	outFields->push(HX_("__measuredHeight",ed,b6,23,42));
	outFields->push(HX_("__measuredWidth",c0,49,ec,02));
	outFields->push(HX_("__restrictRegexp",45,9f,ae,a9));
	outFields->push(HX_("__selectionStart",96,e3,b9,43));
	outFields->push(HX_("__shapeCache",81,aa,e8,5f));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__textLayout",57,aa,3c,c8));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__useIntAdvances",d9,17,72,7d));
	outFields->push(HX_("__cairoFont",57,e7,b5,28));
	outFields->push(HX_("__font",ef,c0,b8,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_("antiAliasType",68,c4,fa,e7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,autoSize),HX_("autoSize",d0,8f,79,2f)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_("border",ec,4c,1a,64)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_("bottomScrollV",fe,f7,87,8b)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,bounds),HX_("bounds",75,86,1d,66)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_("caretIndex",8f,b6,5b,dd)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,gridFitType),HX_("gridFitType",05,f3,13,b4)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_("layoutGroups",9e,a2,6c,37)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineAscents),HX_("lineAscents",45,0c,c2,3e)},
	{::hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_("lineBreaks",e8,fd,5b,ea)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineDescents),HX_("lineDescents",0d,ad,64,49)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_("lineLeadings",01,23,97,76)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineHeights),HX_("lineHeights",18,99,8e,3e)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineWidths),HX_("lineWidths",c1,8a,a4,20)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_("maxChars",99,ef,d0,ef)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_("maxScrollH",57,ad,fc,9a)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_("maxScrollV",65,ad,fc,9a)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_("multiline",ed,d2,11,9e)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{::hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_("restrict",3c,cb,9e,f1)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_("scrollH",9b,33,d8,30)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_("scrollV",a9,33,d8,30)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_("sharpness",81,22,25,1b)},
	{::hx::fsString,(int)offsetof(TextEngine_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,textBounds),HX_("textBounds",02,07,0e,9d)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_("textHeight",74,88,3c,39)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_("textFormatRanges",fa,0e,49,a2)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_("textWidth",19,46,50,63)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_("wordWrap",b4,14,db,00)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextEngine_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_("__hasFocus",3e,1d,1a,34)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_("__isKeyDown",b7,2f,72,ce)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_("__measuredHeight",ed,b6,23,42)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_("__measuredWidth",c0,49,ec,02)},
	{::hx::fsObject /*  ::EReg */ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_("__restrictRegexp",45,9f,ae,a9)},
	{::hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_("__selectionStart",96,e3,b9,43)},
	{::hx::fsObject /*  ::openfl::text::_internal::ShapeCache */ ,(int)offsetof(TextEngine_obj,_hx___shapeCache),HX_("__shapeCache",81,aa,e8,5f)},
	{::hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{::hx::fsObject /*  ::openfl::text::_internal::TextLayout */ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_("__textLayout",57,aa,3c,c8)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_("__useIntAdvances",d9,17,72,7d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_("__cairoFont",57,e7,b5,28)},
	{::hx::fsObject /*  ::openfl::text::Font */ ,(int)offsetof(TextEngine_obj,_hx___font),HX_("__font",ef,c0,b8,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &TextEngine_obj::GUTTER,HX_("GUTTER",1b,d3,2b,8c)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_("UTF8_TAB",07,d5,41,1d)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_("UTF8_ENDLINE",01,29,41,cf)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_("UTF8_SPACE",f8,7b,a9,c7)},
	{::hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_("UTF8_HYPHEN",60,3c,3f,bf)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_("__defaultFonts",63,76,ad,da)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_("antiAliasType",68,c4,fa,e7),
	HX_("autoSize",d0,8f,79,2f),
	HX_("background",ee,93,1d,26),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("border",ec,4c,1a,64),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("bottomScrollV",fe,f7,87,8b),
	HX_("bounds",75,86,1d,66),
	HX_("caretIndex",8f,b6,5b,dd),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("gridFitType",05,f3,13,b4),
	HX_("height",e7,07,4c,02),
	HX_("layoutGroups",9e,a2,6c,37),
	HX_("lineAscents",45,0c,c2,3e),
	HX_("lineBreaks",e8,fd,5b,ea),
	HX_("lineDescents",0d,ad,64,49),
	HX_("lineLeadings",01,23,97,76),
	HX_("lineHeights",18,99,8e,3e),
	HX_("lineWidths",c1,8a,a4,20),
	HX_("maxChars",99,ef,d0,ef),
	HX_("maxScrollH",57,ad,fc,9a),
	HX_("maxScrollV",65,ad,fc,9a),
	HX_("multiline",ed,d2,11,9e),
	HX_("numLines",d9,f1,11,32),
	HX_("restrict",3c,cb,9e,f1),
	HX_("scrollH",9b,33,d8,30),
	HX_("scrollV",a9,33,d8,30),
	HX_("selectable",96,b6,2a,c4),
	HX_("sharpness",81,22,25,1b),
	HX_("text",ad,cc,f9,4c),
	HX_("textBounds",02,07,0e,9d),
	HX_("textHeight",74,88,3c,39),
	HX_("textFormatRanges",fa,0e,49,a2),
	HX_("textWidth",19,46,50,63),
	HX_("type",ba,f2,08,4d),
	HX_("width",06,b6,62,ca),
	HX_("wordWrap",b4,14,db,00),
	HX_("textField",cd,24,81,99),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__hasFocus",3e,1d,1a,34),
	HX_("__isKeyDown",b7,2f,72,ce),
	HX_("__measuredHeight",ed,b6,23,42),
	HX_("__measuredWidth",c0,49,ec,02),
	HX_("__restrictRegexp",45,9f,ae,a9),
	HX_("__selectionStart",96,e3,b9,43),
	HX_("__shapeCache",81,aa,e8,5f),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("__textLayout",57,aa,3c,c8),
	HX_("__texture",bb,19,2f,20),
	HX_("__useIntAdvances",d9,17,72,7d),
	HX_("__cairoFont",57,e7,b5,28),
	HX_("__font",ef,c0,b8,f2),
	HX_("createRestrictRegexp",41,d0,6b,e1),
	HX_("getBounds",ab,0f,74,e2),
	HX_("getLine",aa,c7,35,1a),
	HX_("getLineBreaks",1e,5a,ce,46),
	HX_("getLineBreakIndex",1d,16,36,36),
	HX_("getLineMeasurements",c1,9f,81,56),
	HX_("getLayoutGroups",54,f8,56,5a),
	HX_("restrictText",09,12,3e,34),
	HX_("setTextAlignment",74,0f,33,62),
	HX_("trimText",af,ae,63,65),
	HX_("update",09,86,05,87),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("set_text",aa,e1,11,7b),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

::hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_("GUTTER",1b,d3,2b,8c),
	HX_("UTF8_TAB",07,d5,41,1d),
	HX_("UTF8_ENDLINE",01,29,41,cf),
	HX_("UTF8_SPACE",f8,7b,a9,c7),
	HX_("UTF8_HYPHEN",60,3c,3f,bf),
	HX_("__defaultFonts",63,76,ad,da),
	HX_("findFont",a8,6a,54,96),
	HX_("findFontVariant",bd,22,bb,b2),
	HX_("getDefaultFont",3a,aa,1d,9d),
	HX_("getFormatHeight",34,24,4b,62),
	HX_("getFont",85,0d,43,16),
	HX_("getFontInstance",3a,76,96,9e),
	::String(null())
};

void TextEngine_obj::__register()
{
	TextEngine_obj _hx_dummy;
	TextEngine_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.text._internal.TextEngine",04,88,80,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_39_boot)
HXDLIN(  39)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("__cairoFont",57,e7,b5,28), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_41_boot)
HXDLIN(  41)		GUTTER = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_42_boot)
HXDLIN(  42)		UTF8_TAB = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_43_boot)
HXDLIN(  43)		UTF8_ENDLINE = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_44_boot)
HXDLIN(  44)		UTF8_SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_45_boot)
HXDLIN(  45)		UTF8_HYPHEN = 45;
            	}
}

} // end namespace openfl
} // end namespace text
} // end namespace _internal
