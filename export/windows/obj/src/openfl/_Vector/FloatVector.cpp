// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_055b1e986ae1a23a_977_new,"openfl._Vector.FloatVector","new",0x7ccdf307,"openfl._Vector.FloatVector.new","openfl/Vector.hx",977,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1000_concat,"openfl._Vector.FloatVector","concat",0xbb39c8cd,"openfl._Vector.FloatVector.concat","openfl/Vector.hx",1000,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1021_copy,"openfl._Vector.FloatVector","copy",0xb028eb2e,"openfl._Vector.FloatVector.copy","openfl/Vector.hx",1021,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1026_filter,"openfl._Vector.FloatVector","filter",0x789edf71,"openfl._Vector.FloatVector.filter","openfl/Vector.hx",1026,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1031_get,"openfl._Vector.FloatVector","get",0x7cc8a33d,"openfl._Vector.FloatVector.get","openfl/Vector.hx",1031,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1035_indexOf,"openfl._Vector.FloatVector","indexOf",0xe9dd4af0,"openfl._Vector.FloatVector.indexOf","openfl/Vector.hx",1035,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1049_insertAt,"openfl._Vector.FloatVector","insertAt",0xb3435c85,"openfl._Vector.FloatVector.insertAt","openfl/Vector.hx",1049,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1057_iterator,"openfl._Vector.FloatVector","iterator",0x84be29e7,"openfl._Vector.FloatVector.iterator","openfl/Vector.hx",1057,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1062_join,"openfl._Vector.FloatVector","join",0xb4c96363,"openfl._Vector.FloatVector.join","openfl/Vector.hx",1062,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1066_lastIndexOf,"openfl._Vector.FloatVector","lastIndexOf",0xc7529eba,"openfl._Vector.FloatVector.lastIndexOf","openfl/Vector.hx",1066,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1080_pop,"openfl._Vector.FloatVector","pop",0x7ccf8038,"openfl._Vector.FloatVector.pop","openfl/Vector.hx",1080,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1092_push,"openfl._Vector.FloatVector","push",0xb8c54153,"openfl._Vector.FloatVector.push","openfl/Vector.hx",1092,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1103_removeAt,"openfl._Vector.FloatVector","removeAt",0x9e3f4e50,"openfl._Vector.FloatVector.removeAt","openfl/Vector.hx",1103,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1113_reverse,"openfl._Vector.FloatVector","reverse",0x241a3b49,"openfl._Vector.FloatVector.reverse","openfl/Vector.hx",1113,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1120_set,"openfl._Vector.FloatVector","set",0x7cd1be49,"openfl._Vector.FloatVector.set","openfl/Vector.hx",1120,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1132_shift,"openfl._Vector.FloatVector","shift",0xa56846e9,"openfl._Vector.FloatVector.shift","openfl/Vector.hx",1132,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1143_slice,"openfl._Vector.FloatVector","slice",0xa80d1eb9,"openfl._Vector.FloatVector.slice","openfl/Vector.hx",1143,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1150_sort,"openfl._Vector.FloatVector","sort",0xbabc56d7,"openfl._Vector.FloatVector.sort","openfl/Vector.hx",1150,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1155_splice,"openfl._Vector.FloatVector","splice",0xb3084535,"openfl._Vector.FloatVector.splice","openfl/Vector.hx",1155,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1161_toJSON,"openfl._Vector.FloatVector","toJSON",0x6f7308dc,"openfl._Vector.FloatVector.toJSON","openfl/Vector.hx",1161,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1166_toString,"openfl._Vector.FloatVector","toString",0x2992b0a5,"openfl._Vector.FloatVector.toString","openfl/Vector.hx",1166,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1171_unshift,"openfl._Vector.FloatVector","unshift",0x81d1e5b0,"openfl._Vector.FloatVector.unshift","openfl/Vector.hx",1171,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1180_get_length,"openfl._Vector.FloatVector","get_length",0xf96594e8,"openfl._Vector.FloatVector.get_length","openfl/Vector.hx",1180,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_1184_set_length,"openfl._Vector.FloatVector","set_length",0xfce3335c,"openfl._Vector.FloatVector.set_length","openfl/Vector.hx",1184,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_055b1e986ae1a23a_967_boot,"openfl._Vector.FloatVector","boot",0xaf7fb3ab,"openfl._Vector.FloatVector.boot","openfl/Vector.hx",967,0x4a01873c)
namespace openfl{
namespace _Vector{

void FloatVector_obj::__construct(::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array,::hx::Null< bool >  __o_forceCopy){
            		int length = __o_length.Default(0);
            		bool fixed = __o_fixed.Default(false);
            		bool forceCopy = __o_forceCopy.Default(false);
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_977_new)
HXLINE( 978)		if (forceCopy) {
HXLINE( 980)			this->_hx___array = ::Array_obj< Float >::__new();
HXLINE( 981)			if (::hx::IsNotNull( array )) {
HXLINE( 981)				int _g = 0;
HXDLIN( 981)				int _g1 = array->get_length();
HXDLIN( 981)				while((_g < _g1)){
HXLINE( 981)					_g = (_g + 1);
HXDLIN( 981)					int i = (_g - 1);
HXLINE( 982)					this->_hx___array[i] = ( (Float)(array->__get(i)) );
            				}
            			}
            		}
            		else {
HXLINE( 986)			if (::hx::IsNull( array )) {
HXLINE( 986)				array = ::Array_obj< Float >::__new();
            			}
HXLINE( 987)			this->_hx___array = array;
            		}
HXLINE( 990)		if ((length > 0)) {
HXLINE( 992)			this->set_length(length);
            		}
HXLINE( 995)		this->fixed = fixed;
            	}

Dynamic FloatVector_obj::__CreateEmpty() { return new FloatVector_obj; }

void *FloatVector_obj::_hx_vtable = 0;

Dynamic FloatVector_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FloatVector_obj > _hx_result = new FloatVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FloatVector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f9ab9ed;
}

static ::openfl::_Vector::IVector_obj _hx_openfl__Vector_FloatVector__hx_openfl__Vector_IVector= {
	( int (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::get_length,
	( int (::hx::Object::*)(int))&::openfl::_Vector::FloatVector_obj::set_length,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::openfl::_Vector::FloatVector_obj::concat,
	( ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::copy,
	( ::Dynamic (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FloatVector_obj::filter,
	(  ::Dynamic (::hx::Object::*)(int))&::openfl::_Vector::FloatVector_obj::get_e55b6ed4,
	( int (::hx::Object::*)( ::Dynamic,::hx::Null< int > ))&::openfl::_Vector::FloatVector_obj::indexOf_6b0e4700,
	( void (::hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FloatVector_obj::insertAt_b5fb9c22,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::iterator,
	( ::String (::hx::Object::*)(::String))&::openfl::_Vector::FloatVector_obj::join,
	( int (::hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FloatVector_obj::lastIndexOf_40b54d71,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::pop,
	( int (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FloatVector_obj::push_1de514fa,
	(  ::Dynamic (::hx::Object::*)(int))&::openfl::_Vector::FloatVector_obj::removeAt_e55b6ed4,
	( ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::reverse,
	(  ::Dynamic (::hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FloatVector_obj::set_eb1eedd7,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::shift,
	( ::Dynamic (::hx::Object::*)(::hx::Null< int > , ::Dynamic))&::openfl::_Vector::FloatVector_obj::slice,
	( void (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FloatVector_obj::sort,
	( ::Dynamic (::hx::Object::*)(int,int))&::openfl::_Vector::FloatVector_obj::splice,
	( ::String (::hx::Object::*)())&::openfl::_Vector::FloatVector_obj::toString,
	( void (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FloatVector_obj::unshift_58413545,
};

void FloatVector_obj::unshift_58413545( ::Dynamic value) {
			unshift(value);
}

 ::Dynamic FloatVector_obj::set_eb1eedd7(int index, ::Dynamic value) {
			return set(index,value);
}

 ::Dynamic FloatVector_obj::removeAt_e55b6ed4(int index) {
			return removeAt(index);
}

int FloatVector_obj::push_1de514fa( ::Dynamic value) {
			return push(value);
}

int FloatVector_obj::lastIndexOf_40b54d71( ::Dynamic x, ::Dynamic from) {
			return lastIndexOf(x,from);
}

void FloatVector_obj::insertAt_b5fb9c22(int index, ::Dynamic element) {
			insertAt(index,element);
}

int FloatVector_obj::indexOf_6b0e4700( ::Dynamic x,::hx::Null< int >  from) {
			return indexOf(x,from);
}

 ::Dynamic FloatVector_obj::get_e55b6ed4(int index) {
			return get(index);
}
void *FloatVector_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x45e7caba: return &_hx_openfl__Vector_FloatVector__hx_openfl__Vector_IVector;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic FloatVector_obj::concat(::Dynamic a){
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1000_concat)
HXDLIN(1000)		if (::hx::IsNull( a )) {
HXLINE(1002)			return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->copy(),null());
            		}
            		else {
HXLINE(1006)			 ::openfl::_Vector::FloatVector other = ( ( ::openfl::_Vector::FloatVector)(a) );
HXLINE(1008)			if ((other->_hx___array->length > 0)) {
HXLINE(1010)				return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->concat(other->_hx___array),null());
            			}
            			else {
HXLINE(1014)				return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->copy(),null());
            			}
            		}
HXLINE(1000)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,concat,return )

::Dynamic FloatVector_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1021_copy)
HXDLIN(1021)		bool _hx_tmp = this->fixed;
HXDLIN(1021)		return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,_hx_tmp,this->_hx___array->copy(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,copy,return )

::Dynamic FloatVector_obj::filter( ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1026_filter)
HXDLIN(1026)		bool _hx_tmp = this->fixed;
HXDLIN(1026)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN(1026)		{
HXDLIN(1026)			int _g1 = 0;
HXDLIN(1026)			::Array< Float > _g2 = this->_hx___array;
HXDLIN(1026)			while((_g1 < _g2->length)){
HXDLIN(1026)				Float v = _g2->__get(_g1);
HXDLIN(1026)				_g1 = (_g1 + 1);
HXDLIN(1026)				if (( (bool)(callback(v)) )) {
HXDLIN(1026)					_g->push(v);
            				}
            			}
            		}
HXDLIN(1026)		return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,_hx_tmp,_g,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,filter,return )

Float FloatVector_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1031_get)
HXDLIN(1031)		return this->_hx___array->__get(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,get,return )

int FloatVector_obj::indexOf(Float x,::hx::Null< int >  __o_from){
            		int from = __o_from.Default(0);
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1035_indexOf)
HXLINE(1036)		{
HXLINE(1036)			int _g = from;
HXDLIN(1036)			int _g1 = this->_hx___array->length;
HXDLIN(1036)			while((_g < _g1)){
HXLINE(1036)				_g = (_g + 1);
HXDLIN(1036)				int i = (_g - 1);
HXLINE(1038)				if ((this->_hx___array->__get(i) == x)) {
HXLINE(1040)					return i;
            				}
            			}
            		}
HXLINE(1044)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,indexOf,return )

void FloatVector_obj::insertAt(int index,Float element){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1049_insertAt)
HXDLIN(1049)		bool _hx_tmp;
HXDLIN(1049)		if (this->fixed) {
HXDLIN(1049)			_hx_tmp = (index < this->_hx___array->length);
            		}
            		else {
HXDLIN(1049)			_hx_tmp = true;
            		}
HXDLIN(1049)		if (_hx_tmp) {
HXLINE(1051)			this->_hx___array->insert(index,element);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,insertAt,(void))

 ::Dynamic FloatVector_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1057_iterator)
HXDLIN(1057)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->_hx___array);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,iterator,return )

::String FloatVector_obj::join(::String __o_sep){
            		::String sep = __o_sep;
            		if (::hx::IsNull(__o_sep)) sep = HX_(",",2c,00,00,00);
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1062_join)
HXDLIN(1062)		return this->_hx___array->join(sep);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,join,return )

int FloatVector_obj::lastIndexOf(Float x, ::Dynamic from){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1066_lastIndexOf)
HXLINE(1067)		 ::Dynamic i;
HXDLIN(1067)		bool i1;
HXDLIN(1067)		if (::hx::IsNotNull( from )) {
HXLINE(1067)			i1 = ::hx::IsGreaterEq( from,this->_hx___array->length );
            		}
            		else {
HXLINE(1067)			i1 = true;
            		}
HXDLIN(1067)		if (i1) {
HXLINE(1067)			i = (this->_hx___array->length - 1);
            		}
            		else {
HXLINE(1067)			i = from;
            		}
HXLINE(1069)		while(::hx::IsGreaterEq( i,0 )){
HXLINE(1071)			if ((this->_hx___array->__get(( (int)(i) )) == x)) {
HXLINE(1071)				return ( (int)(i) );
            			}
HXLINE(1072)			i = (( (int)(i) ) - 1);
            		}
HXLINE(1075)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,lastIndexOf,return )

 ::Dynamic FloatVector_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1080_pop)
HXDLIN(1080)		if (!(this->fixed)) {
HXLINE(1082)			return this->_hx___array->pop();
            		}
            		else {
HXLINE(1086)			return null();
            		}
HXLINE(1080)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,pop,return )

int FloatVector_obj::push(Float x){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1092_push)
HXDLIN(1092)		if (!(this->fixed)) {
HXLINE(1094)			return this->_hx___array->push(x);
            		}
            		else {
HXLINE(1098)			return this->_hx___array->length;
            		}
HXLINE(1092)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,push,return )

Float FloatVector_obj::removeAt(int index){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1103_removeAt)
HXLINE(1104)		bool _hx_tmp;
HXDLIN(1104)		if (this->fixed) {
HXLINE(1104)			_hx_tmp = (index < this->_hx___array->length);
            		}
            		else {
HXLINE(1104)			_hx_tmp = true;
            		}
HXDLIN(1104)		if (_hx_tmp) {
HXLINE(1106)			return this->_hx___array->splice(index,1)->__get(0);
            		}
HXLINE(1109)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,removeAt,return )

::Dynamic FloatVector_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1113_reverse)
HXLINE(1114)		this->_hx___array->reverse();
HXLINE(1115)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,reverse,return )

Float FloatVector_obj::set(int index,Float value){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1120_set)
HXDLIN(1120)		bool _hx_tmp;
HXDLIN(1120)		if (this->fixed) {
HXDLIN(1120)			_hx_tmp = (index < this->_hx___array->length);
            		}
            		else {
HXDLIN(1120)			_hx_tmp = true;
            		}
HXDLIN(1120)		if (_hx_tmp) {
HXLINE(1122)			return (this->_hx___array[index] = value);
            		}
            		else {
HXLINE(1126)			return value;
            		}
HXLINE(1120)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,set,return )

 ::Dynamic FloatVector_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1132_shift)
HXDLIN(1132)		if (!(this->fixed)) {
HXLINE(1134)			return this->_hx___array->shift();
            		}
            		else {
HXLINE(1138)			return null();
            		}
HXLINE(1132)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,shift,return )

::Dynamic FloatVector_obj::slice(::hx::Null< int >  __o_startIndex, ::Dynamic endIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1143_slice)
HXLINE(1144)		if (::hx::IsNull( endIndex )) {
HXLINE(1144)			endIndex = 16777215;
            		}
HXLINE(1145)		return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->slice(startIndex,endIndex),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,slice,return )

void FloatVector_obj::sort( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1150_sort)
HXDLIN(1150)		this->_hx___array->sort(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,sort,(void))

::Dynamic FloatVector_obj::splice(int pos,int len){
            	HX_GC_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1155_splice)
HXDLIN(1155)		return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->splice(pos,len),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FloatVector_obj,splice,return )

 ::Dynamic FloatVector_obj::toJSON(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1161_toJSON)
HXDLIN(1161)		return this->_hx___array;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,toJSON,return )

::String FloatVector_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1166_toString)
HXDLIN(1166)		if (::hx::IsNotNull( this->_hx___array )) {
HXDLIN(1166)			return this->_hx___array->toString();
            		}
            		else {
HXDLIN(1166)			return null();
            		}
HXDLIN(1166)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,toString,return )

void FloatVector_obj::unshift(Float x){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1171_unshift)
HXDLIN(1171)		if (!(this->fixed)) {
HXLINE(1173)			this->_hx___array->unshift(x);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,unshift,(void))

int FloatVector_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1180_get_length)
HXDLIN(1180)		return this->_hx___array->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FloatVector_obj,get_length,return )

int FloatVector_obj::set_length(int value){
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_1184_set_length)
HXLINE(1185)		bool _hx_tmp;
HXDLIN(1185)		if ((value != this->_hx___array->length)) {
HXLINE(1185)			_hx_tmp = !(this->fixed);
            		}
            		else {
HXLINE(1185)			_hx_tmp = false;
            		}
HXDLIN(1185)		if (_hx_tmp) {
HXLINE(1188)			if ((value > this->_hx___array->length)) {
HXLINE(1190)				_hx_array_set_size_exact(this->_hx___array,value);
            			}
            			else {
HXLINE(1194)				this->_hx___array->removeRange(value,this->_hx___array->length);
            			}
            		}
HXLINE(1217)		return this->_hx___array->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FloatVector_obj,set_length,return )


::hx::ObjectPtr< FloatVector_obj > FloatVector_obj::__new(::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array,::hx::Null< bool >  __o_forceCopy) {
	::hx::ObjectPtr< FloatVector_obj > __this = new FloatVector_obj();
	__this->__construct(__o_length,__o_fixed,array,__o_forceCopy);
	return __this;
}

::hx::ObjectPtr< FloatVector_obj > FloatVector_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array,::hx::Null< bool >  __o_forceCopy) {
	FloatVector_obj *__this = (FloatVector_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FloatVector_obj), true, "openfl._Vector.FloatVector"));
	*(void **)__this = FloatVector_obj::_hx_vtable;
	__this->__construct(__o_length,__o_fixed,array,__o_forceCopy);
	return __this;
}

FloatVector_obj::FloatVector_obj()
{
}

void FloatVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FloatVector);
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_MEMBER_NAME(_hx___tempIndex,"__tempIndex");
	HX_MARK_END_CLASS();
}

void FloatVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
	HX_VISIT_MEMBER_NAME(_hx___tempIndex,"__tempIndex");
}

::hx::Val FloatVector_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return ::hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"join") ) { return ::hx::Val( join_dyn() ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"sort") ) { return ::hx::Val( sort_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return ::hx::Val( fixed ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return ::hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"slice") ) { return ::hx::Val( slice_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"concat") ) { return ::hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return ::hx::Val( filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return ::hx::Val( splice_dyn() ); }
		if (HX_FIELD_EQ(inName,"toJSON") ) { return ::hx::Val( toJSON_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return ::hx::Val( _hx___array ); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return ::hx::Val( indexOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return ::hx::Val( unshift_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { return ::hx::Val( insertAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return ::hx::Val( removeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return ::hx::Val( set_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tempIndex") ) { return ::hx::Val( _hx___tempIndex ); }
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { return ::hx::Val( lastIndexOf_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FloatVector_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_length(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tempIndex") ) { _hx___tempIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FloatVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fixed",74,f9,a1,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("__array",79,c6,ed,8f));
	outFields->push(HX_("__tempIndex",3e,e8,54,22));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FloatVector_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FloatVector_obj,fixed),HX_("fixed",74,f9,a1,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(FloatVector_obj,_hx___array),HX_("__array",79,c6,ed,8f)},
	{::hx::fsInt,(int)offsetof(FloatVector_obj,_hx___tempIndex),HX_("__tempIndex",3e,e8,54,22)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FloatVector_obj_sStaticStorageInfo = 0;
#endif

static ::String FloatVector_obj_sMemberFields[] = {
	HX_("fixed",74,f9,a1,00),
	HX_("__array",79,c6,ed,8f),
	HX_("__tempIndex",3e,e8,54,22),
	HX_("concat",14,09,d0,c7),
	HX_("copy",b5,bb,c4,41),
	HX_("filter",b8,1f,35,85),
	HX_("get",96,80,4e,00),
	HX_("indexOf",c9,48,bf,e0),
	HX_("insertAt",8c,7c,1f,c2),
	HX_("iterator",ee,49,9a,93),
	HX_("join",ea,33,65,46),
	HX_("lastIndexOf",13,fd,6a,95),
	HX_("pop",91,5d,55,00),
	HX_("push",da,11,61,4a),
	HX_("removeAt",57,6e,1b,ad),
	HX_("reverse",22,39,fc,1a),
	HX_("set",a2,9b,57,00),
	HX_("shift",82,ec,22,7c),
	HX_("slice",52,c4,c7,7e),
	HX_("sort",5e,27,58,4c),
	HX_("splice",7c,85,9e,bf),
	HX_("toJSON",23,49,09,7c),
	HX_("toString",ac,d0,6e,38),
	HX_("unshift",89,e3,b3,78),
	HX_("get_length",af,04,8f,8f),
	HX_("set_length",23,a3,0c,93),
	::String(null()) };

::hx::Class FloatVector_obj::__mClass;

void FloatVector_obj::__register()
{
	FloatVector_obj _hx_dummy;
	FloatVector_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl._Vector.FloatVector",95,63,f0,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FloatVector_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FloatVector_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FloatVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FloatVector_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FloatVector_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_055b1e986ae1a23a_967_boot)
HXDLIN( 967)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_",5f,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("toJSON",23,49,09,7c), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _Vector
