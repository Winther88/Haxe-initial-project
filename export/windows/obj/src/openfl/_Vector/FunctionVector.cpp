// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_openfl__Vector_FunctionVector
#include <openfl/_Vector/FunctionVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1236_new,"openfl._Vector.FunctionVector","new",0x9bdddf17,"openfl._Vector.FunctionVector.new","openfl/Vector.hx",1236,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1250_concat,"openfl._Vector.FunctionVector","concat",0x3878c6bd,"openfl._Vector.FunctionVector.concat","openfl/Vector.hx",1250,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1271_copy,"openfl._Vector.FunctionVector","copy",0xbf078d1e,"openfl._Vector.FunctionVector.copy","openfl/Vector.hx",1271,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1276_filter,"openfl._Vector.FunctionVector","filter",0xf5dddd61,"openfl._Vector.FunctionVector.filter","openfl/Vector.hx",1276,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1281_get,"openfl._Vector.FunctionVector","get",0x9bd88f4d,"openfl._Vector.FunctionVector.get","openfl/Vector.hx",1281,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1292_indexOf,"openfl._Vector.FunctionVector","indexOf",0x03bc7f00,"openfl._Vector.FunctionVector.indexOf","openfl/Vector.hx",1292,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1306_insertAt,"openfl._Vector.FunctionVector","insertAt",0x3cb1b675,"openfl._Vector.FunctionVector.insertAt","openfl/Vector.hx",1306,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1314_iterator,"openfl._Vector.FunctionVector","iterator",0x0e2c83d7,"openfl._Vector.FunctionVector.iterator","openfl/Vector.hx",1314,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1319_join,"openfl._Vector.FunctionVector","join",0xc3a80553,"openfl._Vector.FunctionVector.join","openfl/Vector.hx",1319,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1323_lastIndexOf,"openfl._Vector.FunctionVector","lastIndexOf",0xc9451aca,"openfl._Vector.FunctionVector.lastIndexOf","openfl/Vector.hx",1323,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1337_pop,"openfl._Vector.FunctionVector","pop",0x9bdf6c48,"openfl._Vector.FunctionVector.pop","openfl/Vector.hx",1337,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1349_push,"openfl._Vector.FunctionVector","push",0xc7a3e343,"openfl._Vector.FunctionVector.push","openfl/Vector.hx",1349,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1360_removeAt,"openfl._Vector.FunctionVector","removeAt",0x27ada840,"openfl._Vector.FunctionVector.removeAt","openfl/Vector.hx",1360,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1370_reverse,"openfl._Vector.FunctionVector","reverse",0x3df96f59,"openfl._Vector.FunctionVector.reverse","openfl/Vector.hx",1370,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1377_set,"openfl._Vector.FunctionVector","set",0x9be1aa59,"openfl._Vector.FunctionVector.set","openfl/Vector.hx",1377,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1389_shift,"openfl._Vector.FunctionVector","shift",0x995756f9,"openfl._Vector.FunctionVector.shift","openfl/Vector.hx",1389,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1400_slice,"openfl._Vector.FunctionVector","slice",0x9bfc2ec9,"openfl._Vector.FunctionVector.slice","openfl/Vector.hx",1400,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1407_sort,"openfl._Vector.FunctionVector","sort",0xc99af8c7,"openfl._Vector.FunctionVector.sort","openfl/Vector.hx",1407,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1412_splice,"openfl._Vector.FunctionVector","splice",0x30474325,"openfl._Vector.FunctionVector.splice","openfl/Vector.hx",1412,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1418_toJSON,"openfl._Vector.FunctionVector","toJSON",0xecb206cc,"openfl._Vector.FunctionVector.toJSON","openfl/Vector.hx",1418,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1423_toString,"openfl._Vector.FunctionVector","toString",0xb3010a95,"openfl._Vector.FunctionVector.toString","openfl/Vector.hx",1423,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1428_unshift,"openfl._Vector.FunctionVector","unshift",0x9bb119c0,"openfl._Vector.FunctionVector.unshift","openfl/Vector.hx",1428,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1437_get_length,"openfl._Vector.FunctionVector","get_length",0x7e924ad8,"openfl._Vector.FunctionVector.get_length","openfl/Vector.hx",1437,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1441_set_length,"openfl._Vector.FunctionVector","set_length",0x820fe94c,"openfl._Vector.FunctionVector.set_length","openfl/Vector.hx",1441,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_f37013fa3e7b7067_1227_boot,"openfl._Vector.FunctionVector","boot",0xbe5e559b,"openfl._Vector.FunctionVector.boot","openfl/Vector.hx",1227,0x4a01873c)
namespace openfl{
namespace _Vector{

void FunctionVector_obj::__construct(::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array){
            		int length = __o_length.Default(0);
            		bool fixed = __o_fixed.Default(false);
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1236_new)
HXLINE(1237)		if (::hx::IsNull( array )) {
HXLINE(1237)			array = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE(1238)		this->_hx___array = array;
HXLINE(1240)		if ((length > 0)) {
HXLINE(1242)			this->set_length(length);
            		}
HXLINE(1245)		this->fixed = fixed;
            	}

Dynamic FunctionVector_obj::__CreateEmpty() { return new FunctionVector_obj; }

void *FunctionVector_obj::_hx_vtable = 0;

Dynamic FunctionVector_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunctionVector_obj > _hx_result = new FunctionVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FunctionVector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x088f384d;
}

static ::openfl::_Vector::IVector_obj _hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector= {
	( int (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::get_length,
	( int (::hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::set_length,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::openfl::_Vector::FunctionVector_obj::concat,
	( ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::copy,
	( ::Dynamic (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::filter,
	(  ::Dynamic (::hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::get,
	( int (::hx::Object::*)( ::Dynamic,::hx::Null< int > ))&::openfl::_Vector::FunctionVector_obj::indexOf,
	( void (::hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::insertAt,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::iterator,
	( ::String (::hx::Object::*)(::String))&::openfl::_Vector::FunctionVector_obj::join,
	( int (::hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::lastIndexOf,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::pop,
	( int (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::push,
	(  ::Dynamic (::hx::Object::*)(int))&::openfl::_Vector::FunctionVector_obj::removeAt,
	( ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::reverse,
	(  ::Dynamic (::hx::Object::*)(int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::set,
	(  ::Dynamic (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::shift,
	( ::Dynamic (::hx::Object::*)(::hx::Null< int > , ::Dynamic))&::openfl::_Vector::FunctionVector_obj::slice,
	( void (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::sort,
	( ::Dynamic (::hx::Object::*)(int,int))&::openfl::_Vector::FunctionVector_obj::splice,
	( ::String (::hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::toString,
	( void (::hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::unshift,
};

void *FunctionVector_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x45e7caba: return &_hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic FunctionVector_obj::concat(::Dynamic a){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1250_concat)
HXDLIN(1250)		if (::hx::IsNull( a )) {
HXLINE(1252)			return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->copy());
            		}
            		else {
HXLINE(1256)			 ::openfl::_Vector::FunctionVector other = ( ( ::openfl::_Vector::FunctionVector)(a) );
HXLINE(1258)			if ((other->_hx___array->get_length() > 0)) {
HXLINE(1260)				return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->concat(other->_hx___array));
            			}
            			else {
HXLINE(1264)				return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->copy());
            			}
            		}
HXLINE(1250)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,concat,return )

::Dynamic FunctionVector_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1271_copy)
HXDLIN(1271)		bool _hx_tmp = this->fixed;
HXDLIN(1271)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,_hx_tmp,this->_hx___array->copy());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,copy,return )

::Dynamic FunctionVector_obj::filter( ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1276_filter)
HXDLIN(1276)		bool _hx_tmp = this->fixed;
HXDLIN(1276)		::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(1276)		{
HXDLIN(1276)			int _g1 = 0;
HXDLIN(1276)			::cpp::VirtualArray _g2 = this->_hx___array;
HXDLIN(1276)			while((_g1 < _g2->get_length())){
HXDLIN(1276)				 ::Dynamic v = _g2->__get(_g1);
HXDLIN(1276)				_g1 = (_g1 + 1);
HXDLIN(1276)				if (( (bool)(callback(v)) )) {
HXDLIN(1276)					_g->push(v);
            				}
            			}
            		}
HXDLIN(1276)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,_hx_tmp,_g);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,filter,return )

 ::Dynamic FunctionVector_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1281_get)
HXDLIN(1281)		if ((index >= this->_hx___array->get_length())) {
HXLINE(1283)			return null();
            		}
            		else {
HXLINE(1287)			return this->_hx___array->__get(index);
            		}
HXLINE(1281)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,get,return )

int FunctionVector_obj::indexOf( ::Dynamic x,::hx::Null< int >  __o_from){
            		int from = __o_from.Default(0);
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1292_indexOf)
HXLINE(1293)		{
HXLINE(1293)			int _g = from;
HXDLIN(1293)			int _g1 = this->_hx___array->get_length();
HXDLIN(1293)			while((_g < _g1)){
HXLINE(1293)				_g = (_g + 1);
HXDLIN(1293)				int i = (_g - 1);
HXLINE(1295)				if (::Reflect_obj::compareMethods(this->_hx___array->__get(i),x)) {
HXLINE(1297)					return i;
            				}
            			}
            		}
HXLINE(1301)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,indexOf,return )

void FunctionVector_obj::insertAt(int index, ::Dynamic element){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1306_insertAt)
HXDLIN(1306)		bool _hx_tmp;
HXDLIN(1306)		if (this->fixed) {
HXDLIN(1306)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXDLIN(1306)			_hx_tmp = true;
            		}
HXDLIN(1306)		if (_hx_tmp) {
HXLINE(1308)			this->_hx___array->insert(index,element);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,insertAt,(void))

 ::Dynamic FunctionVector_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1314_iterator)
HXDLIN(1314)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,this->_hx___array);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,iterator,return )

::String FunctionVector_obj::join(::String __o_sep){
            		::String sep = __o_sep;
            		if (::hx::IsNull(__o_sep)) sep = HX_(",",2c,00,00,00);
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1319_join)
HXDLIN(1319)		return this->_hx___array->join(sep);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,join,return )

int FunctionVector_obj::lastIndexOf( ::Dynamic x, ::Dynamic from){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1323_lastIndexOf)
HXLINE(1324)		 ::Dynamic i;
HXDLIN(1324)		bool i1;
HXDLIN(1324)		if (::hx::IsNotNull( from )) {
HXLINE(1324)			i1 = ::hx::IsGreaterEq( from,this->_hx___array->get_length() );
            		}
            		else {
HXLINE(1324)			i1 = true;
            		}
HXDLIN(1324)		if (i1) {
HXLINE(1324)			i = (this->_hx___array->get_length() - 1);
            		}
            		else {
HXLINE(1324)			i = from;
            		}
HXLINE(1326)		while(::hx::IsGreaterEq( i,0 )){
HXLINE(1328)			if (::Reflect_obj::compareMethods(this->_hx___array->__get(( (int)(i) )),x)) {
HXLINE(1328)				return ( (int)(i) );
            			}
HXLINE(1329)			i = (( (int)(i) ) - 1);
            		}
HXLINE(1332)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,lastIndexOf,return )

 ::Dynamic FunctionVector_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1337_pop)
HXDLIN(1337)		if (!(this->fixed)) {
HXLINE(1339)			return this->_hx___array->pop();
            		}
            		else {
HXLINE(1343)			return null();
            		}
HXLINE(1337)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,pop,return )

int FunctionVector_obj::push( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1349_push)
HXDLIN(1349)		if (!(this->fixed)) {
HXLINE(1351)			return this->_hx___array->push(x);
            		}
            		else {
HXLINE(1355)			return this->_hx___array->get_length();
            		}
HXLINE(1349)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,push,return )

 ::Dynamic FunctionVector_obj::removeAt(int index){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1360_removeAt)
HXLINE(1361)		bool _hx_tmp;
HXDLIN(1361)		if (this->fixed) {
HXLINE(1361)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXLINE(1361)			_hx_tmp = true;
            		}
HXDLIN(1361)		if (_hx_tmp) {
HXLINE(1363)			return this->_hx___array->splice(index,1)->__get(0);
            		}
HXLINE(1366)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,removeAt,return )

::Dynamic FunctionVector_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1370_reverse)
HXLINE(1371)		this->_hx___array->reverse();
HXLINE(1372)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,reverse,return )

 ::Dynamic FunctionVector_obj::set(int index, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1377_set)
HXDLIN(1377)		bool _hx_tmp;
HXDLIN(1377)		if (this->fixed) {
HXDLIN(1377)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXDLIN(1377)			_hx_tmp = true;
            		}
HXDLIN(1377)		if (_hx_tmp) {
HXLINE(1379)			return (this->_hx___array->set(index,value));
            		}
            		else {
HXLINE(1383)			return value;
            		}
HXLINE(1377)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,set,return )

 ::Dynamic FunctionVector_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1389_shift)
HXDLIN(1389)		if (!(this->fixed)) {
HXLINE(1391)			return this->_hx___array->shift();
            		}
            		else {
HXLINE(1395)			return null();
            		}
HXLINE(1389)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,shift,return )

::Dynamic FunctionVector_obj::slice(::hx::Null< int >  __o_startIndex, ::Dynamic endIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1400_slice)
HXLINE(1401)		if (::hx::IsNull( endIndex )) {
HXLINE(1401)			endIndex = 16777215;
            		}
HXLINE(1402)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->slice(startIndex,endIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,slice,return )

void FunctionVector_obj::sort( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1407_sort)
HXDLIN(1407)		this->_hx___array->sort(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,sort,(void))

::Dynamic FunctionVector_obj::splice(int pos,int len){
            	HX_GC_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1412_splice)
HXDLIN(1412)		return  ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,0,false,this->_hx___array->splice(pos,len));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,splice,return )

 ::Dynamic FunctionVector_obj::toJSON(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1418_toJSON)
HXDLIN(1418)		return this->_hx___array;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,toJSON,return )

::String FunctionVector_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1423_toString)
HXDLIN(1423)		if (::hx::IsNotNull( this->_hx___array )) {
HXDLIN(1423)			return this->_hx___array->toString();
            		}
            		else {
HXDLIN(1423)			return null();
            		}
HXDLIN(1423)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,toString,return )

void FunctionVector_obj::unshift( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1428_unshift)
HXDLIN(1428)		if (!(this->fixed)) {
HXLINE(1430)			this->_hx___array->unshift(x);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,unshift,(void))

int FunctionVector_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1437_get_length)
HXDLIN(1437)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,get_length,return )

int FunctionVector_obj::set_length(int value){
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1441_set_length)
HXLINE(1442)		if (!(this->fixed)) {
HXLINE(1445)			_hx_array_set_size_exact(this->_hx___array,value);
            		}
HXLINE(1467)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,set_length,return )


::hx::ObjectPtr< FunctionVector_obj > FunctionVector_obj::__new(::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array) {
	::hx::ObjectPtr< FunctionVector_obj > __this = new FunctionVector_obj();
	__this->__construct(__o_length,__o_fixed,array);
	return __this;
}

::hx::ObjectPtr< FunctionVector_obj > FunctionVector_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_length,::hx::Null< bool >  __o_fixed,::cpp::VirtualArray array) {
	FunctionVector_obj *__this = (FunctionVector_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunctionVector_obj), true, "openfl._Vector.FunctionVector"));
	*(void **)__this = FunctionVector_obj::_hx_vtable;
	__this->__construct(__o_length,__o_fixed,array);
	return __this;
}

FunctionVector_obj::FunctionVector_obj()
{
}

void FunctionVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionVector);
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_MEMBER_NAME(_hx___tempIndex,"__tempIndex");
	HX_MARK_END_CLASS();
}

void FunctionVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
	HX_VISIT_MEMBER_NAME(_hx___tempIndex,"__tempIndex");
}

::hx::Val FunctionVector_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return ::hx::Val( pop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"join") ) { return ::hx::Val( join_dyn() ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"sort") ) { return ::hx::Val( sort_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return ::hx::Val( fixed ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return ::hx::Val( shift_dyn() ); }
		if (HX_FIELD_EQ(inName,"slice") ) { return ::hx::Val( slice_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"concat") ) { return ::hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return ::hx::Val( filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"splice") ) { return ::hx::Val( splice_dyn() ); }
		if (HX_FIELD_EQ(inName,"toJSON") ) { return ::hx::Val( toJSON_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return ::hx::Val( _hx___array ); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return ::hx::Val( indexOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return ::hx::Val( unshift_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { return ::hx::Val( insertAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return ::hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return ::hx::Val( removeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return ::hx::Val( set_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tempIndex") ) { return ::hx::Val( _hx___tempIndex ); }
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { return ::hx::Val( lastIndexOf_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FunctionVector_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_length(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__tempIndex") ) { _hx___tempIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fixed",74,f9,a1,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("__array",79,c6,ed,8f));
	outFields->push(HX_("__tempIndex",3e,e8,54,22));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunctionVector_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FunctionVector_obj,fixed),HX_("fixed",74,f9,a1,00)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(FunctionVector_obj,_hx___array),HX_("__array",79,c6,ed,8f)},
	{::hx::fsInt,(int)offsetof(FunctionVector_obj,_hx___tempIndex),HX_("__tempIndex",3e,e8,54,22)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FunctionVector_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionVector_obj_sMemberFields[] = {
	HX_("fixed",74,f9,a1,00),
	HX_("__array",79,c6,ed,8f),
	HX_("__tempIndex",3e,e8,54,22),
	HX_("concat",14,09,d0,c7),
	HX_("copy",b5,bb,c4,41),
	HX_("filter",b8,1f,35,85),
	HX_("get",96,80,4e,00),
	HX_("indexOf",c9,48,bf,e0),
	HX_("insertAt",8c,7c,1f,c2),
	HX_("iterator",ee,49,9a,93),
	HX_("join",ea,33,65,46),
	HX_("lastIndexOf",13,fd,6a,95),
	HX_("pop",91,5d,55,00),
	HX_("push",da,11,61,4a),
	HX_("removeAt",57,6e,1b,ad),
	HX_("reverse",22,39,fc,1a),
	HX_("set",a2,9b,57,00),
	HX_("shift",82,ec,22,7c),
	HX_("slice",52,c4,c7,7e),
	HX_("sort",5e,27,58,4c),
	HX_("splice",7c,85,9e,bf),
	HX_("toJSON",23,49,09,7c),
	HX_("toString",ac,d0,6e,38),
	HX_("unshift",89,e3,b3,78),
	HX_("get_length",af,04,8f,8f),
	HX_("set_length",23,a3,0c,93),
	::String(null()) };

::hx::Class FunctionVector_obj::__mClass;

void FunctionVector_obj::__register()
{
	FunctionVector_obj _hx_dummy;
	FunctionVector_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl._Vector.FunctionVector",a5,07,75,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunctionVector_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunctionVector_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionVector_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunctionVector_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f37013fa3e7b7067_1227_boot)
HXDLIN(1227)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("toJSON",23,49,09,7c), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _Vector
