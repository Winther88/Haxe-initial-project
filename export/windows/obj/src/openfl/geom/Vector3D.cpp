// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_272ec68939e03fc6_147_new,"openfl.geom.Vector3D","new",0x722c67da,"openfl.geom.Vector3D.new","openfl/geom/Vector3D.hx",147,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_174_add,"openfl.geom.Vector3D","add",0x7222899b,"openfl.geom.Vector3D.add","openfl/geom/Vector3D.hx",174,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_222_clone,"openfl.geom.Vector3D","clone",0x532bfd57,"openfl.geom.Vector3D.clone","openfl/geom/Vector3D.hx",222,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_232_copyFrom,"openfl.geom.Vector3D","copyFrom",0x528f1a05,"openfl.geom.Vector3D.copyFrom","openfl/geom/Vector3D.hx",232,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_256_crossProduct,"openfl.geom.Vector3D","crossProduct",0x872350d5,"openfl.geom.Vector3D.crossProduct","openfl/geom/Vector3D.hx",256,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_269_decrementBy,"openfl.geom.Vector3D","decrementBy",0xa34dbc44,"openfl.geom.Vector3D.decrementBy","openfl/geom/Vector3D.hx",269,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_315_dotProduct,"openfl.geom.Vector3D","dotProduct",0x3a72d36c,"openfl.geom.Vector3D.dotProduct","openfl/geom/Vector3D.hx",315,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_333_equals,"openfl.geom.Vector3D","equals",0x24f6bf05,"openfl.geom.Vector3D.equals","openfl/geom/Vector3D.hx",333,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_345_incrementBy,"openfl.geom.Vector3D","incrementBy",0xea440b60,"openfl.geom.Vector3D.incrementBy","openfl/geom/Vector3D.hx",345,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_373_nearEquals,"openfl.geom.Vector3D","nearEquals",0xfaf41d0d,"openfl.geom.Vector3D.nearEquals","openfl/geom/Vector3D.hx",373,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_385_negate,"openfl.geom.Vector3D","negate",0xcc1d1288,"openfl.geom.Vector3D.negate","openfl/geom/Vector3D.hx",385,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_399_normalize,"openfl.geom.Vector3D","normalize",0x09bfa687,"openfl.geom.Vector3D.normalize","openfl/geom/Vector3D.hx",399,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_423_project,"openfl.geom.Vector3D","project",0xf43def53,"openfl.geom.Vector3D.project","openfl/geom/Vector3D.hx",423,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_439_scaleBy,"openfl.geom.Vector3D","scaleBy",0x635a1b7b,"openfl.geom.Vector3D.scaleBy","openfl/geom/Vector3D.hx",439,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_453_setTo,"openfl.geom.Vector3D","setTo",0x84f87bb7,"openfl.geom.Vector3D.setTo","openfl/geom/Vector3D.hx",453,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_471_subtract,"openfl.geom.Vector3D","subtract",0x823f835a,"openfl.geom.Vector3D.subtract","openfl/geom/Vector3D.hx",471,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_482_toString,"openfl.geom.Vector3D","toString",0xc29cdef2,"openfl.geom.Vector3D.toString","openfl/geom/Vector3D.hx",482,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_488_get_length,"openfl.geom.Vector3D","get_length",0x8c11b075,"openfl.geom.Vector3D.get_length","openfl/geom/Vector3D.hx",488,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_493_get_lengthSquared,"openfl.geom.Vector3D","get_lengthSquared",0xa2b22932,"openfl.geom.Vector3D.get_lengthSquared","openfl/geom/Vector3D.hx",493,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_197_angleBetween,"openfl.geom.Vector3D","angleBetween",0x8d2e8f7b,"openfl.geom.Vector3D.angleBetween","openfl/geom/Vector3D.hx",197,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_285_distance,"openfl.geom.Vector3D","distance",0xf627a17b,"openfl.geom.Vector3D.distance","openfl/geom/Vector3D.hx",285,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_498_get_X_AXIS,"openfl.geom.Vector3D","get_X_AXIS",0xfabcdcb7,"openfl.geom.Vector3D.get_X_AXIS","openfl/geom/Vector3D.hx",498,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_503_get_Y_AXIS,"openfl.geom.Vector3D","get_Y_AXIS",0x61183916,"openfl.geom.Vector3D.get_Y_AXIS","openfl/geom/Vector3D.hx",503,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_508_get_Z_AXIS,"openfl.geom.Vector3D","get_Z_AXIS",0xc7739575,"openfl.geom.Vector3D.get_Z_AXIS","openfl/geom/Vector3D.hx",508,0xc7821076)
namespace openfl{
namespace geom{

void Vector3D_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z,::hx::Null< Float >  __o_w){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float z = __o_z.Default(0);
            		Float w = __o_w.Default(0);
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_147_new)
HXLINE( 148)		this->w = w;
HXLINE( 149)		this->x = x;
HXLINE( 150)		this->y = y;
HXLINE( 151)		this->z = z;
            	}

Dynamic Vector3D_obj::__CreateEmpty() { return new Vector3D_obj; }

void *Vector3D_obj::_hx_vtable = 0;

Dynamic Vector3D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Vector3D_obj > _hx_result = new Vector3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vector3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d8b0de0;
}

 ::openfl::geom::Vector3D Vector3D_obj::add( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_174_add)
HXDLIN( 174)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(this->x + a->x),(this->y + a->y),(this->z + a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,add,return )

 ::openfl::geom::Vector3D Vector3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_222_clone)
HXDLIN( 222)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,clone,return )

void Vector3D_obj::copyFrom( ::openfl::geom::Vector3D sourceVector3D){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_232_copyFrom)
HXLINE( 233)		this->x = sourceVector3D->x;
HXLINE( 234)		this->y = sourceVector3D->y;
HXLINE( 235)		this->z = sourceVector3D->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,copyFrom,(void))

 ::openfl::geom::Vector3D Vector3D_obj::crossProduct( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_256_crossProduct)
HXDLIN( 256)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,((this->y * a->z) - (this->z * a->y)),((this->z * a->x) - (this->x * a->z)),((this->x * a->y) - (this->y * a->x)),1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,crossProduct,return )

void Vector3D_obj::decrementBy( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_269_decrementBy)
HXLINE( 270)		 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 270)		_hx_tmp->x = (_hx_tmp->x - a->x);
HXLINE( 271)		 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 271)		_hx_tmp1->y = (_hx_tmp1->y - a->y);
HXLINE( 272)		 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 272)		_hx_tmp2->z = (_hx_tmp2->z - a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,decrementBy,(void))

Float Vector3D_obj::dotProduct( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_315_dotProduct)
HXDLIN( 315)		return (((this->x * a->x) + (this->y * a->y)) + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,dotProduct,return )

bool Vector3D_obj::equals( ::openfl::geom::Vector3D toCompare,::hx::Null< bool >  __o_allFour){
            		bool allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_333_equals)
HXDLIN( 333)		bool _hx_tmp;
HXDLIN( 333)		bool _hx_tmp1;
HXDLIN( 333)		if ((this->x == toCompare->x)) {
HXDLIN( 333)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN( 333)			_hx_tmp1 = false;
            		}
HXDLIN( 333)		if (_hx_tmp1) {
HXDLIN( 333)			_hx_tmp = (this->z == toCompare->z);
            		}
            		else {
HXDLIN( 333)			_hx_tmp = false;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXDLIN( 333)			if (allFour) {
HXDLIN( 333)				return (this->w == toCompare->w);
            			}
            			else {
HXDLIN( 333)				return true;
            			}
            		}
            		else {
HXDLIN( 333)			return false;
            		}
HXDLIN( 333)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,equals,return )

void Vector3D_obj::incrementBy( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_345_incrementBy)
HXLINE( 346)		 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 346)		_hx_tmp->x = (_hx_tmp->x + a->x);
HXLINE( 347)		 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 347)		_hx_tmp1->y = (_hx_tmp1->y + a->y);
HXLINE( 348)		 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 348)		_hx_tmp2->z = (_hx_tmp2->z + a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,incrementBy,(void))

bool Vector3D_obj::nearEquals( ::openfl::geom::Vector3D toCompare,Float tolerance, ::Dynamic __o_allFour){
            		 ::Dynamic allFour = __o_allFour;
            		if (::hx::IsNull(__o_allFour)) allFour = false;
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_373_nearEquals)
HXDLIN( 373)		bool _hx_tmp;
HXDLIN( 373)		bool _hx_tmp1;
HXDLIN( 373)		if ((::Math_obj::abs((this->x - toCompare->x)) < tolerance)) {
HXDLIN( 373)			_hx_tmp1 = (::Math_obj::abs((this->y - toCompare->y)) < tolerance);
            		}
            		else {
HXDLIN( 373)			_hx_tmp1 = false;
            		}
HXDLIN( 373)		if (_hx_tmp1) {
HXDLIN( 373)			_hx_tmp = (::Math_obj::abs((this->z - toCompare->z)) < tolerance);
            		}
            		else {
HXDLIN( 373)			_hx_tmp = false;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 376)			if (!(!(( (bool)(allFour) )))) {
HXLINE( 376)				return (::Math_obj::abs((this->w - toCompare->w)) < tolerance);
            			}
            			else {
HXLINE( 376)				return true;
            			}
            		}
            		else {
HXDLIN( 373)			return false;
            		}
HXDLIN( 373)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,nearEquals,return )

void Vector3D_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_385_negate)
HXLINE( 386)		 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 386)		_hx_tmp->x = (_hx_tmp->x * ( (Float)(-1) ));
HXLINE( 387)		 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 387)		_hx_tmp1->y = (_hx_tmp1->y * ( (Float)(-1) ));
HXLINE( 388)		 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 388)		_hx_tmp2->z = (_hx_tmp2->z * ( (Float)(-1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,negate,(void))

Float Vector3D_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_399_normalize)
HXLINE( 400)		Float l = this->get_length();
HXLINE( 402)		if ((l != 0)) {
HXLINE( 404)			 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 404)			_hx_tmp->x = (_hx_tmp->x / l);
HXLINE( 405)			 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 405)			_hx_tmp1->y = (_hx_tmp1->y / l);
HXLINE( 406)			 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 406)			_hx_tmp2->z = (_hx_tmp2->z / l);
            		}
HXLINE( 409)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,normalize,return )

void Vector3D_obj::project(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_423_project)
HXLINE( 424)		 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 424)		_hx_tmp->x = (_hx_tmp->x / this->w);
HXLINE( 425)		 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 425)		_hx_tmp1->y = (_hx_tmp1->y / this->w);
HXLINE( 426)		 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 426)		_hx_tmp2->z = (_hx_tmp2->z / this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,project,(void))

void Vector3D_obj::scaleBy(Float s){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_439_scaleBy)
HXLINE( 440)		 ::openfl::geom::Vector3D _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 440)		_hx_tmp->x = (_hx_tmp->x * s);
HXLINE( 441)		 ::openfl::geom::Vector3D _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 441)		_hx_tmp1->y = (_hx_tmp1->y * s);
HXLINE( 442)		 ::openfl::geom::Vector3D _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 442)		_hx_tmp2->z = (_hx_tmp2->z * s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,scaleBy,(void))

void Vector3D_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_453_setTo)
HXLINE( 454)		this->x = xa;
HXLINE( 455)		this->y = ya;
HXLINE( 456)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,setTo,(void))

 ::openfl::geom::Vector3D Vector3D_obj::subtract( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_471_subtract)
HXDLIN( 471)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(this->x - a->x),(this->y - a->y),(this->z - a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,subtract,return )

::String Vector3D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_482_toString)
HXDLIN( 482)		return ((((((HX_("Vector3D(",54,b9,2e,19) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,toString,return )

Float Vector3D_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_488_get_length)
HXDLIN( 488)		return ::Math_obj::sqrt((((this->x * this->x) + (this->y * this->y)) + (this->z * this->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_length,return )

Float Vector3D_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_493_get_lengthSquared)
HXDLIN( 493)		return (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_lengthSquared,return )

Float Vector3D_obj::angleBetween( ::openfl::geom::Vector3D a, ::openfl::geom::Vector3D b){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_197_angleBetween)
HXLINE( 198)		Float la = a->get_length();
HXLINE( 199)		Float lb = b->get_length();
HXLINE( 200)		Float dot = a->dotProduct(b);
HXLINE( 202)		if ((la != 0)) {
HXLINE( 204)			dot = (dot / la);
            		}
HXLINE( 207)		if ((lb != 0)) {
HXLINE( 209)			dot = (dot / lb);
            		}
HXLINE( 212)		return ::Math_obj::acos(dot);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,angleBetween,return )

Float Vector3D_obj::distance( ::openfl::geom::Vector3D pt1, ::openfl::geom::Vector3D pt2){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_285_distance)
HXLINE( 286)		Float x = (pt2->x - pt1->x);
HXLINE( 287)		Float y = (pt2->y - pt1->y);
HXLINE( 288)		Float z = (pt2->z - pt1->z);
HXLINE( 290)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,distance,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_X_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_498_get_X_AXIS)
HXDLIN( 498)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,1,0,0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_X_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Y_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_503_get_Y_AXIS)
HXDLIN( 503)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,0,1,0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Y_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Z_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_508_get_Z_AXIS)
HXDLIN( 508)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,0,0,1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Z_AXIS,return )


::hx::ObjectPtr< Vector3D_obj > Vector3D_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z,::hx::Null< Float >  __o_w) {
	::hx::ObjectPtr< Vector3D_obj > __this = new Vector3D_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

::hx::ObjectPtr< Vector3D_obj > Vector3D_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z,::hx::Null< Float >  __o_w) {
	Vector3D_obj *__this = (Vector3D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Vector3D_obj), false, "openfl.geom.Vector3D"));
	*(void **)__this = Vector3D_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Vector3D_obj::Vector3D_obj()
{
}

::hx::Val Vector3D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return ::hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"negate") ) { return ::hx::Val( negate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return ::hx::Val( project_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return ::hx::Val( scaleBy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return ::hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return ::hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return ::hx::Val( dotProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return ::hx::Val( nearEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return ::hx::Val( decrementBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return ::hx::Val( incrementBy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return ::hx::Val( crossProduct_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_lengthSquared() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return ::hx::Val( get_lengthSquared_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_X_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_Y_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_Z_AXIS() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
	}
	return false;
}

::hx::Val Vector3D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("lengthSquared",e1,24,45,35));
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Vector3D_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Vector3D_obj,w),HX_("w",77,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Vector3D_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Vector3D_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Vector3D_obj,z),HX_("z",7a,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Vector3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector3D_obj_sMemberFields[] = {
	HX_("w",77,00,00,00),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("add",21,f2,49,00),
	HX_("clone",5d,13,63,48),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("crossProduct",8f,a7,c9,63),
	HX_("decrementBy",ca,1a,7a,ad),
	HX_("dotProduct",a6,27,f0,3d),
	HX_("equals",3f,ee,f2,bf),
	HX_("incrementBy",e6,69,70,f4),
	HX_("nearEquals",47,71,71,fe),
	HX_("negate",c2,41,19,67),
	HX_("normalize",8d,37,a1,ab),
	HX_("project",d9,12,eb,f5),
	HX_("scaleBy",01,3f,07,65),
	HX_("setTo",bd,91,2f,7a),
	HX_("subtract",14,75,11,f8),
	HX_("toString",ac,d0,6e,38),
	HX_("get_length",af,04,8f,8f),
	HX_("get_lengthSquared",38,30,b5,3b),
	::String(null()) };

::hx::Class Vector3D_obj::__mClass;

static ::String Vector3D_obj_sStaticFields[] = {
	HX_("angleBetween",35,e6,d4,69),
	HX_("distance",35,93,f9,6b),
	HX_("get_X_AXIS",f1,30,3a,fe),
	HX_("get_Y_AXIS",50,8d,95,64),
	HX_("get_Z_AXIS",af,e9,f0,ca),
	::String(null())
};

void Vector3D_obj::__register()
{
	Vector3D_obj _hx_dummy;
	Vector3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.geom.Vector3D",e8,32,f9,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector3D_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Vector3D_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Vector3D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Vector3D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector3D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
