// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display__BlendMode_BlendMode_Impl_
#include <openfl/display/_BlendMode/BlendMode_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_193_fromString,"openfl.display._BlendMode.BlendMode_Impl_","fromString",0x5c7dc184,"openfl.display._BlendMode.BlendMode_Impl_.fromString","openfl/display/BlendMode.hx",193,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_216_toString,"openfl.display._BlendMode.BlendMode_Impl_","toString",0xf610f815,"openfl.display._BlendMode.BlendMode_Impl_.toString","openfl/display/BlendMode.hx",216,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_28_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",28,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_38_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",38,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_52_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",52,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_65_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",65,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_74_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",74,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_86_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",86,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_91_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",91,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_103_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",103,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_117_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",117,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_132_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",132,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_139_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",139,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_151_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",151,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_159_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",159,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_177_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",177,0xe0e49a56)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e785382931c1c9_189_boot,"openfl.display._BlendMode.BlendMode_Impl_","boot",0x5489831b,"openfl.display._BlendMode.BlendMode_Impl_.boot","openfl/display/BlendMode.hx",189,0xe0e49a56)
namespace openfl{
namespace display{
namespace _BlendMode{

void BlendMode_Impl__obj::__construct() { }

Dynamic BlendMode_Impl__obj::__CreateEmpty() { return new BlendMode_Impl__obj; }

void *BlendMode_Impl__obj::_hx_vtable = 0;

Dynamic BlendMode_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BlendMode_Impl__obj > _hx_result = new BlendMode_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BlendMode_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ffb4c4d;
}

 ::Dynamic BlendMode_Impl__obj::ADD;

 ::Dynamic BlendMode_Impl__obj::ALPHA;

 ::Dynamic BlendMode_Impl__obj::DARKEN;

 ::Dynamic BlendMode_Impl__obj::DIFFERENCE;

 ::Dynamic BlendMode_Impl__obj::ERASE;

 ::Dynamic BlendMode_Impl__obj::HARDLIGHT;

 ::Dynamic BlendMode_Impl__obj::INVERT;

 ::Dynamic BlendMode_Impl__obj::LAYER;

 ::Dynamic BlendMode_Impl__obj::LIGHTEN;

 ::Dynamic BlendMode_Impl__obj::MULTIPLY;

 ::Dynamic BlendMode_Impl__obj::NORMAL;

 ::Dynamic BlendMode_Impl__obj::OVERLAY;

 ::Dynamic BlendMode_Impl__obj::SCREEN;

 ::Dynamic BlendMode_Impl__obj::SHADER;

 ::Dynamic BlendMode_Impl__obj::SUBTRACT;

 ::Dynamic BlendMode_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_193_fromString)
HXDLIN( 193)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE( 195)			return 0;
HXDLIN( 195)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE( 196)			return 1;
HXDLIN( 196)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE( 197)			return 2;
HXDLIN( 197)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE( 198)			return 3;
HXDLIN( 198)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE( 199)			return 4;
HXDLIN( 199)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE( 200)			return 5;
HXDLIN( 200)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE( 201)			return 6;
HXDLIN( 201)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE( 202)			return 7;
HXDLIN( 202)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE( 203)			return 8;
HXDLIN( 203)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE( 204)			return 9;
HXDLIN( 204)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE( 205)			return 10;
HXDLIN( 205)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE( 206)			return 11;
HXDLIN( 206)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE( 207)			return 12;
HXDLIN( 207)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("shader",25,bf,20,1d)) ){
HXLINE( 208)			return 13;
HXDLIN( 208)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE( 209)			return 14;
HXDLIN( 209)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 210)			return null();
            		}
            		_hx_goto_0:;
HXLINE( 193)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlendMode_Impl__obj,fromString,return )

::String BlendMode_Impl__obj::toString( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_216_toString)
HXDLIN( 216)		 ::Dynamic _hx_switch_0 = this1;
            		if (  (_hx_switch_0==0) ){
HXLINE( 218)			return HX_("add",21,f2,49,00);
HXDLIN( 218)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE( 219)			return HX_("alpha",5e,a7,96,21);
HXDLIN( 219)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 220)			return HX_("darken",5f,36,3a,21);
HXDLIN( 220)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE( 221)			return HX_("difference",fd,9b,91,46);
HXDLIN( 221)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE( 222)			return HX_("erase",e6,e8,1c,73);
HXDLIN( 222)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE( 223)			return HX_("hardlight",0b,6e,6b,53);
HXDLIN( 223)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE( 224)			return HX_("invert",16,e7,d8,9f);
HXDLIN( 224)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE( 225)			return HX_("layer",d1,81,c0,6f);
HXDLIN( 225)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE( 226)			return HX_("lighten",bf,4a,e3,19);
HXDLIN( 226)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE( 227)			return HX_("multiply",24,e2,8c,9a);
HXDLIN( 227)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==10) ){
HXLINE( 228)			return HX_("normal",27,72,69,30);
HXDLIN( 228)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==11) ){
HXLINE( 229)			return HX_("overlay",90,43,10,a9);
HXDLIN( 229)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE( 230)			return HX_("screen",6c,3b,5d,47);
HXDLIN( 230)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==13) ){
HXLINE( 231)			return HX_("shader",25,bf,20,1d);
HXDLIN( 231)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==14) ){
HXLINE( 232)			return HX_("subtract",14,75,11,f8);
HXDLIN( 232)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 233)			return null();
            		}
            		_hx_goto_2:;
HXLINE( 216)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlendMode_Impl__obj,toString,return )


BlendMode_Impl__obj::BlendMode_Impl__obj()
{
}

bool BlendMode_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BlendMode_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo BlendMode_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::ADD,HX_("ADD",01,8e,31,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::ALPHA,HX_("ALPHA",3e,df,84,9f)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::DARKEN,HX_("DARKEN",5f,e2,bc,d3)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::DIFFERENCE,HX_("DIFFERENCE",fd,0f,9b,38)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::ERASE,HX_("ERASE",c6,20,0b,f1)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::HARDLIGHT,HX_("HARDLIGHT",eb,dd,c3,4e)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::INVERT,HX_("INVERT",16,93,5b,52)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::LAYER,HX_("LAYER",b1,b9,ae,ed)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::LIGHTEN,HX_("LIGHTEN",9f,1e,b7,99)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::MULTIPLY,HX_("MULTIPLY",24,72,12,f4)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::NORMAL,HX_("NORMAL",27,1e,ec,e2)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::OVERLAY,HX_("OVERLAY",70,17,e4,28)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::SCREEN,HX_("SCREEN",6c,e7,df,f9)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::SHADER,HX_("SHADER",25,6b,a3,cf)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BlendMode_Impl__obj::SUBTRACT,HX_("SUBTRACT",14,05,97,51)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void BlendMode_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::ADD,"ADD");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::ALPHA,"ALPHA");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::DARKEN,"DARKEN");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::DIFFERENCE,"DIFFERENCE");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::ERASE,"ERASE");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::HARDLIGHT,"HARDLIGHT");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::INVERT,"INVERT");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::LAYER,"LAYER");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::LIGHTEN,"LIGHTEN");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::MULTIPLY,"MULTIPLY");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::NORMAL,"NORMAL");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::OVERLAY,"OVERLAY");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::SCREEN,"SCREEN");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::SHADER,"SHADER");
	HX_MARK_MEMBER_NAME(BlendMode_Impl__obj::SUBTRACT,"SUBTRACT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlendMode_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::ADD,"ADD");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::ALPHA,"ALPHA");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::DARKEN,"DARKEN");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::DIFFERENCE,"DIFFERENCE");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::ERASE,"ERASE");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::HARDLIGHT,"HARDLIGHT");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::INVERT,"INVERT");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::LAYER,"LAYER");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::LIGHTEN,"LIGHTEN");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::MULTIPLY,"MULTIPLY");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::NORMAL,"NORMAL");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::OVERLAY,"OVERLAY");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::SCREEN,"SCREEN");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::SHADER,"SHADER");
	HX_VISIT_MEMBER_NAME(BlendMode_Impl__obj::SUBTRACT,"SUBTRACT");
};

#endif

::hx::Class BlendMode_Impl__obj::__mClass;

static ::String BlendMode_Impl__obj_sStaticFields[] = {
	HX_("ADD",01,8e,31,00),
	HX_("ALPHA",3e,df,84,9f),
	HX_("DARKEN",5f,e2,bc,d3),
	HX_("DIFFERENCE",fd,0f,9b,38),
	HX_("ERASE",c6,20,0b,f1),
	HX_("HARDLIGHT",eb,dd,c3,4e),
	HX_("INVERT",16,93,5b,52),
	HX_("LAYER",b1,b9,ae,ed),
	HX_("LIGHTEN",9f,1e,b7,99),
	HX_("MULTIPLY",24,72,12,f4),
	HX_("NORMAL",27,1e,ec,e2),
	HX_("OVERLAY",70,17,e4,28),
	HX_("SCREEN",6c,e7,df,f9),
	HX_("SHADER",25,6b,a3,cf),
	HX_("SUBTRACT",14,05,97,51),
	HX_("fromString",db,2d,74,54),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void BlendMode_Impl__obj::__register()
{
	BlendMode_Impl__obj _hx_dummy;
	BlendMode_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display._BlendMode.BlendMode_Impl_",25,ca,18,74);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BlendMode_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BlendMode_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BlendMode_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BlendMode_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlendMode_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlendMode_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlendMode_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BlendMode_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_28_boot)
HXDLIN(  28)		ADD = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_38_boot)
HXDLIN(  38)		ALPHA = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_52_boot)
HXDLIN(  52)		DARKEN = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_65_boot)
HXDLIN(  65)		DIFFERENCE = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_74_boot)
HXDLIN(  74)		ERASE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_86_boot)
HXDLIN(  86)		HARDLIGHT = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_91_boot)
HXDLIN(  91)		INVERT = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_103_boot)
HXDLIN( 103)		LAYER = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_117_boot)
HXDLIN( 117)		LIGHTEN = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_132_boot)
HXDLIN( 132)		MULTIPLY = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_139_boot)
HXDLIN( 139)		NORMAL = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_151_boot)
HXDLIN( 151)		OVERLAY = 11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_159_boot)
HXDLIN( 159)		SCREEN = 12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_177_boot)
HXDLIN( 177)		SHADER = 13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e6e785382931c1c9_189_boot)
HXDLIN( 189)		SUBTRACT = 14;
            	}
}

} // end namespace openfl
} // end namespace display
} // end namespace _BlendMode
