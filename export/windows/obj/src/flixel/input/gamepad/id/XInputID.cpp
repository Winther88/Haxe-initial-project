// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_id_XInputID
#include <flixel/input/gamepad/id/XInputID.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_61_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",61,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_62_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",62,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_63_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",63,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_64_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",64,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_66_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",66,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_67_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",67,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_68_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",68,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_70_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",70,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_71_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",71,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_73_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",73,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_74_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",74,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_76_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",76,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_77_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",77,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_78_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",78,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_79_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",79,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_81_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",81,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_87_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",87,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_94_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",94,0x9958eee3)
HX_LOCAL_STACK_FRAME(_hx_pos_559677d855d318da_95_boot,"flixel.input.gamepad.id.XInputID","boot",0x5dbba0a3,"flixel.input.gamepad.id.XInputID.boot","flixel/input/gamepad/id/XInputID.hx",95,0x9958eee3)
namespace flixel{
namespace input{
namespace gamepad{
namespace id{

void XInputID_obj::__construct() { }

Dynamic XInputID_obj::__CreateEmpty() { return new XInputID_obj; }

void *XInputID_obj::_hx_vtable = 0;

Dynamic XInputID_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< XInputID_obj > _hx_result = new XInputID_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool XInputID_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x42843883;
}

int XInputID_obj::A;

int XInputID_obj::B;

int XInputID_obj::X;

int XInputID_obj::Y;

int XInputID_obj::BACK;

int XInputID_obj::GUIDE;

int XInputID_obj::START;

int XInputID_obj::LEFT_STICK_CLICK;

int XInputID_obj::RIGHT_STICK_CLICK;

int XInputID_obj::LB;

int XInputID_obj::RB;

int XInputID_obj::DPAD_UP;

int XInputID_obj::DPAD_DOWN;

int XInputID_obj::DPAD_LEFT;

int XInputID_obj::DPAD_RIGHT;

 ::flixel::input::gamepad::FlxGamepadAnalogStick XInputID_obj::LEFT_ANALOG_STICK;

 ::flixel::input::gamepad::FlxGamepadAnalogStick XInputID_obj::RIGHT_ANALOG_STICK;

int XInputID_obj::LEFT_TRIGGER;

int XInputID_obj::RIGHT_TRIGGER;


XInputID_obj::XInputID_obj()
{
}

bool XInputID_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"LEFT_ANALOG_STICK") ) { outValue = ( LEFT_ANALOG_STICK ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"RIGHT_ANALOG_STICK") ) { outValue = ( RIGHT_ANALOG_STICK ); return true; }
	}
	return false;
}

bool XInputID_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"LEFT_ANALOG_STICK") ) { LEFT_ANALOG_STICK=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadAnalogStick >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"RIGHT_ANALOG_STICK") ) { RIGHT_ANALOG_STICK=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadAnalogStick >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *XInputID_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo XInputID_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &XInputID_obj::A,HX_("A",41,00,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::B,HX_("B",42,00,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::X,HX_("X",58,00,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::Y,HX_("Y",59,00,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::BACK,HX_("BACK",27,a2,d1,2b)},
	{::hx::fsInt,(void *) &XInputID_obj::GUIDE,HX_("GUIDE",9c,f2,d9,19)},
	{::hx::fsInt,(void *) &XInputID_obj::START,HX_("START",42,ac,f9,01)},
	{::hx::fsInt,(void *) &XInputID_obj::LEFT_STICK_CLICK,HX_("LEFT_STICK_CLICK",21,9d,4a,bf)},
	{::hx::fsInt,(void *) &XInputID_obj::RIGHT_STICK_CLICK,HX_("RIGHT_STICK_CLICK",56,4c,25,0b)},
	{::hx::fsInt,(void *) &XInputID_obj::LB,HX_("LB",76,42,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::RB,HX_("RB",b0,47,00,00)},
	{::hx::fsInt,(void *) &XInputID_obj::DPAD_UP,HX_("DPAD_UP",6b,00,87,a2)},
	{::hx::fsInt,(void *) &XInputID_obj::DPAD_DOWN,HX_("DPAD_DOWN",72,1a,5b,87)},
	{::hx::fsInt,(void *) &XInputID_obj::DPAD_LEFT,HX_("DPAD_LEFT",17,2a,9d,8c)},
	{::hx::fsInt,(void *) &XInputID_obj::DPAD_RIGHT,HX_("DPAD_RIGHT",ac,b7,f4,f3)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAnalogStick */ ,(void *) &XInputID_obj::LEFT_ANALOG_STICK,HX_("LEFT_ANALOG_STICK",19,49,58,a5)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAnalogStick */ ,(void *) &XInputID_obj::RIGHT_ANALOG_STICK,HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8)},
	{::hx::fsInt,(void *) &XInputID_obj::LEFT_TRIGGER,HX_("LEFT_TRIGGER",a0,31,c6,eb)},
	{::hx::fsInt,(void *) &XInputID_obj::RIGHT_TRIGGER,HX_("RIGHT_TRIGGER",55,e2,81,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void XInputID_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(XInputID_obj::A,"A");
	HX_MARK_MEMBER_NAME(XInputID_obj::B,"B");
	HX_MARK_MEMBER_NAME(XInputID_obj::X,"X");
	HX_MARK_MEMBER_NAME(XInputID_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(XInputID_obj::BACK,"BACK");
	HX_MARK_MEMBER_NAME(XInputID_obj::GUIDE,"GUIDE");
	HX_MARK_MEMBER_NAME(XInputID_obj::START,"START");
	HX_MARK_MEMBER_NAME(XInputID_obj::LEFT_STICK_CLICK,"LEFT_STICK_CLICK");
	HX_MARK_MEMBER_NAME(XInputID_obj::RIGHT_STICK_CLICK,"RIGHT_STICK_CLICK");
	HX_MARK_MEMBER_NAME(XInputID_obj::LB,"LB");
	HX_MARK_MEMBER_NAME(XInputID_obj::RB,"RB");
	HX_MARK_MEMBER_NAME(XInputID_obj::DPAD_UP,"DPAD_UP");
	HX_MARK_MEMBER_NAME(XInputID_obj::DPAD_DOWN,"DPAD_DOWN");
	HX_MARK_MEMBER_NAME(XInputID_obj::DPAD_LEFT,"DPAD_LEFT");
	HX_MARK_MEMBER_NAME(XInputID_obj::DPAD_RIGHT,"DPAD_RIGHT");
	HX_MARK_MEMBER_NAME(XInputID_obj::LEFT_ANALOG_STICK,"LEFT_ANALOG_STICK");
	HX_MARK_MEMBER_NAME(XInputID_obj::RIGHT_ANALOG_STICK,"RIGHT_ANALOG_STICK");
	HX_MARK_MEMBER_NAME(XInputID_obj::LEFT_TRIGGER,"LEFT_TRIGGER");
	HX_MARK_MEMBER_NAME(XInputID_obj::RIGHT_TRIGGER,"RIGHT_TRIGGER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void XInputID_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(XInputID_obj::A,"A");
	HX_VISIT_MEMBER_NAME(XInputID_obj::B,"B");
	HX_VISIT_MEMBER_NAME(XInputID_obj::X,"X");
	HX_VISIT_MEMBER_NAME(XInputID_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(XInputID_obj::BACK,"BACK");
	HX_VISIT_MEMBER_NAME(XInputID_obj::GUIDE,"GUIDE");
	HX_VISIT_MEMBER_NAME(XInputID_obj::START,"START");
	HX_VISIT_MEMBER_NAME(XInputID_obj::LEFT_STICK_CLICK,"LEFT_STICK_CLICK");
	HX_VISIT_MEMBER_NAME(XInputID_obj::RIGHT_STICK_CLICK,"RIGHT_STICK_CLICK");
	HX_VISIT_MEMBER_NAME(XInputID_obj::LB,"LB");
	HX_VISIT_MEMBER_NAME(XInputID_obj::RB,"RB");
	HX_VISIT_MEMBER_NAME(XInputID_obj::DPAD_UP,"DPAD_UP");
	HX_VISIT_MEMBER_NAME(XInputID_obj::DPAD_DOWN,"DPAD_DOWN");
	HX_VISIT_MEMBER_NAME(XInputID_obj::DPAD_LEFT,"DPAD_LEFT");
	HX_VISIT_MEMBER_NAME(XInputID_obj::DPAD_RIGHT,"DPAD_RIGHT");
	HX_VISIT_MEMBER_NAME(XInputID_obj::LEFT_ANALOG_STICK,"LEFT_ANALOG_STICK");
	HX_VISIT_MEMBER_NAME(XInputID_obj::RIGHT_ANALOG_STICK,"RIGHT_ANALOG_STICK");
	HX_VISIT_MEMBER_NAME(XInputID_obj::LEFT_TRIGGER,"LEFT_TRIGGER");
	HX_VISIT_MEMBER_NAME(XInputID_obj::RIGHT_TRIGGER,"RIGHT_TRIGGER");
};

#endif

::hx::Class XInputID_obj::__mClass;

static ::String XInputID_obj_sStaticFields[] = {
	HX_("A",41,00,00,00),
	HX_("B",42,00,00,00),
	HX_("X",58,00,00,00),
	HX_("Y",59,00,00,00),
	HX_("BACK",27,a2,d1,2b),
	HX_("GUIDE",9c,f2,d9,19),
	HX_("START",42,ac,f9,01),
	HX_("LEFT_STICK_CLICK",21,9d,4a,bf),
	HX_("RIGHT_STICK_CLICK",56,4c,25,0b),
	HX_("LB",76,42,00,00),
	HX_("RB",b0,47,00,00),
	HX_("DPAD_UP",6b,00,87,a2),
	HX_("DPAD_DOWN",72,1a,5b,87),
	HX_("DPAD_LEFT",17,2a,9d,8c),
	HX_("DPAD_RIGHT",ac,b7,f4,f3),
	HX_("LEFT_ANALOG_STICK",19,49,58,a5),
	HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8),
	HX_("LEFT_TRIGGER",a0,31,c6,eb),
	HX_("RIGHT_TRIGGER",55,e2,81,00),
	::String(null())
};

void XInputID_obj::__register()
{
	XInputID_obj _hx_dummy;
	XInputID_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.id.XInputID",9d,99,2b,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &XInputID_obj::__GetStatic;
	__mClass->mSetStaticField = &XInputID_obj::__SetStatic;
	__mClass->mMarkFunc = XInputID_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(XInputID_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< XInputID_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = XInputID_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = XInputID_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = XInputID_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void XInputID_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_61_boot)
HXDLIN(  61)		A = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_62_boot)
HXDLIN(  62)		B = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_63_boot)
HXDLIN(  63)		X = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_64_boot)
HXDLIN(  64)		Y = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_66_boot)
HXDLIN(  66)		BACK = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_67_boot)
HXDLIN(  67)		GUIDE = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_68_boot)
HXDLIN(  68)		START = 12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_70_boot)
HXDLIN(  70)		LEFT_STICK_CLICK = 13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_71_boot)
HXDLIN(  71)		RIGHT_STICK_CLICK = 14;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_73_boot)
HXDLIN(  73)		LB = 15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_74_boot)
HXDLIN(  74)		RB = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_76_boot)
HXDLIN(  76)		DPAD_UP = 17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_77_boot)
HXDLIN(  77)		DPAD_DOWN = 18;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_78_boot)
HXDLIN(  78)		DPAD_LEFT = 19;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_79_boot)
HXDLIN(  79)		DPAD_RIGHT = 20;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_559677d855d318da_81_boot)
HXDLIN(  81)		LEFT_ANALOG_STICK =  ::flixel::input::gamepad::FlxGamepadAnalogStick_obj::__alloc( HX_CTX ,0,1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("right",dc,0b,64,e9),24)
            			->setFixed(1,HX_("up",5b,66,00,00),21)
            			->setFixed(2,HX_("down",62,f8,6d,42),22)
            			->setFixed(3,HX_("left",07,08,b0,47),23)));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_559677d855d318da_87_boot)
HXDLIN(  87)		RIGHT_ANALOG_STICK =  ::flixel::input::gamepad::FlxGamepadAnalogStick_obj::__alloc( HX_CTX ,2,3, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("right",dc,0b,64,e9),28)
            			->setFixed(1,HX_("up",5b,66,00,00),25)
            			->setFixed(2,HX_("down",62,f8,6d,42),26)
            			->setFixed(3,HX_("left",07,08,b0,47),27)));
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_94_boot)
HXDLIN(  94)		LEFT_TRIGGER = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_559677d855d318da_95_boot)
HXDLIN(  95)		RIGHT_TRIGGER = 5;
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace id
