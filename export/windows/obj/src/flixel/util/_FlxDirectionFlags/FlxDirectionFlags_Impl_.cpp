// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_util__FlxDirectionFlags_FlxDirectionFlags_Impl_
#include <flixel/util/_FlxDirectionFlags/FlxDirectionFlags_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_44_get_degrees,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","get_degrees",0xa78a1b11,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.get_degrees","flixel/util/FlxDirectionFlags.hx",44,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_65_get_radians,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","get_radians",0x941f7ddc,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.get_radians","flixel/util/FlxDirectionFlags.hx",65,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_73_has,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","has",0xa8930bad,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.has","flixel/util/FlxDirectionFlags.hx",73,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_81_hasAny,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","hasAny",0x6d31713f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.hasAny","flixel/util/FlxDirectionFlags.hx",81,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_89_with,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","with",0xe2077253,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.with","flixel/util/FlxDirectionFlags.hx",89,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_97_without,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","without",0x6ddd241b,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.without","flixel/util/FlxDirectionFlags.hx",97,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_101_toString,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","toString",0xba867779,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.toString","flixel/util/FlxDirectionFlags.hx",101,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_125_fromBools,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","fromBools",0xbe1b57d2,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.fromBools","flixel/util/FlxDirectionFlags.hx",125,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_12_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",12,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_13_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",13,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_14_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",14,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_15_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",15,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_22_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",22,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_25_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",25,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_28_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",28,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_31_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",31,0x7932e23e)
HX_LOCAL_STACK_FRAME(_hx_pos_01e78c70af2a6c38_34_boot,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_","boot",0xd42a807f,"flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_.boot","flixel/util/FlxDirectionFlags.hx",34,0x7932e23e)
namespace flixel{
namespace util{
namespace _FlxDirectionFlags{

void FlxDirectionFlags_Impl__obj::__construct() { }

Dynamic FlxDirectionFlags_Impl__obj::__CreateEmpty() { return new FlxDirectionFlags_Impl__obj; }

void *FlxDirectionFlags_Impl__obj::_hx_vtable = 0;

Dynamic FlxDirectionFlags_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxDirectionFlags_Impl__obj > _hx_result = new FlxDirectionFlags_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxDirectionFlags_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13f9d119;
}

int FlxDirectionFlags_Impl__obj::LEFT;

int FlxDirectionFlags_Impl__obj::RIGHT;

int FlxDirectionFlags_Impl__obj::UP;

int FlxDirectionFlags_Impl__obj::DOWN;

int FlxDirectionFlags_Impl__obj::NONE;

int FlxDirectionFlags_Impl__obj::CEILING;

int FlxDirectionFlags_Impl__obj::FLOOR;

int FlxDirectionFlags_Impl__obj::WALL;

int FlxDirectionFlags_Impl__obj::ANY;

Float FlxDirectionFlags_Impl__obj::get_degrees(int this1){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_44_get_degrees)
HXDLIN(  44)		switch((int)(this1)){
            			case (int)1: {
HXLINE(  48)				return ( (Float)(180) );
            			}
            			break;
            			case (int)16: {
HXLINE(  45)				return ( (Float)(0) );
            			}
            			break;
            			case (int)256: {
HXLINE(  47)				return ( (Float)(-90) );
            			}
            			break;
            			case (int)4096: {
HXLINE(  46)				return ( (Float)(90) );
            			}
            			break;
            			default:{
HXLINE(  49)				int f = this1;
HXDLIN(  49)				if ((f == (4096 | 16))) {
HXLINE(  49)					return ( (Float)(45) );
            				}
            				else {
HXLINE(  50)					int f1 = this1;
HXDLIN(  50)					if ((f1 == (4096 | 1))) {
HXLINE(  50)						return ( (Float)(135) );
            					}
            					else {
HXLINE(  51)						int f2 = this1;
HXDLIN(  51)						if ((f2 == (256 | 16))) {
HXLINE(  51)							return ( (Float)(-45) );
            						}
            						else {
HXLINE(  52)							int f3 = this1;
HXDLIN(  52)							if ((f3 == (256 | 1))) {
HXLINE(  52)								return ( (Float)(-135) );
            							}
            							else {
HXLINE(  53)								return ( (Float)(0) );
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  44)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDirectionFlags_Impl__obj,get_degrees,return )

Float FlxDirectionFlags_Impl__obj::get_radians(int this1){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_65_get_radians)
HXDLIN(  65)		Float _hx_tmp = ::flixel::util::_FlxDirectionFlags::FlxDirectionFlags_Impl__obj::get_degrees(this1);
HXDLIN(  65)		return (_hx_tmp * (::Math_obj::PI / ( (Float)(180) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDirectionFlags_Impl__obj,get_radians,return )

bool FlxDirectionFlags_Impl__obj::has(int this1,int dir){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_73_has)
HXDLIN(  73)		return ((this1 & dir) == dir);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxDirectionFlags_Impl__obj,has,return )

bool FlxDirectionFlags_Impl__obj::hasAny(int this1,int dir){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_81_hasAny)
HXDLIN(  81)		return ((this1 & dir) > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxDirectionFlags_Impl__obj,hasAny,return )

int FlxDirectionFlags_Impl__obj::with(int this1,int dir){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_89_with)
HXDLIN(  89)		return (this1 | dir);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxDirectionFlags_Impl__obj,with,return )

int FlxDirectionFlags_Impl__obj::without(int this1,int dir){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_97_without)
HXDLIN(  97)		return (this1 & ~(dir));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxDirectionFlags_Impl__obj,without,return )

::String FlxDirectionFlags_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_101_toString)
HXLINE( 102)		if ((this1 == 0)) {
HXLINE( 103)			return HX_("NONE",b8,da,ca,33);
            		}
HXLINE( 105)		::String str = HX_("",00,00,00,00);
HXLINE( 106)		int dir = 1;
HXDLIN( 106)		if (((this1 & dir) == dir)) {
HXLINE( 107)			str = (str + HX_(" | L",88,07,85,15));
            		}
HXLINE( 108)		int dir1 = 16;
HXDLIN( 108)		if (((this1 & dir1) == dir1)) {
HXLINE( 109)			str = (str + HX_(" | R",8e,07,85,15));
            		}
HXLINE( 110)		int dir2 = 256;
HXDLIN( 110)		if (((this1 & dir2) == dir2)) {
HXLINE( 111)			str = (str + HX_(" | U",91,07,85,15));
            		}
HXLINE( 112)		int dir3 = 4096;
HXDLIN( 112)		if (((this1 & dir3) == dir3)) {
HXLINE( 113)			str = (str + HX_(" | D",80,07,85,15));
            		}
HXLINE( 116)		return str.substr(3,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDirectionFlags_Impl__obj,toString,return )

int FlxDirectionFlags_Impl__obj::fromBools(bool left,bool right,bool up,bool down){
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_125_fromBools)
HXDLIN( 125)		int _hx_tmp;
HXDLIN( 125)		if (left) {
HXDLIN( 125)			_hx_tmp = 1;
            		}
            		else {
HXDLIN( 125)			_hx_tmp = 0;
            		}
HXLINE( 126)		int _hx_tmp1;
HXDLIN( 126)		if (right) {
HXLINE( 126)			_hx_tmp1 = 16;
            		}
            		else {
HXLINE( 126)			_hx_tmp1 = 0;
            		}
HXLINE( 127)		int _hx_tmp2;
HXDLIN( 127)		if (up) {
HXLINE( 127)			_hx_tmp2 = 256;
            		}
            		else {
HXLINE( 127)			_hx_tmp2 = 0;
            		}
HXLINE( 128)		int _hx_tmp3;
HXDLIN( 128)		if (down) {
HXLINE( 128)			_hx_tmp3 = 4096;
            		}
            		else {
HXLINE( 128)			_hx_tmp3 = 0;
            		}
HXLINE( 125)		return (((_hx_tmp | _hx_tmp1) | _hx_tmp2) | _hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxDirectionFlags_Impl__obj,fromBools,return )


FlxDirectionFlags_Impl__obj::FlxDirectionFlags_Impl__obj()
{
}

bool FlxDirectionFlags_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { outValue = has_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"with") ) { outValue = with_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hasAny") ) { outValue = hasAny_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"without") ) { outValue = without_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBools") ) { outValue = fromBools_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_degrees") ) { outValue = get_degrees_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_radians") ) { outValue = get_radians_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxDirectionFlags_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxDirectionFlags_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::LEFT,HX_("LEFT",07,d0,70,32)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::RIGHT,HX_("RIGHT",bc,43,52,67)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::UP,HX_("UP",5b,4a,00,00)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::DOWN,HX_("DOWN",62,c0,2e,2d)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::NONE,HX_("NONE",b8,da,ca,33)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::CEILING,HX_("CEILING",dd,32,72,b3)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::FLOOR,HX_("FLOOR",ac,09,85,80)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::WALL,HX_("WALL",0a,25,b3,39)},
	{::hx::fsInt,(void *) &FlxDirectionFlags_Impl__obj::ANY,HX_("ANY",cc,96,31,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxDirectionFlags_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::UP,"UP");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::CEILING,"CEILING");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::FLOOR,"FLOOR");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::WALL,"WALL");
	HX_MARK_MEMBER_NAME(FlxDirectionFlags_Impl__obj::ANY,"ANY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxDirectionFlags_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::CEILING,"CEILING");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::FLOOR,"FLOOR");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::WALL,"WALL");
	HX_VISIT_MEMBER_NAME(FlxDirectionFlags_Impl__obj::ANY,"ANY");
};

#endif

::hx::Class FlxDirectionFlags_Impl__obj::__mClass;

static ::String FlxDirectionFlags_Impl__obj_sStaticFields[] = {
	HX_("LEFT",07,d0,70,32),
	HX_("RIGHT",bc,43,52,67),
	HX_("UP",5b,4a,00,00),
	HX_("DOWN",62,c0,2e,2d),
	HX_("NONE",b8,da,ca,33),
	HX_("CEILING",dd,32,72,b3),
	HX_("FLOOR",ac,09,85,80),
	HX_("WALL",0a,25,b3,39),
	HX_("ANY",cc,96,31,00),
	HX_("get_degrees",be,43,55,c0),
	HX_("get_radians",89,a6,ea,ac),
	HX_("has",5a,3f,4f,00),
	HX_("hasAny",b2,07,31,bb),
	HX_("with",06,76,f8,4e),
	HX_("without",48,32,81,5f),
	HX_("toString",ac,d0,6e,38),
	HX_("fromBools",3f,0b,81,6b),
	::String(null())
};

void FlxDirectionFlags_Impl__obj::__register()
{
	FlxDirectionFlags_Impl__obj _hx_dummy;
	FlxDirectionFlags_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.util._FlxDirectionFlags.FlxDirectionFlags_Impl_",41,c7,60,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxDirectionFlags_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxDirectionFlags_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxDirectionFlags_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxDirectionFlags_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxDirectionFlags_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxDirectionFlags_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxDirectionFlags_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxDirectionFlags_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_12_boot)
HXDLIN(  12)		LEFT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_13_boot)
HXDLIN(  13)		RIGHT = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_14_boot)
HXDLIN(  14)		UP = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_15_boot)
HXDLIN(  15)		DOWN = 4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_22_boot)
HXDLIN(  22)		NONE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_25_boot)
HXDLIN(  25)		CEILING = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_28_boot)
HXDLIN(  28)		FLOOR = 4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_31_boot)
HXDLIN(  31)		WALL = 17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_01e78c70af2a6c38_34_boot)
HXDLIN(  34)		ANY = 4369;
            	}
}

} // end namespace flixel
} // end namespace util
} // end namespace _FlxDirectionFlags
